# -*- coding: utf-8 -*-
# Auto-generated by schemapi: do not modify file directly
# - schemapi version: 0.3.0
# - date:    2018-01-25 00:15:25



import traitlets as T
from . import jstraitlets as jst


def _localname(name):
    """Construct an object name relative to the local module"""
    return "{0}.{1}".format(__name__, name)



class AggregateOp(jst.JSONEnum):
    """
    One of ['argmax', 'argmin', 'average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'q1', 'q3', 'ci0', 'ci1', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']
    """
    values = ['argmax', 'argmin', 'average', 'count', 'distinct', 'max', 'mean', 'median', 'min', 'missing', 'q1', 'q3', 'ci0', 'ci1', 'stdev', 'stdevp', 'sum', 'valid', 'values', 'variance', 'variancep']
    def __init__(self, **kwargs):
        super(AggregateOp, self).__init__(self.values, **kwargs)


class Anchor(jst.JSONEnum):
    """
    One of ['start', 'middle', 'end']
    """
    values = ['start', 'middle', 'end']
    def __init__(self, **kwargs):
        super(Anchor, self).__init__(self.values, **kwargs)


class AutosizeType(jst.JSONEnum):
    """
    One of ['pad', 'fit', 'none']
    """
    values = ['pad', 'fit', 'none']
    def __init__(self, **kwargs):
        super(AutosizeType, self).__init__(self.values, **kwargs)


class AxisOrient(jst.JSONEnum):
    """
    One of ['top', 'right', 'left', 'bottom']
    """
    values = ['top', 'right', 'left', 'bottom']
    def __init__(self, **kwargs):
        super(AxisOrient, self).__init__(self.values, **kwargs)


class FontStyle(jst.JSONEnum):
    """
    One of ['normal', 'italic']
    """
    values = ['normal', 'italic']
    def __init__(self, **kwargs):
        super(FontStyle, self).__init__(self.values, **kwargs)


class FontWeight(jst.JSONEnum):
    """
    One of ['normal', 'bold']
    """
    values = ['normal', 'bold']
    def __init__(self, **kwargs):
        super(FontWeight, self).__init__(self.values, **kwargs)


class HorizontalAlign(jst.JSONEnum):
    """
    One of ['left', 'right', 'center']
    """
    values = ['left', 'right', 'center']
    def __init__(self, **kwargs):
        super(HorizontalAlign, self).__init__(self.values, **kwargs)


class Interpolate(jst.JSONEnum):
    """
    One of ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    """
    values = ['linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis', 'basis-open', 'basis-closed', 'cardinal', 'cardinal-open', 'cardinal-closed', 'bundle', 'monotone']
    def __init__(self, **kwargs):
        super(Interpolate, self).__init__(self.values, **kwargs)


class LegendOrient(jst.JSONEnum):
    """
    One of ['left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'none']
    """
    values = ['left', 'right', 'top-left', 'top-right', 'bottom-left', 'bottom-right', 'none']
    def __init__(self, **kwargs):
        super(LegendOrient, self).__init__(self.values, **kwargs)


class LocalMultiTimeUnit(jst.JSONEnum):
    """
    One of ['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'quartermonth', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']
    """
    values = ['yearquarter', 'yearquartermonth', 'yearmonth', 'yearmonthdate', 'yearmonthdatehours', 'yearmonthdatehoursminutes', 'yearmonthdatehoursminutesseconds', 'quartermonth', 'monthdate', 'hoursminutes', 'hoursminutesseconds', 'minutesseconds', 'secondsmilliseconds']
    def __init__(self, **kwargs):
        super(LocalMultiTimeUnit, self).__init__(self.values, **kwargs)


class LocalSingleTimeUnit(jst.JSONEnum):
    """
    One of ['year', 'quarter', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']
    """
    values = ['year', 'quarter', 'month', 'day', 'date', 'hours', 'minutes', 'seconds', 'milliseconds']
    def __init__(self, **kwargs):
        super(LocalSingleTimeUnit, self).__init__(self.values, **kwargs)


class Mark(jst.JSONEnum):
    """
    One of ['area', 'bar', 'line', 'point', 'text', 'tick', 'rect', 'rule', 'circle', 'square']
    """
    values = ['area', 'bar', 'line', 'point', 'text', 'tick', 'rect', 'rule', 'circle', 'square']
    def __init__(self, **kwargs):
        super(Mark, self).__init__(self.values, **kwargs)


class NiceTime(jst.JSONEnum):
    """
    One of ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    """
    values = ['second', 'minute', 'hour', 'day', 'week', 'month', 'year']
    def __init__(self, **kwargs):
        super(NiceTime, self).__init__(self.values, **kwargs)


class Orient(jst.JSONEnum):
    """
    One of ['horizontal', 'vertical']
    """
    values = ['horizontal', 'vertical']
    def __init__(self, **kwargs):
        super(Orient, self).__init__(self.values, **kwargs)


class ResolveMode(jst.JSONEnum):
    """
    One of ['independent', 'shared']
    """
    values = ['independent', 'shared']
    def __init__(self, **kwargs):
        super(ResolveMode, self).__init__(self.values, **kwargs)


class ScaleType(jst.JSONEnum):
    """
    One of ['linear', 'bin-linear', 'log', 'pow', 'sqrt', 'time', 'utc', 'sequential', 'ordinal', 'bin-ordinal', 'point', 'band']
    """
    values = ['linear', 'bin-linear', 'log', 'pow', 'sqrt', 'time', 'utc', 'sequential', 'ordinal', 'bin-ordinal', 'point', 'band']
    def __init__(self, **kwargs):
        super(ScaleType, self).__init__(self.values, **kwargs)


class SelectionResolution(jst.JSONEnum):
    """
    One of ['global', 'union', 'intersect']
    """
    values = ['global', 'union', 'intersect']
    def __init__(self, **kwargs):
        super(SelectionResolution, self).__init__(self.values, **kwargs)


class SingleDefChannel(jst.JSONEnum):
    """
    One of ['x', 'y', 'x2', 'y2', 'row', 'column', 'size', 'shape', 'color', 'opacity', 'text', 'tooltip']
    """
    values = ['x', 'y', 'x2', 'y2', 'row', 'column', 'size', 'shape', 'color', 'opacity', 'text', 'tooltip']
    def __init__(self, **kwargs):
        super(SingleDefChannel, self).__init__(self.values, **kwargs)


class SortOrder(jst.JSONEnum):
    """
    One of ['ascending', 'descending', None]
    """
    values = ['ascending', 'descending', None]
    def __init__(self, **kwargs):
        super(SortOrder, self).__init__(self.values, **kwargs)


class StackOffset(jst.JSONEnum):
    """
    One of ['zero', 'center', 'normalize']
    """
    values = ['zero', 'center', 'normalize']
    def __init__(self, **kwargs):
        super(StackOffset, self).__init__(self.values, **kwargs)


class TitleOrient(jst.JSONEnum):
    """
    One of ['top', 'bottom', 'left', 'right']
    """
    values = ['top', 'bottom', 'left', 'right']
    def __init__(self, **kwargs):
        super(TitleOrient, self).__init__(self.values, **kwargs)


class Type(jst.JSONEnum):
    """
    One of ['quantitative', 'ordinal', 'temporal', 'nominal']
    """
    values = ['quantitative', 'ordinal', 'temporal', 'nominal']
    def __init__(self, **kwargs):
        super(Type, self).__init__(self.values, **kwargs)


class UtcMultiTimeUnit(jst.JSONEnum):
    """
    One of ['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcquartermonth', 'utcmonthdate', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']
    """
    values = ['utcyearquarter', 'utcyearquartermonth', 'utcyearmonth', 'utcyearmonthdate', 'utcyearmonthdatehours', 'utcyearmonthdatehoursminutes', 'utcyearmonthdatehoursminutesseconds', 'utcquartermonth', 'utcmonthdate', 'utchoursminutes', 'utchoursminutesseconds', 'utcminutesseconds', 'utcsecondsmilliseconds']
    def __init__(self, **kwargs):
        super(UtcMultiTimeUnit, self).__init__(self.values, **kwargs)


class UtcSingleTimeUnit(jst.JSONEnum):
    """
    One of ['utcyear', 'utcquarter', 'utcmonth', 'utcday', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']
    """
    values = ['utcyear', 'utcquarter', 'utcmonth', 'utcday', 'utcdate', 'utchours', 'utcminutes', 'utcseconds', 'utcmilliseconds']
    def __init__(self, **kwargs):
        super(UtcSingleTimeUnit, self).__init__(self.values, **kwargs)


class VerticalAlign(jst.JSONEnum):
    """
    One of ['top', 'middle', 'bottom']
    """
    values = ['top', 'middle', 'bottom']
    def __init__(self, **kwargs):
        super(VerticalAlign, self).__init__(self.values, **kwargs)


class CompositeUnitSpec(jst.AnyOfObject):
    _classes = (jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': ['mark', 'encoding'], 'data': jst.JSONInstance(_localname('Data'), help='An object describing the data source'), 'description': jst.JSONString(help='Description of this mark for commenting purpose.'), 'encoding': jst.JSONInstance(_localname('Encoding'), help='A key-value mapping between encoding channels and definition of [...]'), 'height': jst.JSONNumber(help="The height of a visualization. __Default value:__ - If a view's [...]"), 'mark': jst.JSONAnyOf([Mark(help='All types of primitive marks.'), jst.JSONInstance(_localname('MarkDef'))]), 'name': jst.JSONString(help='Name of the visualization for later reference.'), 'selection': jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': [jst.JSONInstance(_localname('SelectionDef'))], '_required_traits': []}), help='A key-value mapping between selection names and definitions.'), 'title': jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.'), 'transform': jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]'), 'width': jst.JSONNumber(help='The width of a visualization. __Default value:__ This will be [...]')})),)


class Root(jst.AnyOfObject):
    _classes = (jst.JSONInstance(_localname('TopLevelExtendedSpec')),)


class Data(jst.AnyOfObject):
    _classes = (jst.JSONInstance(_localname('UrlData')),jst.JSONInstance(_localname('InlineData')),jst.JSONInstance(_localname('NamedData')),)


class DataFormat(jst.AnyOfObject):
    _classes = (jst.JSONInstance(_localname('CsvDataFormat')),jst.JSONInstance(_localname('JsonDataFormat')),jst.JSONInstance(_localname('TopoDataFormat')),)


class SelectionDef(jst.AnyOfObject):
    _classes = (jst.JSONInstance(_localname('SingleSelection')),jst.JSONInstance(_localname('MultiSelection')),jst.JSONInstance(_localname('IntervalSelection')),)


class SelectionDomain(jst.AnyOfObject):
    _classes = (jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': ['selection'], 'field': jst.JSONString(help='The field name to extract selected values for, when a selection [...]'), 'selection': jst.JSONString(help='The name of a selection.')})),jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': ['selection'], 'encoding': jst.JSONString(help='The encoding channel to extract selected values for, when a [...]'), 'selection': jst.JSONString(help='The name of a selection.')})),)


class Spec(jst.AnyOfObject):
    _classes = (jst.JSONInstance(_localname('CompositeUnitSpec')),jst.JSONInstance(_localname('LayerSpec')),jst.JSONInstance(_localname('FacetSpec')),jst.JSONInstance(_localname('RepeatSpec')),jst.JSONInstance(_localname('VConcatSpec')),jst.JSONInstance(_localname('HConcatSpec')),)


class TopLevelExtendedSpec(jst.AnyOfObject):
    _classes = (jst.JSONInstance(_localname('TopLevel_FacetedUnitSpec')),jst.JSONInstance(_localname('TopLevel_LayerSpec')),jst.JSONInstance(_localname('TopLevel_FacetSpec')),jst.JSONInstance(_localname('TopLevel_RepeatSpec')),jst.JSONInstance(_localname('TopLevel_VConcatSpec')),jst.JSONInstance(_localname('TopLevel_HConcatSpec')),)


class Transform(jst.AnyOfObject):
    _classes = (jst.JSONInstance(_localname('FilterTransform')),jst.JSONInstance(_localname('CalculateTransform')),jst.JSONInstance(_localname('LookupTransform')),jst.JSONInstance(_localname('BinTransform')),jst.JSONInstance(_localname('TimeUnitTransform')),jst.JSONInstance(_localname('AggregateTransform')),)


class VgBinding(jst.AnyOfObject):
    _classes = (jst.JSONInstance(_localname('VgCheckboxBinding')),jst.JSONInstance(_localname('VgRadioBinding')),jst.JSONInstance(_localname('VgSelectBinding')),jst.JSONInstance(_localname('VgRangeBinding')),jst.JSONInstance(_localname('VgGenericBinding')),)


class AggregateTransform(jst.JSONHasTraits):
    """AggregateTransform class

    

    Attributes
    ----------
    aggregate : Array(AggregatedFieldDef)
        Array of objects that define fields to aggregate.
    groupby : Array(string)
        The data fields to group by. If not specified, a single group
        containing all data objects will be used.
    """
    _additional_traits = False
    _required_traits = ['aggregate']
    _trait_name_map = {}
    aggregate = jst.JSONArray(jst.JSONInstance(_localname('AggregatedFieldDef')), help='Array of objects that define fields to aggregate.')
    groupby = jst.JSONArray(jst.JSONString(), help='The data fields to group by. If not specified, a single group [...]')

    def __init__(self, aggregate=jst.undefined, groupby=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, groupby=groupby)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AggregateTransform, self).__init__(**kwargs)


class AggregatedFieldDef(jst.JSONHasTraits):
    """AggregatedFieldDef class

    

    Attributes
    ----------
    as_ : string
        The output field names to use for each aggregated field.
    field : string
        The data field for which to compute aggregate function.
    op : string
        The aggregation operations to apply to the fields, such as
        sum, average or count.
        See the [full list of supported aggregation
        operations](https://vega.github.io/vega-
        lite/docs/aggregate.html#ops)
        for more information.
    """
    _additional_traits = False
    _required_traits = ['op', 'field', 'as']
    _trait_name_map = {'as_': 'as'}
    as_ = jst.JSONString(help='The output field names to use for each aggregated field.')
    field = jst.JSONString(help='The data field for which to compute aggregate function.')
    op = AggregateOp()

    def __init__(self, as_=jst.undefined, field=jst.undefined, op=jst.undefined, **kwargs):
        kwds = dict(as_=as_, field=field, op=op)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AggregatedFieldDef, self).__init__(**kwargs)


class AndFilter(jst.JSONHasTraits):
    """AndFilter class

    

    Attributes
    ----------
    and_ : Array(AnyOf([NotFilter, AndFilter, OrFilter, AnyOf([EqualFilter, RangeFilter, OneOfFilter, SelectionFilter, string])]))
        
    """
    _additional_traits = False
    _required_traits = ['and']
    _trait_name_map = {'and_': 'and'}
    and_ = jst.JSONArray(jst.JSONAnyOf([jst.JSONInstance(_localname('NotFilter')), jst.JSONInstance(_localname('AndFilter')), jst.JSONInstance(_localname('OrFilter')), jst.JSONAnyOf([jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter')), jst.JSONInstance(_localname('SelectionFilter')), jst.JSONString()])]))

    def __init__(self, and_=jst.undefined, **kwargs):
        kwds = dict(and_=and_)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AndFilter, self).__init__(**kwargs)


class AutoSizeParams(jst.JSONHasTraits):
    """AutoSizeParams class

    

    Attributes
    ----------
    contains : string
        Determines how size calculation should be performed, one of
        `"content"` or `"padding"`. The default setting (`"content"`)
        inteprets the width and height settings as the data rectangle
        (plotting) dimensions, to which padding is then added. In
        contrast, the `"padding"` setting includes the padding within
        the view size calculations, such that the width and height
        settings indicate the **total** intended size of the view.
        __Default value__: `"content"`
    resize : boolean
        A boolean flag indicating if autosize layout should be re-
        calculated on every view update.
        __Default value__: `false`
    type : string
        The sizing format type. One of `"pad"`, `"fit"` or `"none"`.
        See the [autosize type](https://vega.github.io/vega-
        lite/docs/size.html#autosize) documentation for descriptions
        of each.
        __Default value__: `"pad"`
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    contains = jst.JSONEnum(['content', 'padding'], help='Determines how size calculation should be performed, one of [...]')
    resize = jst.JSONBoolean(help='A boolean flag indicating if autosize layout should be re- [...]')
    type = AutosizeType()

    def __init__(self, contains=jst.undefined, resize=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(contains=contains, resize=resize, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AutoSizeParams, self).__init__(**kwargs)


class Axis(jst.JSONHasTraits):
    """Axis class

    

    Attributes
    ----------
    domain : boolean
        A boolean flag indicating if the domain (the axis baseline)
        should be included as part of the axis.
        __Default value:__ `true`
    format : string
        The formatting pattern for labels. This is D3's [number format
        pattern](https://github.com/d3/d3-format#locale_format) for
        quantitative fields and D3's [time format
        pattern](https://github.com/d3/d3-time-format#locale_format)
        for time field.
        See the [format documentation](format.html) for more
        information.
        __Default value:__  derived from
        [numberFormat](config.html#format) config for quantitative
        fields and from [timeFormat](config.html#format) config for
        temporal fields.
    grid : boolean
        A boolean flag indicating if grid lines should be included as
        part of the axis
        __Default value:__ `true` for [continuous
        scales](scale.html#continuous) that are not binned; otherwise,
        `false`.
    labelAngle : number
        The rotation angle of the axis labels.
        __Default value:__ `-90` for nominal and ordinal fields; `0`
        otherwise.
    labelBound : ['boolean', 'number']
        Indicates if labels should be hidden if they exceed the axis
        range. If `false `(the default) no bounds overlap analysis is
        performed. If `true`, labels will be hidden if they exceed the
        axis range by more than 1 pixel. If this property is a number,
        it specifies the pixel tolerance: the maximum amount by which
        a label bounding box may exceed the axis range.
        __Default value:__ `false`.
    labelFlush : ['boolean', 'number']
        Indicates if the first and last axis labels should be aligned
        flush with the scale range. Flush alignment for a horizontal
        axis will left-align the first label and right-align the last
        label. For vertical axes, bottom and top text baselines are
        applied instead. If this property is a number, it also
        indicates the number of pixels by which to offset the first
        and last labels; for example, a value of 2 will flush-align
        the first and last labels and also push them 2 pixels outward
        from the center of the axis. The additional adjustment can
        sometimes help the labels better visually group with
        corresponding axis ticks.
        __Default value:__ `true` for axis of a continuous x-scale.
        Otherwise, `false`.
    labelOverlap : AnyOf([boolean, string, string])
        The strategy to use for resolving overlap of axis labels. If
        `false` (the default), no overlap reduction is attempted. If
        set to `true` or `"parity"`, a strategy of removing every
        other label is used (this works well for standard linear
        axes). If set to `"greedy"`, a linear scan of the labels is
        performed, removing any labels that overlaps with the last
        visible label (this often works better for log-scaled axes).
        __Default value:__ `true` for non-nominal fields with non-log
        scales; `"greedy"` for log scales; otherwise `false`.
    labelPadding : number
        The padding, in pixels, between axis and text labels.
    labels : boolean
        A boolean flag indicating if labels should be included as part
        of the axis.
        __Default value:__  `true`.
    maxExtent : number
        The maximum extent in pixels that axis ticks and labels should
        use. This determines a maximum offset value for axis titles.
        __Default value:__ `undefined`.
    minExtent : number
        The minimum extent in pixels that axis ticks and labels should
        use. This determines a minimum offset value for axis titles.
        __Default value:__ `30` for y-axis; `undefined` for x-axis.
    offset : number
        The offset, in pixels, by which to displace the axis from the
        edge of the enclosing group or data rectangle.
        __Default value:__ derived from the [axis
        config](config.html#facet-scale-config)'s `offset` (`0` by
        default)
    orient : string
        The orientation of the axis. One of `"top"`, `"bottom"`,
        `"left"` or `"right"`. The orientation can be used to further
        specialize the axis type (e.g., a y axis oriented for the
        right edge of the chart).
        __Default value:__ `"bottom"` for x-axes and `"left"` for
        y-axes.
    position : number
        The anchor position of the axis in pixels. For x-axis with top
        or bottom orientation, this sets the axis group x coordinate.
        For y-axis with left or right orientation, this sets the axis
        group y coordinate.
        __Default value__: `0`
    tickCount : number
        A desired number of ticks, for axes visualizing quantitative
        scales. The resulting number may be different so that values
        are "nice" (multiples of 2, 5, 10) and lie within the
        underlying scale's range.
    tickSize : number
        The size in pixels of axis ticks.
    ticks : boolean
        Boolean value that determines whether the axis should include
        ticks.
    title : ['string', 'null']
        A title for the field. If `null`, the title will be removed.
        __Default value:__  derived from the field's name and
        transformation function (`aggregate`, `bin` and `timeUnit`).
        If the field has an aggregate function, the function is
        displayed as a part of the title (e.g., `"Sum of Profit"`). If
        the field is binned or has a time unit applied, the applied
        function will be denoted in parentheses (e.g., `"Profit
        (binned)"`, `"Transaction Date (year-month)"`).  Otherwise,
        the title is simply the field name.
        __Note__: You can customize the default field title format by
        providing the [`fieldTitle` property in the
        [config](config.html) or [`fieldTitle` function via the
        `compile` function's options](compile.html#field-title).
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description.
    titlePadding : number
        The padding, in pixels, between title and axis.
    values : AnyOf([Array(number), Array(DateTime)])
        Explicitly set the visible axis tick values.
    zindex : number
        A non-positive integer indicating z-index of the axis.
        If zindex is 0, axes should be drawn behind all chart
        elements.
        To put them in front, use `"zindex = 1"`.
        __Default value:__ `1` (in front of the marks) for actual axis
        and `0` (behind the marks) for grids.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    domain = jst.JSONBoolean(help='A boolean flag indicating if the domain (the axis baseline) [...]')
    format = jst.JSONString(help="The formatting pattern for labels. This is D3's [number format [...]")
    grid = jst.JSONBoolean(help='A boolean flag indicating if grid lines should be included as [...]')
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels. __Default value:__ `-90` [...]', maximum=360, minimum=-360)
    labelBound = jst.JSONUnion([jst.JSONBoolean(), jst.JSONNumber()], help='Indicates if labels should be hidden if they exceed the axis [...]')
    labelFlush = jst.JSONUnion([jst.JSONBoolean(), jst.JSONNumber()], help='Indicates if the first and last axis labels should be aligned [...]')
    labelOverlap = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONEnum(['parity']), jst.JSONEnum(['greedy'])], help='The strategy to use for resolving overlap of axis labels. If [...]')
    labelPadding = jst.JSONNumber(help='The padding, in pixels, between axis and text labels.')
    labels = jst.JSONBoolean(help='A boolean flag indicating if labels should be included as part [...]')
    maxExtent = jst.JSONNumber(help='The maximum extent in pixels that axis ticks and labels should [...]')
    minExtent = jst.JSONNumber(help='The minimum extent in pixels that axis ticks and labels should [...]')
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the axis from the [...]')
    orient = AxisOrient()
    position = jst.JSONNumber(help='The anchor position of the axis in pixels. For x-axis with top [...]')
    tickCount = jst.JSONNumber(help='A desired number of ticks, for axes visualizing quantitative [...]')
    tickSize = jst.JSONNumber(help='The size in pixels of axis ticks.', minimum=0)
    ticks = jst.JSONBoolean(help='Boolean value that determines whether the axis should include ticks.')
    title = jst.JSONString(allow_none=True, help='A title for the field. If `null`, the title will be removed. [...]')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]')
    titlePadding = jst.JSONNumber(help='The padding, in pixels, between title and axis.')
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='Explicitly set the visible axis tick values.')
    zindex = jst.JSONNumber(help='A non-positive integer indicating z-index of the axis. If zindex [...]', minimum=0)

    def __init__(self, domain=jst.undefined, format=jst.undefined, grid=jst.undefined, labelAngle=jst.undefined, labelBound=jst.undefined, labelFlush=jst.undefined, labelOverlap=jst.undefined, labelPadding=jst.undefined, labels=jst.undefined, maxExtent=jst.undefined, minExtent=jst.undefined, offset=jst.undefined, orient=jst.undefined, position=jst.undefined, tickCount=jst.undefined, tickSize=jst.undefined, ticks=jst.undefined, title=jst.undefined, titleMaxLength=jst.undefined, titlePadding=jst.undefined, values=jst.undefined, zindex=jst.undefined, **kwargs):
        kwds = dict(domain=domain, format=format, grid=grid, labelAngle=labelAngle, labelBound=labelBound, labelFlush=labelFlush, labelOverlap=labelOverlap, labelPadding=labelPadding, labels=labels, maxExtent=maxExtent, minExtent=minExtent, offset=offset, orient=orient, position=position, tickCount=tickCount, tickSize=tickSize, ticks=ticks, title=title, titleMaxLength=titleMaxLength, titlePadding=titlePadding, values=values, zindex=zindex)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Axis, self).__init__(**kwargs)


class AxisConfig(jst.JSONHasTraits):
    """AxisConfig class

    

    Attributes
    ----------
    bandPosition : number
        An interpolation fraction indicating where, for `band` scales,
        axis ticks should be positioned. A value of `0` places ticks
        at the left edge of their bands. A value of `0.5` places ticks
        in the middle of their bands.
    domain : boolean
        A boolean flag indicating if the domain (the axis baseline)
        should be included as part of the axis.
        __Default value:__ `true`
    domainColor : string
        Color of axis domain line.
        __Default value:__  (none, using Vega default).
    domainWidth : number
        Stroke width of axis domain line
        __Default value:__  (none, using Vega default).
    grid : boolean
        A boolean flag indicating if grid lines should be included as
        part of the axis
        __Default value:__ `true` for [continuous
        scales](scale.html#continuous) that are not binned; otherwise,
        `false`.
    gridColor : string
        Color of gridlines.
    gridDash : Array(number)
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
        __Default value:__ (`1` by default)
    gridWidth : number
        The grid width, in pixels.
    labelAngle : number
        The rotation angle of the axis labels.
        __Default value:__ `-90` for nominal and ordinal fields; `0`
        otherwise.
    labelBound : ['boolean', 'number']
        Indicates if labels should be hidden if they exceed the axis
        range. If `false `(the default) no bounds overlap analysis is
        performed. If `true`, labels will be hidden if they exceed the
        axis range by more than 1 pixel. If this property is a number,
        it specifies the pixel tolerance: the maximum amount by which
        a label bounding box may exceed the axis range.
        __Default value:__ `false`.
    labelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    labelFlush : ['boolean', 'number']
        Indicates if the first and last axis labels should be aligned
        flush with the scale range. Flush alignment for a horizontal
        axis will left-align the first label and right-align the last
        label. For vertical axes, bottom and top text baselines are
        applied instead. If this property is a number, it also
        indicates the number of pixels by which to offset the first
        and last labels; for example, a value of 2 will flush-align
        the first and last labels and also push them 2 pixels outward
        from the center of the axis. The additional adjustment can
        sometimes help the labels better visually group with
        corresponding axis ticks.
        __Default value:__ `true` for axis of a continuous x-scale.
        Otherwise, `false`.
    labelFont : string
        The font of the tick label.
    labelFontSize : number
        The font size of the label, in pixels.
    labelLimit : number
        Maximum allowed pixel width of axis tick labels.
    labelOverlap : AnyOf([boolean, string, string])
        The strategy to use for resolving overlap of axis labels. If
        `false` (the default), no overlap reduction is attempted. If
        set to `true` or `"parity"`, a strategy of removing every
        other label is used (this works well for standard linear
        axes). If set to `"greedy"`, a linear scan of the labels is
        performed, removing any labels that overlaps with the last
        visible label (this often works better for log-scaled axes).
        __Default value:__ `true` for non-nominal fields with non-log
        scales; `"greedy"` for log scales; otherwise `false`.
    labelPadding : number
        The padding, in pixels, between axis and text labels.
    labels : boolean
        A boolean flag indicating if labels should be included as part
        of the axis.
        __Default value:__  `true`.
    maxExtent : number
        The maximum extent in pixels that axis ticks and labels should
        use. This determines a maximum offset value for axis titles.
        __Default value:__ `undefined`.
    minExtent : number
        The minimum extent in pixels that axis ticks and labels should
        use. This determines a minimum offset value for axis titles.
        __Default value:__ `30` for y-axis; `undefined` for x-axis.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
        __Default value:__  `false`
    tickColor : string
        The color of the axis's tick.
    tickRound : boolean
        Boolean flag indicating if pixel position values should be
        rounded to the nearest integer.
    tickSize : number
        The size in pixels of axis ticks.
    tickWidth : number
        The width, in pixels, of ticks.
    ticks : boolean
        Boolean value that determines whether the axis should include
        ticks.
    titleAlign : string
        Horizontal text alignment of axis titles.
    titleAngle : number
        Angle in degrees of axis titles.
    titleBaseline : string
        Vertical text baseline for axis titles.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    titleFont : string
        Font of the title. (e.g., `"Helvetica Neue"`).
    titleFontSize : number
        Font size of the title.
    titleFontWeight : ['string', 'number']
        Font weight of the title. (e.g., `"bold"`).
    titleLimit : number
        Maximum allowed pixel width of axis titles.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description.
    titlePadding : number
        The padding, in pixels, between title and axis.
    titleX : number
        X-coordinate of the axis title relative to the axis group.
    titleY : number
        Y-coordinate of the axis title relative to the axis group.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    bandPosition = jst.JSONNumber(help='An interpolation fraction indicating where, for `band` scales, [...]')
    domain = jst.JSONBoolean(help='A boolean flag indicating if the domain (the axis baseline) [...]')
    domainColor = jst.JSONString(help='Color of axis domain line. __Default value:__ (none, using Vega [...]')
    domainWidth = jst.JSONNumber(help='Stroke width of axis domain line __Default value:__ (none, using [...]')
    grid = jst.JSONBoolean(help='A boolean flag indicating if grid lines should be included as [...]')
    gridColor = jst.JSONString(help='Color of gridlines.')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1]) __Default [...]', maximum=1, minimum=0)
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.', minimum=0)
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels. __Default value:__ `-90` [...]', maximum=360, minimum=-360)
    labelBound = jst.JSONUnion([jst.JSONBoolean(), jst.JSONNumber()], help='Indicates if labels should be hidden if they exceed the axis [...]')
    labelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    labelFlush = jst.JSONUnion([jst.JSONBoolean(), jst.JSONNumber()], help='Indicates if the first and last axis labels should be aligned [...]')
    labelFont = jst.JSONString(help='The font of the tick label.')
    labelFontSize = jst.JSONNumber(help='The font size of the label, in pixels.', minimum=0)
    labelLimit = jst.JSONNumber(help='Maximum allowed pixel width of axis tick labels.')
    labelOverlap = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONEnum(['parity']), jst.JSONEnum(['greedy'])], help='The strategy to use for resolving overlap of axis labels. If [...]')
    labelPadding = jst.JSONNumber(help='The padding, in pixels, between axis and text labels.')
    labels = jst.JSONBoolean(help='A boolean flag indicating if labels should be included as part [...]')
    maxExtent = jst.JSONNumber(help='The maximum extent in pixels that axis ticks and labels should [...]')
    minExtent = jst.JSONNumber(help='The minimum extent in pixels that axis ticks and labels should [...]')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated. [...]')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    tickRound = jst.JSONBoolean(help='Boolean flag indicating if pixel position values should be [...]')
    tickSize = jst.JSONNumber(help='The size in pixels of axis ticks.', minimum=0)
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.', minimum=0)
    ticks = jst.JSONBoolean(help='Boolean value that determines whether the axis should include ticks.')
    titleAlign = jst.JSONString(help='Horizontal text alignment of axis titles.')
    titleAngle = jst.JSONNumber(help='Angle in degrees of axis titles.')
    titleBaseline = jst.JSONString(help='Vertical text baseline for axis titles.')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    titleFont = jst.JSONString(help='Font of the title. (e.g., `"Helvetica Neue"`).')
    titleFontSize = jst.JSONNumber(help='Font size of the title.', minimum=0)
    titleFontWeight = jst.JSONUnion([jst.JSONString(), jst.JSONNumber()], help='Font weight of the title. (e.g., `"bold"`).')
    titleLimit = jst.JSONNumber(help='Maximum allowed pixel width of axis titles.')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]')
    titlePadding = jst.JSONNumber(help='The padding, in pixels, between title and axis.')
    titleX = jst.JSONNumber(help='X-coordinate of the axis title relative to the axis group.')
    titleY = jst.JSONNumber(help='Y-coordinate of the axis title relative to the axis group.')

    def __init__(self, bandPosition=jst.undefined, domain=jst.undefined, domainColor=jst.undefined, domainWidth=jst.undefined, grid=jst.undefined, gridColor=jst.undefined, gridDash=jst.undefined, gridOpacity=jst.undefined, gridWidth=jst.undefined, labelAngle=jst.undefined, labelBound=jst.undefined, labelColor=jst.undefined, labelFlush=jst.undefined, labelFont=jst.undefined, labelFontSize=jst.undefined, labelLimit=jst.undefined, labelOverlap=jst.undefined, labelPadding=jst.undefined, labels=jst.undefined, maxExtent=jst.undefined, minExtent=jst.undefined, shortTimeLabels=jst.undefined, tickColor=jst.undefined, tickRound=jst.undefined, tickSize=jst.undefined, tickWidth=jst.undefined, ticks=jst.undefined, titleAlign=jst.undefined, titleAngle=jst.undefined, titleBaseline=jst.undefined, titleColor=jst.undefined, titleFont=jst.undefined, titleFontSize=jst.undefined, titleFontWeight=jst.undefined, titleLimit=jst.undefined, titleMaxLength=jst.undefined, titlePadding=jst.undefined, titleX=jst.undefined, titleY=jst.undefined, **kwargs):
        kwds = dict(bandPosition=bandPosition, domain=domain, domainColor=domainColor, domainWidth=domainWidth, grid=grid, gridColor=gridColor, gridDash=gridDash, gridOpacity=gridOpacity, gridWidth=gridWidth, labelAngle=labelAngle, labelBound=labelBound, labelColor=labelColor, labelFlush=labelFlush, labelFont=labelFont, labelFontSize=labelFontSize, labelLimit=labelLimit, labelOverlap=labelOverlap, labelPadding=labelPadding, labels=labels, maxExtent=maxExtent, minExtent=minExtent, shortTimeLabels=shortTimeLabels, tickColor=tickColor, tickRound=tickRound, tickSize=tickSize, tickWidth=tickWidth, ticks=ticks, titleAlign=titleAlign, titleAngle=titleAngle, titleBaseline=titleBaseline, titleColor=titleColor, titleFont=titleFont, titleFontSize=titleFontSize, titleFontWeight=titleFontWeight, titleLimit=titleLimit, titleMaxLength=titleMaxLength, titlePadding=titlePadding, titleX=titleX, titleY=titleY)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AxisConfig, self).__init__(**kwargs)


class AxisResolveMap(jst.JSONHasTraits):
    """AxisResolveMap class

    

    Attributes
    ----------
    x : string
        
    y : string
        
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    x = ResolveMode()
    y = ResolveMode()

    def __init__(self, x=jst.undefined, y=jst.undefined, **kwargs):
        kwds = dict(x=x, y=y)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(AxisResolveMap, self).__init__(**kwargs)


class BarConfig(jst.JSONHasTraits):
    """BarConfig class

    

    Attributes
    ----------
    align : string
        The horizontal alignment of the text. One of `"left"`,
        `"right"`, `"center"`.
    angle : number
        The rotation angle of the text, in degrees.
    baseline : string
        The vertical alignment of the text. One of `"top"`,
        `"middle"`, `"bottom"`.
        __Default value:__ `"middle"`
    binSpacing : number
        Offset between bar for binned field.  Ideal value for this is
        either 0 (Preferred by statisticians) or 1 (Vega-Lite Default,
        D3 example style).
        __Default value:__ `1`
    color : string
        Default color.  Note that `fill` and `stroke` have higher
        precedence than `color` and will override `color`.
        __Default value:__ <span style="color:
        #4682b4;">&#9632;</span> `"#4682b4"`
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    continuousBandSize : number
        The default size of the bars on continuous scales.
        __Default value:__ `5`
    discreteBandSize : number
        The size of the bars.  If unspecified, the default size is
        `bandSize-1`,
        which provides 1 pixel offset between bars.
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        _angle_ property.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        _angle_ property.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    fillOpacity : number
        The fill opacity (value between [0,1]).
        __Default value:__ `1`
    filled : boolean
        Whether the mark's color should be used as fill color instead
        of stroke color.
        __Default value:__ `true` for all marks except `point` and
        `false` for `point`.
        __Applicable for:__ `bar`, `point`, `circle`, `square`, and
        `area` marks.
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    font : string
        The typeface to set the text in (e.g., `"Helvetica Neue"`).
    fontSize : number
        The font size, in pixels.
    fontStyle : string
        The font style (e.g., `"italic"`).
    fontWeight : AnyOf([string, number])
        The font weight (e.g., `"bold"`).
    interpolate : string
        The line interpolation method to use for line and area marks.
        One of the following:
        - `"linear"`: piecewise linear segments, as in a polyline.
        - `"linear-closed"`: close the linear segments to form a
          polygon.
        - `"step"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"step-before"`: alternate between vertical and horizontal
          segments, as in a step function.
        - `"step-after"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"basis"`: a B-spline, with control point duplication on
          the ends.
        - `"basis-open"`: an open B-spline; may not intersect the
          start or end.
        - `"basis-closed"`: a closed B-spline, as in a loop.
        - `"cardinal"`: a Cardinal spline, with control point
          duplication on the ends.
        - `"cardinal-open"`: an open Cardinal spline; may not
          intersect the start or end, but will intersect other control
          points.
        - `"cardinal-closed"`: a closed Cardinal spline, as in a
          loop.
        - `"bundle"`: equivalent to basis, except the tension
          parameter is used to straighten the spline.
        - `"monotone"`: cubic interpolation that preserves
          monotonicity in y.
    limit : number
        The maximum length of the text mark in pixels (default 0,
        indicating no limit). The text value will be automatically
        truncated if the rendered size exceeds the limit.
    opacity : number
        The overall opacity (value between [0,1]).
        __Default value:__ `0.7` for non-aggregate plots with `point`,
        `tick`, `circle`, or `square` marks or layered `bar` charts
        and `1` otherwise.
    orient : string
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the `x` and `y` properties.
    shape : string
        The default symbol shape to use. One of: `"circle"` (default),
        `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or
        `"triangle-down"`, or a custom SVG path.
        __Default value:__ `"circle"`
    size : number
        The pixel area each the point/circle/square.
        For example: in the case of circles, the radius is determined
        in part by the square root of the size value.
        __Default value:__ `30`
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    strokeDash : Array(number)
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
        __Default value:__ `1`
    strokeWidth : number
        The stroke width, in pixels.
    tension : number
        Depending on the interpolation type, sets the tension
        parameter (for line and area marks).
    text : string
        Placeholder text if the `text` channel is not specified
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the `x` and `y` properties. Values for
        `theta` follow the same convention of `arc` mark `startAngle`
        and `endAngle` properties: angles are measured in radians,
        with `0` indicating "north".
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    align = HorizontalAlign()
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.', maximum=360, minimum=0)
    baseline = VerticalAlign()
    binSpacing = jst.JSONNumber(help='Offset between bar for binned field. Ideal value for this is [...]', minimum=0)
    color = jst.JSONString(help='Default color. Note that `fill` and `stroke` have higher [...]')
    continuousBandSize = jst.JSONNumber(help='The default size of the bars on continuous scales. __Default [...]', minimum=0)
    discreteBandSize = jst.JSONNumber(help='The size of the bars. If unspecified, the default size is [...]', minimum=0)
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color [...]')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    filled = jst.JSONBoolean(help="Whether the mark's color should be used as fill color instead of [...]")
    font = jst.JSONString(help='The typeface to set the text in (e.g., `"Helvetica Neue"`).')
    fontSize = jst.JSONNumber(help='The font size, in pixels.', minimum=0)
    fontStyle = FontStyle()
    fontWeight = jst.JSONAnyOf([FontWeight(), jst.JSONNumber(maximum=900, minimum=100)], help='The font weight (e.g., `"bold"`).')
    interpolate = Interpolate()
    limit = jst.JSONNumber(help='The maximum length of the text mark in pixels (default 0, [...]')
    opacity = jst.JSONNumber(help='The overall opacity (value between [0,1]). __Default value:__ [...]', maximum=1, minimum=0)
    orient = Orient()
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]', minimum=0)
    shape = jst.JSONString(help='The default symbol shape to use. One of: `"circle"` (default), [...]')
    size = jst.JSONNumber(help='The pixel area each the point/circle/square. For example: in the [...]', minimum=0)
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.', minimum=0)
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter [...]', maximum=1, minimum=0)
    text = jst.JSONString(help='Placeholder text if the `text` channel is not specified')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')

    def __init__(self, align=jst.undefined, angle=jst.undefined, baseline=jst.undefined, binSpacing=jst.undefined, color=jst.undefined, continuousBandSize=jst.undefined, discreteBandSize=jst.undefined, dx=jst.undefined, dy=jst.undefined, fill=jst.undefined, fillOpacity=jst.undefined, filled=jst.undefined, font=jst.undefined, fontSize=jst.undefined, fontStyle=jst.undefined, fontWeight=jst.undefined, interpolate=jst.undefined, limit=jst.undefined, opacity=jst.undefined, orient=jst.undefined, radius=jst.undefined, shape=jst.undefined, size=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, strokeDashOffset=jst.undefined, strokeOpacity=jst.undefined, strokeWidth=jst.undefined, tension=jst.undefined, text=jst.undefined, theta=jst.undefined, **kwargs):
        kwds = dict(align=align, angle=angle, baseline=baseline, binSpacing=binSpacing, color=color, continuousBandSize=continuousBandSize, discreteBandSize=discreteBandSize, dx=dx, dy=dy, fill=fill, fillOpacity=fillOpacity, filled=filled, font=font, fontSize=fontSize, fontStyle=fontStyle, fontWeight=fontWeight, interpolate=interpolate, limit=limit, opacity=opacity, orient=orient, radius=radius, shape=shape, size=size, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth, tension=tension, text=text, theta=theta)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(BarConfig, self).__init__(**kwargs)


class BinParams(jst.JSONHasTraits):
    """BinParams class

    Binning properties or boolean flag for determining whether to bin
    data or not.

    Attributes
    ----------
    base : number
        The number base to use for automatic bin determination
        (default is base 10).
        __Default value:__ `10`
    divide : Array(number)
        Scale factors indicating allowable subdivisions. The default
        value is [5, 2], which indicates that for base 10 numbers (the
        default base), the method may consider dividing bin sizes by 5
        and/or 2. For example, for an initial step size of 10, the
        method can check if bin sizes of 2 (= 10/5), 5 (= 10/2), or 1
        (= 10/(5*2)) might also satisfy the given constraints.
        __Default value:__ `[5, 2]`
    extent : Array(number)
        A two-element (`[min, max]`) array indicating the range of
        desired bin values.
    maxbins : number
        Maximum number of bins.
        __Default value:__ `6` for `row`, `column` and `shape`
        channels; `10` for other channels
    minstep : number
        A minimum allowable step size (particularly useful for integer
        values).
    nice : boolean
        If true (the default), attempts to make the bin boundaries use
        human-friendly boundaries, such as multiples of ten.
    step : number
        An exact step size to use between bins.
        __Note:__ If provided, options such as maxbins will be
        ignored.
    steps : Array(number)
        An array of allowable step sizes to choose from.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    base = jst.JSONNumber(help='The number base to use for automatic bin determination (default [...]')
    divide = jst.JSONArray(jst.JSONNumber(), help='Scale factors indicating allowable subdivisions. The default [...]', minlen=1)
    extent = jst.JSONArray(jst.JSONNumber(), help='A two-element (`[min, max]`) array indicating the range of [...]', maxlen=2, minlen=2)
    maxbins = jst.JSONNumber(help='Maximum number of bins. __Default value:__ `6` for `row`, [...]', minimum=2)
    minstep = jst.JSONNumber(help='A minimum allowable step size (particularly useful for integer [...]')
    nice = jst.JSONBoolean(help='If true (the default), attempts to make the bin boundaries use [...]')
    step = jst.JSONNumber(help='An exact step size to use between bins. __Note:__ If provided, [...]')
    steps = jst.JSONArray(jst.JSONNumber(), help='An array of allowable step sizes to choose from.', minlen=1)

    def __init__(self, base=jst.undefined, divide=jst.undefined, extent=jst.undefined, maxbins=jst.undefined, minstep=jst.undefined, nice=jst.undefined, step=jst.undefined, steps=jst.undefined, **kwargs):
        kwds = dict(base=base, divide=divide, extent=extent, maxbins=maxbins, minstep=minstep, nice=nice, step=step, steps=steps)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(BinParams, self).__init__(**kwargs)


class BinTransform(jst.JSONHasTraits):
    """BinTransform class

    

    Attributes
    ----------
    as_ : string
        The output fields at which to write the start and end bin
        values.
    bin : AnyOf([boolean, BinParams])
        An object indicating bin properties, or simply `true` for
        using default bin parameters.
    field : string
        The data field to bin.
    """
    _additional_traits = False
    _required_traits = ['bin', 'field', 'as']
    _trait_name_map = {'as_': 'as'}
    as_ = jst.JSONString(help='The output fields at which to write the start and end bin values.')
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='An object indicating bin properties, or simply `true` for using [...]')
    field = jst.JSONString(help='The data field to bin.')

    def __init__(self, as_=jst.undefined, bin=jst.undefined, field=jst.undefined, **kwargs):
        kwds = dict(as_=as_, bin=bin, field=field)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(BinTransform, self).__init__(**kwargs)


class BrushConfig(jst.JSONHasTraits):
    """BrushConfig class

    

    Attributes
    ----------
    fill : string
        The fill color of the interval mark.
        __Default value:__ `#333333`
    fillOpacity : number
        The fill opacity of the interval mark (a value between 0 and
        1).
        __Default value:__ `0.125`
    stroke : string
        The stroke color of the interval mark.
        __Default value:__ `#ffffff`
    strokeDash : Array(number)
        An array of alternating stroke and space lengths,
        for creating dashed or dotted lines.
    strokeDashOffset : number
        The offset (in pixels) with which to begin drawing the stroke
        dash array.
    strokeOpacity : number
        The stroke opacity of the interval mark (a value between 0 and
        1).
    strokeWidth : number
        The stroke width of the interval mark.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    fill = jst.JSONString(help='The fill color of the interval mark. __Default value:__ `#333333`')
    fillOpacity = jst.JSONNumber(help='The fill opacity of the interval mark (a value between 0 and 1). [...]')
    stroke = jst.JSONString(help='The stroke color of the interval mark. __Default value:__ `#ffffff`')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke and space lengths, for creating [...]')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) with which to begin drawing the stroke [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity of the interval mark (a value between 0 and 1).')
    strokeWidth = jst.JSONNumber(help='The stroke width of the interval mark.')

    def __init__(self, fill=jst.undefined, fillOpacity=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, strokeDashOffset=jst.undefined, strokeOpacity=jst.undefined, strokeWidth=jst.undefined, **kwargs):
        kwds = dict(fill=fill, fillOpacity=fillOpacity, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(BrushConfig, self).__init__(**kwargs)


class CalculateTransform(jst.JSONHasTraits):
    """CalculateTransform class

    

    Attributes
    ----------
    as_ : string
        The field for storing the computed formula value.
    calculate : string
        A string containing a Vega Expression. Use the variable
        `datum` to refer to the current data object.
    """
    _additional_traits = False
    _required_traits = ['calculate', 'as']
    _trait_name_map = {'as_': 'as'}
    as_ = jst.JSONString(help='The field for storing the computed formula value.')
    calculate = jst.JSONString(help='A string containing a Vega Expression. Use the variable `datum` [...]')

    def __init__(self, as_=jst.undefined, calculate=jst.undefined, **kwargs):
        kwds = dict(as_=as_, calculate=calculate)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(CalculateTransform, self).__init__(**kwargs)


class CompositeUnitSpecAlias(jst.JSONHasTraits):
    """CompositeUnitSpecAlias class

    

    Attributes
    ----------
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    encoding : Encoding
        A key-value mapping between encoding channels and definition
        of fields.
    height : number
        The height of a visualization.
        __Default value:__
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its y-channel has a [continuous
          scale](scale.html#continuous), the height will be the value
          of [`config.view.height`](spec.html#config).
        - For y-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the height is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          y-channel](scale.html#band). Otherwise, if the `rangeStep`
          is `null`, the height will be the value of
          [`config.view.height`](spec.html#config).
        - If no field is mapped to `y` channel, the `height` will be
          the value of `rangeStep`.
        __Note__: For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the height of
        a single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    mark : AnyOf([string, MarkDef])
        A string describing the mark type (one of `"bar"`, `"circle"`,
        `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`) or a [mark
        definition object](mark.html#mark-def).
    name : string
        Name of the visualization for later reference.
    selection : Mapping
        A key-value mapping between selection names and definitions.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    width : number
        The width of a visualization.
        __Default value:__ This will be determined by the following
        rules:
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its x-channel has a [continuous
          scale](scale.html#continuous), the width will be the value
          of [`config.view.width`](spec.html#config).
        - For x-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the width is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          x-channel](scale.html#band).   Otherwise, if the `rangeStep`
          is `null`, the width will be the value of
          [`config.view.width`](spec.html#config).
        - If no field is mapped to `x` channel, the `width` will be
          the value of
          [`config.scale.textXRangeStep`](size.html#default-width-and-
          height) for `text` mark and the value of `rangeStep` for
          other marks.
        __Note:__ For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the width of a
        single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    """
    _additional_traits = False
    _required_traits = ['mark', 'encoding']
    _trait_name_map = {}
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    encoding = jst.JSONInstance(_localname('Encoding'), help='A key-value mapping between encoding channels and definition of [...]')
    height = jst.JSONNumber(help="The height of a visualization. __Default value:__ - If a view's [...]")
    mark = jst.JSONAnyOf([Mark(help='All types of primitive marks.'), jst.JSONInstance(_localname('MarkDef'))])
    name = jst.JSONString(help='Name of the visualization for later reference.')
    selection = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': [jst.JSONInstance(_localname('SelectionDef'))], '_required_traits': []}), help='A key-value mapping between selection names and definitions.')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')
    width = jst.JSONNumber(help='The width of a visualization. __Default value:__ This will be [...]')

    def __init__(self, data=jst.undefined, description=jst.undefined, encoding=jst.undefined, height=jst.undefined, mark=jst.undefined, name=jst.undefined, selection=jst.undefined, title=jst.undefined, transform=jst.undefined, width=jst.undefined, **kwargs):
        kwds = dict(data=data, description=description, encoding=encoding, height=height, mark=mark, name=name, selection=selection, title=title, transform=transform, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(CompositeUnitSpecAlias, self).__init__(**kwargs)


class Conditional_MarkPropFieldDef(jst.JSONHasTraits):
    """Conditional_MarkPropFieldDef class

    

    Attributes
    ----------
    aggregate : string
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
        __Default value:__ `undefined` (None)
    bin : AnyOf([boolean, BinParams])
        A flag for binning a `quantitative` field, or [an object
        defining binning parameters](bin.html#params).
        If `true`, default [binning parameters](bin.html) will be
        applied.
        __Default value:__ `false`
    field : AnyOf([string, RepeatRef])
        __Required.__ A string defining the name of the field from
        which to pull a data value
        or an object defining iterated values from the
        [`repeat`](repeat.html) operator.
        __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to
        access nested objects (e.g., `"field": "foo.bar"` and
        `"field": "foo['bar']"`).
        If field names contain dots or brackets but are not nested,
        you can use `\\` to escape dots and brackets (e.g., `"a\\.b"`
        and `"a\\[0\\]"`).
        See more details about escaping in the [field
        documentation](field.html).
        __Note:__ `field` is not required if `aggregate` is `count`.
    legend : AnyOf([Legend, null])
        An object defining properties of the legend.
        If `null`, the legend for the encoding channel will be
        removed.
        __Default value:__ If undefined, default [legend
        properties](legend.html) are applied.
    scale : Scale
        An object defining properties of the channel's scale, which is
        the function that transforms values in the data domain
        (numbers, dates, strings, etc) to visual values (pixels,
        colors, sizes) of the encoding channels.
        __Default value:__ If undefined, default [scale
        properties](scale.html) are applied.
    selection : AnyOf([SelectionNot, SelectionAnd, SelectionOr, string])
        A [selection name](selection.html), or a series of [composed
        selections](selection.html#compose).
    sort : AnyOf([['string', 'null'], SortField, null])
        Sort order for the encoded field.
        Supported `sort` values include `"ascending"`, `"descending"`
        and `null` (no sorting).
        For fields with discrete domains, `sort` can also be a [sort
        field definition object](sort.html#sort-field).
        __Default value:__ `"ascending"`
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a
        temporal field.
        or [a temporal field that gets casted as
        ordinal](type.html#cast).
        __Default value:__ `undefined` (None)
    type : string
        The encoded field's type of measurement (`"quantitative"`,
        `"temporal"`, `"ordinal"`, or `"nominal"`).
    """
    _additional_traits = False
    _required_traits = ['selection', 'type']
    _trait_name_map = {}
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='A flag for binning a `quantitative` field, or [an object [...]')
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='__Required.__ A string defining the name of the field from which [...]')
    legend = jst.JSONAnyOf([jst.JSONInstance(_localname('Legend')), jst.JSONNull()], help='An object defining properties of the legend. If `null`, the [...]')
    scale = jst.JSONInstance(_localname('Scale'), help="An object defining properties of the channel's scale, which is [...]")
    selection = jst.JSONAnyOf([jst.JSONInstance(_localname('SelectionNot')), jst.JSONInstance(_localname('SelectionAnd')), jst.JSONInstance(_localname('SelectionOr')), jst.JSONString()])
    sort = jst.JSONAnyOf([SortOrder(), jst.JSONInstance(_localname('SortField')), jst.JSONNull()], help='Sort order for the encoded field. Supported `sort` values [...]')
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])
    type = Type(help='Constants and utilities for data type Data type based on level [...]')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, field=jst.undefined, legend=jst.undefined, scale=jst.undefined, selection=jst.undefined, sort=jst.undefined, timeUnit=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, field=field, legend=legend, scale=scale, selection=selection, sort=sort, timeUnit=timeUnit, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Conditional_MarkPropFieldDef, self).__init__(**kwargs)


class Conditional_TextFieldDef(jst.JSONHasTraits):
    """Conditional_TextFieldDef class

    

    Attributes
    ----------
    aggregate : string
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
        __Default value:__ `undefined` (None)
    bin : AnyOf([boolean, BinParams])
        A flag for binning a `quantitative` field, or [an object
        defining binning parameters](bin.html#params).
        If `true`, default [binning parameters](bin.html) will be
        applied.
        __Default value:__ `false`
    field : AnyOf([string, RepeatRef])
        __Required.__ A string defining the name of the field from
        which to pull a data value
        or an object defining iterated values from the
        [`repeat`](repeat.html) operator.
        __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to
        access nested objects (e.g., `"field": "foo.bar"` and
        `"field": "foo['bar']"`).
        If field names contain dots or brackets but are not nested,
        you can use `\\` to escape dots and brackets (e.g., `"a\\.b"`
        and `"a\\[0\\]"`).
        See more details about escaping in the [field
        documentation](field.html).
        __Note:__ `field` is not required if `aggregate` is `count`.
    format : string
        The [formatting pattern](format.html) for a text field. If not
        defined, this will be determined automatically.
    selection : AnyOf([SelectionNot, SelectionAnd, SelectionOr, string])
        A [selection name](selection.html), or a series of [composed
        selections](selection.html#compose).
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a
        temporal field.
        or [a temporal field that gets casted as
        ordinal](type.html#cast).
        __Default value:__ `undefined` (None)
    type : string
        The encoded field's type of measurement (`"quantitative"`,
        `"temporal"`, `"ordinal"`, or `"nominal"`).
    """
    _additional_traits = False
    _required_traits = ['selection', 'type']
    _trait_name_map = {}
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='A flag for binning a `quantitative` field, or [an object [...]')
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='__Required.__ A string defining the name of the field from which [...]')
    format = jst.JSONString(help='The [formatting pattern](format.html) for a text field. If not [...]')
    selection = jst.JSONAnyOf([jst.JSONInstance(_localname('SelectionNot')), jst.JSONInstance(_localname('SelectionAnd')), jst.JSONInstance(_localname('SelectionOr')), jst.JSONString()])
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])
    type = Type(help='Constants and utilities for data type Data type based on level [...]')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, field=jst.undefined, format=jst.undefined, selection=jst.undefined, timeUnit=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, field=field, format=format, selection=selection, timeUnit=timeUnit, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Conditional_TextFieldDef, self).__init__(**kwargs)


class Conditional_ValueDef(jst.JSONHasTraits):
    """Conditional_ValueDef class

    

    Attributes
    ----------
    selection : AnyOf([SelectionNot, SelectionAnd, SelectionOr, string])
        A [selection name](selection.html), or a series of [composed
        selections](selection.html#compose).
    value : ['number', 'string', 'boolean']
        A constant value in visual domain (e.g., `"red"` / "#0099ff"
        for color, values between `0` to `1` for opacity).
    """
    _additional_traits = False
    _required_traits = ['selection', 'value']
    _trait_name_map = {}
    selection = jst.JSONAnyOf([jst.JSONInstance(_localname('SelectionNot')), jst.JSONInstance(_localname('SelectionAnd')), jst.JSONInstance(_localname('SelectionOr')), jst.JSONString()])
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain (e.g., `"red"` / "#0099ff" for [...]')

    def __init__(self, selection=jst.undefined, value=jst.undefined, **kwargs):
        kwds = dict(selection=selection, value=value)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Conditional_ValueDef, self).__init__(**kwargs)


class Config(jst.JSONHasTraits):
    """Config class

    

    Attributes
    ----------
    area : MarkConfig
        Area-Specific Config
    autosize : AnyOf([string, AutoSizeParams])
        Sets how the visualization size should be determined. If a
        string, should be one of `"pad"`, `"fit"` or `"none"`.
        Object values can additionally specify parameters for content
        sizing and automatic resizing.
        `"fit"` is only supported for single and layered views that
        don't use `rangeStep`.
        __Default value__: `pad`
    axis : AxisConfig
        Axis configuration, which determines default properties for
        all `x` and `y` [axes](axis.html). For a full list of axis
        configuration options, please see the [corresponding section
        of the axis documentation](axis.html#config).
    axisBand : VgAxisConfig
        Specific axis config for axes with "band" scales.
    axisBottom : VgAxisConfig
        Specific axis config for x-axis along the bottom edge of the
        chart.
    axisLeft : VgAxisConfig
        Specific axis config for y-axis along the left edge of the
        chart.
    axisRight : VgAxisConfig
        Specific axis config for y-axis along the right edge of the
        chart.
    axisTop : VgAxisConfig
        Specific axis config for x-axis along the top edge of the
        chart.
    axisX : VgAxisConfig
        X-axis specific config.
    axisY : VgAxisConfig
        Y-axis specific config.
    background : string
        CSS color property to use as the background of visualization.
        __Default value:__ none (transparent)
    bar : BarConfig
        Bar-Specific Config
    circle : MarkConfig
        Circle-Specific Config
    countTitle : string
        Default axis and legend title for count fields.
        __Default value:__ `'Number of Records'`.
    fieldTitle : string
        Defines how Vega-Lite generates title for fields.  There are
        three possible styles:
        - `"verbal"` (Default) - displays function in a verbal style
          (e.g., "Sum of field", "Year-month of date", "field
          (binned)").
        - `"function"` - displays function using parentheses and
          capitalized texts (e.g., "SUM(field)", "YEARMONTH(date)",
          "BIN(field)").
        - `"plain"` - displays only the field name without functions
          (e.g., "field", "date", "field").
    invalidValues : ['string', 'null']
        Defines how Vega-Lite should handle invalid values (`null` and
        `NaN`).
        - If set to `"filter"` (default), all data items with null
          values are filtered.
        - If `null`, all data items are included. In this case,
          invalid values will be interpreted as zeroes.
    legend : LegendConfig
        Legend configuration, which determines default properties for
        all [legends](legend.html). For a full list of legend
        configuration options, please see the [corresponding section
        of in the legend documentation](legend.html#config).
    line : MarkConfig
        Line-Specific Config
    mark : MarkConfig
        Mark Config
    numberFormat : string
        D3 Number format for axis labels and text tables. For example
        "s" for SI units. Use [D3's number format
        pattern](https://github.com/d3/d3-format#locale_format).
    padding : AnyOf([number, Mapping])
        The default visualization padding, in pixels, from the edge of
        the visualization canvas to the data rectangle.  If a number,
        specifies padding for all sides.
        If an object, the value should have the format `{"left": 5,
        "top": 5, "right": 5, "bottom": 5}` to specify padding for
        each side of the visualization.
        __Default value__: `5`
    point : MarkConfig
        Point-Specific Config
    range : RangeConfig
        An object hash that defines default range arrays or schemes
        for using with scales.
        For a full list of scale range configuration options, please
        see the [corresponding section of the scale
        documentation](scale.html#config).
    rect : MarkConfig
        Rect-Specific Config
    rule : MarkConfig
        Rule-Specific Config
    scale : ScaleConfig
        Scale configuration determines default properties for all
        [scales](scale.html). For a full list of scale configuration
        options, please see the [corresponding section of the scale
        documentation](scale.html#config).
    selection : SelectionConfig
        An object hash for defining default properties for each type
        of selections.
    square : MarkConfig
        Square-Specific Config
    stack : string
        Default stack offset for stackable mark.
    style : Mapping
        An object hash that defines key-value mappings to determine
        default properties for marks with a given
        [style](mark.html#mark-def).  The keys represent styles names;
        the value are valid [mark configuration
        objects](mark.html#config).
    text : TextConfig
        Text-Specific Config
    tick : TickConfig
        Tick-Specific Config
    timeFormat : string
        Default datetime format for axis and legend labels. The format
        can be set directly on each axis and legend. Use [D3's time
        format pattern](https://github.com/d3/d3-time-
        format#locale_format).
        __Default value:__ `'%b %d, %Y'`.
    title : VgTitleConfig
        Title configuration, which determines default properties for
        all [titles](title.html). For a full list of title
        configuration options, please see the [corresponding section
        of the title documentation](title.html#config).
    view : ViewConfig
        Default properties for [single view plots](spec.html#single).
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    area = jst.JSONInstance(_localname('MarkConfig'), help='Area-Specific Config')
    autosize = jst.JSONAnyOf([AutosizeType(), jst.JSONInstance(_localname('AutoSizeParams'))], help='Sets how the visualization size should be determined. If a [...]')
    axis = jst.JSONInstance(_localname('AxisConfig'), help='Axis configuration, which determines default properties for all [...]')
    axisBand = jst.JSONInstance(_localname('VgAxisConfig'), help='Specific axis config for axes with "band" scales.')
    axisBottom = jst.JSONInstance(_localname('VgAxisConfig'), help='Specific axis config for x-axis along the bottom edge of the chart.')
    axisLeft = jst.JSONInstance(_localname('VgAxisConfig'), help='Specific axis config for y-axis along the left edge of the chart.')
    axisRight = jst.JSONInstance(_localname('VgAxisConfig'), help='Specific axis config for y-axis along the right edge of the chart.')
    axisTop = jst.JSONInstance(_localname('VgAxisConfig'), help='Specific axis config for x-axis along the top edge of the chart.')
    axisX = jst.JSONInstance(_localname('VgAxisConfig'), help='X-axis specific config.')
    axisY = jst.JSONInstance(_localname('VgAxisConfig'), help='Y-axis specific config.')
    background = jst.JSONString(help='CSS color property to use as the background of visualization. [...]')
    bar = jst.JSONInstance(_localname('BarConfig'), help='Bar-Specific Config')
    circle = jst.JSONInstance(_localname('MarkConfig'), help='Circle-Specific Config')
    countTitle = jst.JSONString(help='Default axis and legend title for count fields. __Default [...]')
    fieldTitle = jst.JSONEnum(['verbal', 'functional', 'plain'], help='Defines how Vega-Lite generates title for fields. There are [...]')
    invalidValues = jst.JSONEnum(['filter', None], help='Defines how Vega-Lite should handle invalid values (`null` and [...]')
    legend = jst.JSONInstance(_localname('LegendConfig'), help='Legend configuration, which determines default properties for [...]')
    line = jst.JSONInstance(_localname('MarkConfig'), help='Line-Specific Config')
    mark = jst.JSONInstance(_localname('MarkConfig'), help='Mark Config')
    numberFormat = jst.JSONString(help='D3 Number format for axis labels and text tables. For example [...]')
    padding = jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': [], 'bottom': jst.JSONNumber(), 'left': jst.JSONNumber(), 'right': jst.JSONNumber(), 'top': jst.JSONNumber()}))])
    point = jst.JSONInstance(_localname('MarkConfig'), help='Point-Specific Config')
    range = jst.JSONInstance(_localname('RangeConfig'), help='An object hash that defines default range arrays or schemes for [...]')
    rect = jst.JSONInstance(_localname('MarkConfig'), help='Rect-Specific Config')
    rule = jst.JSONInstance(_localname('MarkConfig'), help='Rule-Specific Config')
    scale = jst.JSONInstance(_localname('ScaleConfig'), help='Scale configuration determines default properties for all [...]')
    selection = jst.JSONInstance(_localname('SelectionConfig'), help='An object hash for defining default properties for each type of [...]')
    square = jst.JSONInstance(_localname('MarkConfig'), help='Square-Specific Config')
    stack = StackOffset()
    style = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': [jst.JSONInstance(_localname('VgMarkConfig'))], '_required_traits': []}))
    text = jst.JSONInstance(_localname('TextConfig'), help='Text-Specific Config')
    tick = jst.JSONInstance(_localname('TickConfig'), help='Tick-Specific Config')
    timeFormat = jst.JSONString(help='Default datetime format for axis and legend labels. The format [...]')
    title = jst.JSONInstance(_localname('VgTitleConfig'), help='Title configuration, which determines default properties for all [...]')
    view = jst.JSONInstance(_localname('ViewConfig'), help='Default properties for [single view plots](spec.html#single).')

    def __init__(self, area=jst.undefined, autosize=jst.undefined, axis=jst.undefined, axisBand=jst.undefined, axisBottom=jst.undefined, axisLeft=jst.undefined, axisRight=jst.undefined, axisTop=jst.undefined, axisX=jst.undefined, axisY=jst.undefined, background=jst.undefined, bar=jst.undefined, circle=jst.undefined, countTitle=jst.undefined, fieldTitle=jst.undefined, invalidValues=jst.undefined, legend=jst.undefined, line=jst.undefined, mark=jst.undefined, numberFormat=jst.undefined, padding=jst.undefined, point=jst.undefined, range=jst.undefined, rect=jst.undefined, rule=jst.undefined, scale=jst.undefined, selection=jst.undefined, square=jst.undefined, stack=jst.undefined, style=jst.undefined, text=jst.undefined, tick=jst.undefined, timeFormat=jst.undefined, title=jst.undefined, view=jst.undefined, **kwargs):
        kwds = dict(area=area, autosize=autosize, axis=axis, axisBand=axisBand, axisBottom=axisBottom, axisLeft=axisLeft, axisRight=axisRight, axisTop=axisTop, axisX=axisX, axisY=axisY, background=background, bar=bar, circle=circle, countTitle=countTitle, fieldTitle=fieldTitle, invalidValues=invalidValues, legend=legend, line=line, mark=mark, numberFormat=numberFormat, padding=padding, point=point, range=range, rect=rect, rule=rule, scale=scale, selection=selection, square=square, stack=stack, style=style, text=text, tick=tick, timeFormat=timeFormat, title=title, view=view)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Config, self).__init__(**kwargs)


class CsvDataFormat(jst.JSONHasTraits):
    """CsvDataFormat class

    

    Attributes
    ----------
    parse : AnyOf([string, Mapping])
        If set to auto (the default), perform automatic type inference
        to determine the desired data types.
        Alternatively, a parsing directive object can be provided for
        explicit data types. Each property of the object corresponds
        to a field name, and the value to the desired data type (one
        of `"number"`, `"boolean"` or `"date"`).
        For example, `"parse": {"modified_on": "date"}` parses the
        `modified_on` field in each input record a Date value.
        For `"date"`, we parse data based using Javascript's
        [`Date.parse()`](https://developer.mozilla.org/en-
        US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
        For Specific date formats can be provided (e.g., `{foo:
        'date:"%m%d%Y"'}`), using the [d3-time-format
        syntax](https://github.com/d3/d3-time-format#locale_format).
        UTC date format parsing is supported similarly (e.g., `{foo:
        'utc:"%m%d%Y"'}`). See more about [UTC
        time](timeunit.html#utc)
    type : string
        Type of input data: `"json"`, `"csv"`, `"tsv"`.
        The default format type is determined by the extension of the
        file URL.
        If no extension is detected, `"json"` will be used by default.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    parse = jst.JSONAnyOf([jst.JSONEnum(['auto']), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True, '_required_traits': []}))], help='If set to auto (the default), perform automatic type inference [...]')
    type = jst.JSONEnum(['csv', 'tsv'], help='Type of input data: `"json"`, `"csv"`, `"tsv"`. The default [...]')

    def __init__(self, parse=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(parse=parse, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(CsvDataFormat, self).__init__(**kwargs)


class DateTime(jst.JSONHasTraits):
    """DateTime class

    Object for defining datetime in Vega-Lite Filter.
    If both month and quarter are provided, month has higher
    precedence.
    `day` cannot be combined with other date.
    We accept string for month and day names.

    Attributes
    ----------
    date : number
        Integer value representing the date from 1-31.
    day : AnyOf([number, string])
        Value representing the day of a week.  This can be one of: (1)
        integer value -- `1` represents Monday; (2) case-insensitive
        day name (e.g., `"Monday"`);  (3) case-insensitive,
        3-character short day name (e.g., `"Mon"`).   <br/>
        **Warning:** A DateTime definition object with `day`** should
        not be combined with `year`, `quarter`, `month`, or `date`.
    hours : number
        Integer value representing the hour of a day from 0-23.
    milliseconds : number
        Integer value representing the millisecond segment of time.
    minutes : number
        Integer value representing the minute segment of time from
        0-59.
    month : AnyOf([number, string])
        One of: (1) integer value representing the month from
        `1`-`12`. `1` represents January;  (2) case-insensitive month
        name (e.g., `"January"`);  (3) case-insensitive, 3-character
        short month name (e.g., `"Jan"`).
    quarter : number
        Integer value representing the quarter of the year (from 1-4).
    seconds : number
        Integer value representing the second segment (0-59) of a time
        value
    utc : boolean
        A boolean flag indicating if date time is in utc time. If
        false, the date time is in local time
    year : number
        Integer value representing the year.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    date = jst.JSONNumber(help='Integer value representing the date from 1-31.', maximum=31, minimum=1)
    day = jst.JSONAnyOf([jst.JSONNumber(maximum=7, minimum=1), jst.JSONString()], help='Value representing the day of a week. This can be one of: (1) [...]')
    hours = jst.JSONNumber(help='Integer value representing the hour of a day from 0-23.', maximum=23, minimum=0)
    milliseconds = jst.JSONNumber(help='Integer value representing the millisecond segment of time.', maximum=999, minimum=0)
    minutes = jst.JSONNumber(help='Integer value representing the minute segment of time from 0-59.', maximum=59, minimum=0)
    month = jst.JSONAnyOf([jst.JSONNumber(maximum=12, minimum=1), jst.JSONString()], help='One of: (1) integer value representing the month from `1`-`12`. [...]')
    quarter = jst.JSONNumber(help='Integer value representing the quarter of the year (from 1-4).', maximum=4, minimum=1)
    seconds = jst.JSONNumber(help='Integer value representing the second segment (0-59) of a time value', maximum=59, minimum=0)
    utc = jst.JSONBoolean(help='A boolean flag indicating if date time is in utc time. If false, [...]')
    year = jst.JSONNumber(help='Integer value representing the year.')

    def __init__(self, date=jst.undefined, day=jst.undefined, hours=jst.undefined, milliseconds=jst.undefined, minutes=jst.undefined, month=jst.undefined, quarter=jst.undefined, seconds=jst.undefined, utc=jst.undefined, year=jst.undefined, **kwargs):
        kwds = dict(date=date, day=day, hours=hours, milliseconds=milliseconds, minutes=minutes, month=month, quarter=quarter, seconds=seconds, utc=utc, year=year)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(DateTime, self).__init__(**kwargs)


class Encoding(jst.JSONHasTraits):
    """Encoding class

    

    Attributes
    ----------
    color : AnyOf([MarkPropFieldDefWithCondition, MarkPropValueDefWithCondition])
        Color of the marks – either fill or stroke color based on mark
        type.
        By default, `color` represents fill color for `"area"`,
        `"bar"`, `"tick"`,
        `"text"`, `"circle"`, and `"square"` / stroke color for
        `"line"` and `"point"`.
        __Default value:__ If undefined, the default color depends on
        [mark config](config.html#mark)'s `color` property.
        _Note:_ See the scale documentation for more information about
        customizing [color scheme](scale.html#scheme).
    detail : AnyOf([FieldDef, Array(FieldDef)])
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    opacity : AnyOf([MarkPropFieldDefWithCondition, MarkPropValueDefWithCondition])
        Opacity of the marks – either can be a value or a range.
        __Default value:__ If undefined, the default opacity depends
        on [mark config](config.html#mark)'s `opacity` property.
    order : AnyOf([OrderFieldDef, Array(OrderFieldDef)])
        Stack order for stacked marks or order of data points in line
        marks for connected scatter plots.
        __Note__: In aggregate plots, `order` field should be
        `aggregate`d to avoid creating additional aggregation
        grouping.
    shape : AnyOf([MarkPropFieldDefWithCondition, MarkPropValueDefWithCondition])
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
        __Default value:__ If undefined, the default shape depends on
        [mark config](config.html#point-config)'s `shape` property.
    size : AnyOf([MarkPropFieldDefWithCondition, MarkPropValueDefWithCondition])
        Size of the mark.
        - For `"point"`, `"square"` and `"circle"`, – the symbol
          size, or pixel area of the mark.
        - For `"bar"` and `"tick"` – the bar and tick's size.
        - For `"text"` – the text's font size.
        - Size is currently unsupported for `"line"`, `"area"`, and
          `"rect"`.
    text : AnyOf([TextFieldDefWithCondition, TextValueDefWithCondition])
        Text of the `text` mark.
    tooltip : AnyOf([TextFieldDefWithCondition, TextValueDefWithCondition])
        The tooltip text to show upon mouse hover.
    x : AnyOf([PositionFieldDef, ValueDef])
        X coordinates of the marks, or width of horizontal `"bar"` and
        `"area"`.
    x2 : AnyOf([FieldDef, ValueDef])
        X2 coordinates for ranged  `"area"`, `"bar"`, `"rect"`, and
        `"rule"`.
    y : AnyOf([PositionFieldDef, ValueDef])
        Y coordinates of the marks, or height of vertical `"bar"` and
        `"area"`.
    y2 : AnyOf([FieldDef, ValueDef])
        Y2 coordinates for ranged  `"area"`, `"bar"`, `"rect"`, and
        `"rule"`.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    color = jst.JSONAnyOf([jst.JSONInstance(_localname('MarkPropFieldDefWithCondition')), jst.JSONInstance(_localname('MarkPropValueDefWithCondition'))], help='Color of the marks – either fill or stroke color based on mark [...]')
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    opacity = jst.JSONAnyOf([jst.JSONInstance(_localname('MarkPropFieldDefWithCondition')), jst.JSONInstance(_localname('MarkPropValueDefWithCondition'))], help='Opacity of the marks – either can be a value or a range. [...]')
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderFieldDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderFieldDef')))], help='Stack order for stacked marks or order of data points in line [...]')
    shape = jst.JSONAnyOf([jst.JSONInstance(_localname('MarkPropFieldDefWithCondition')), jst.JSONInstance(_localname('MarkPropValueDefWithCondition'))], help="The symbol's shape (only for `point` marks). The supported [...]")
    size = jst.JSONAnyOf([jst.JSONInstance(_localname('MarkPropFieldDefWithCondition')), jst.JSONInstance(_localname('MarkPropValueDefWithCondition'))], help='Size of the mark. - For `"point"`, `"square"` and `"circle"`, – [...]')
    text = jst.JSONAnyOf([jst.JSONInstance(_localname('TextFieldDefWithCondition')), jst.JSONInstance(_localname('TextValueDefWithCondition'))], help='Text of the `text` mark.')
    tooltip = jst.JSONAnyOf([jst.JSONInstance(_localname('TextFieldDefWithCondition')), jst.JSONInstance(_localname('TextValueDefWithCondition'))], help='The tooltip text to show upon mouse hover.')
    x = jst.JSONAnyOf([jst.JSONInstance(_localname('PositionFieldDef')), jst.JSONInstance(_localname('ValueDef'))], help='X coordinates of the marks, or width of horizontal `"bar"` and [...]')
    x2 = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONInstance(_localname('ValueDef'))], help='X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and `"rule"`.')
    y = jst.JSONAnyOf([jst.JSONInstance(_localname('PositionFieldDef')), jst.JSONInstance(_localname('ValueDef'))], help='Y coordinates of the marks, or height of vertical `"bar"` and [...]')
    y2 = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONInstance(_localname('ValueDef'))], help='Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and `"rule"`.')

    def __init__(self, color=jst.undefined, detail=jst.undefined, opacity=jst.undefined, order=jst.undefined, shape=jst.undefined, size=jst.undefined, text=jst.undefined, tooltip=jst.undefined, x=jst.undefined, x2=jst.undefined, y=jst.undefined, y2=jst.undefined, **kwargs):
        kwds = dict(color=color, detail=detail, opacity=opacity, order=order, shape=shape, size=size, text=text, tooltip=tooltip, x=x, x2=x2, y=y, y2=y2)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Encoding, self).__init__(**kwargs)


class EncodingWithFacet(jst.JSONHasTraits):
    """EncodingWithFacet class

    

    Attributes
    ----------
    color : AnyOf([MarkPropFieldDefWithCondition, MarkPropValueDefWithCondition])
        Color of the marks – either fill or stroke color based on mark
        type.
        By default, `color` represents fill color for `"area"`,
        `"bar"`, `"tick"`,
        `"text"`, `"circle"`, and `"square"` / stroke color for
        `"line"` and `"point"`.
        __Default value:__ If undefined, the default color depends on
        [mark config](config.html#mark)'s `color` property.
        _Note:_ See the scale documentation for more information about
        customizing [color scheme](scale.html#scheme).
    column : FacetFieldDef
        Horizontal facets for trellis plots.
    detail : AnyOf([FieldDef, Array(FieldDef)])
        Additional levels of detail for grouping data in aggregate
        views and
        in line and area marks without mapping data to a specific
        visual channel.
    opacity : AnyOf([MarkPropFieldDefWithCondition, MarkPropValueDefWithCondition])
        Opacity of the marks – either can be a value or a range.
        __Default value:__ If undefined, the default opacity depends
        on [mark config](config.html#mark)'s `opacity` property.
    order : AnyOf([OrderFieldDef, Array(OrderFieldDef)])
        Stack order for stacked marks or order of data points in line
        marks for connected scatter plots.
        __Note__: In aggregate plots, `order` field should be
        `aggregate`d to avoid creating additional aggregation
        grouping.
    row : FacetFieldDef
        Vertical facets for trellis plots.
    shape : AnyOf([MarkPropFieldDefWithCondition, MarkPropValueDefWithCondition])
        The symbol's shape (only for `point` marks). The supported
        values are
        `"circle"` (default), `"square"`, `"cross"`, `"diamond"`,
        `"triangle-up"`,
        or `"triangle-down"`, or else a custom SVG path string.
        __Default value:__ If undefined, the default shape depends on
        [mark config](config.html#point-config)'s `shape` property.
    size : AnyOf([MarkPropFieldDefWithCondition, MarkPropValueDefWithCondition])
        Size of the mark.
        - For `"point"`, `"square"` and `"circle"`, – the symbol
          size, or pixel area of the mark.
        - For `"bar"` and `"tick"` – the bar and tick's size.
        - For `"text"` – the text's font size.
        - Size is currently unsupported for `"line"`, `"area"`, and
          `"rect"`.
    text : AnyOf([TextFieldDefWithCondition, TextValueDefWithCondition])
        Text of the `text` mark.
    tooltip : AnyOf([TextFieldDefWithCondition, TextValueDefWithCondition])
        The tooltip text to show upon mouse hover.
    x : AnyOf([PositionFieldDef, ValueDef])
        X coordinates of the marks, or width of horizontal `"bar"` and
        `"area"`.
    x2 : AnyOf([FieldDef, ValueDef])
        X2 coordinates for ranged  `"area"`, `"bar"`, `"rect"`, and
        `"rule"`.
    y : AnyOf([PositionFieldDef, ValueDef])
        Y coordinates of the marks, or height of vertical `"bar"` and
        `"area"`.
    y2 : AnyOf([FieldDef, ValueDef])
        Y2 coordinates for ranged  `"area"`, `"bar"`, `"rect"`, and
        `"rule"`.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    color = jst.JSONAnyOf([jst.JSONInstance(_localname('MarkPropFieldDefWithCondition')), jst.JSONInstance(_localname('MarkPropValueDefWithCondition'))], help='Color of the marks – either fill or stroke color based on mark [...]')
    column = jst.JSONInstance(_localname('FacetFieldDef'), help='Horizontal facets for trellis plots.')
    detail = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONArray(jst.JSONInstance(_localname('FieldDef')))], help='Additional levels of detail for grouping data in aggregate views [...]')
    opacity = jst.JSONAnyOf([jst.JSONInstance(_localname('MarkPropFieldDefWithCondition')), jst.JSONInstance(_localname('MarkPropValueDefWithCondition'))], help='Opacity of the marks – either can be a value or a range. [...]')
    order = jst.JSONAnyOf([jst.JSONInstance(_localname('OrderFieldDef')), jst.JSONArray(jst.JSONInstance(_localname('OrderFieldDef')))], help='Stack order for stacked marks or order of data points in line [...]')
    row = jst.JSONInstance(_localname('FacetFieldDef'), help='Vertical facets for trellis plots.')
    shape = jst.JSONAnyOf([jst.JSONInstance(_localname('MarkPropFieldDefWithCondition')), jst.JSONInstance(_localname('MarkPropValueDefWithCondition'))], help="The symbol's shape (only for `point` marks). The supported [...]")
    size = jst.JSONAnyOf([jst.JSONInstance(_localname('MarkPropFieldDefWithCondition')), jst.JSONInstance(_localname('MarkPropValueDefWithCondition'))], help='Size of the mark. - For `"point"`, `"square"` and `"circle"`, – [...]')
    text = jst.JSONAnyOf([jst.JSONInstance(_localname('TextFieldDefWithCondition')), jst.JSONInstance(_localname('TextValueDefWithCondition'))], help='Text of the `text` mark.')
    tooltip = jst.JSONAnyOf([jst.JSONInstance(_localname('TextFieldDefWithCondition')), jst.JSONInstance(_localname('TextValueDefWithCondition'))], help='The tooltip text to show upon mouse hover.')
    x = jst.JSONAnyOf([jst.JSONInstance(_localname('PositionFieldDef')), jst.JSONInstance(_localname('ValueDef'))], help='X coordinates of the marks, or width of horizontal `"bar"` and [...]')
    x2 = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONInstance(_localname('ValueDef'))], help='X2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and `"rule"`.')
    y = jst.JSONAnyOf([jst.JSONInstance(_localname('PositionFieldDef')), jst.JSONInstance(_localname('ValueDef'))], help='Y coordinates of the marks, or height of vertical `"bar"` and [...]')
    y2 = jst.JSONAnyOf([jst.JSONInstance(_localname('FieldDef')), jst.JSONInstance(_localname('ValueDef'))], help='Y2 coordinates for ranged `"area"`, `"bar"`, `"rect"`, and `"rule"`.')

    def __init__(self, color=jst.undefined, column=jst.undefined, detail=jst.undefined, opacity=jst.undefined, order=jst.undefined, row=jst.undefined, shape=jst.undefined, size=jst.undefined, text=jst.undefined, tooltip=jst.undefined, x=jst.undefined, x2=jst.undefined, y=jst.undefined, y2=jst.undefined, **kwargs):
        kwds = dict(color=color, column=column, detail=detail, opacity=opacity, order=order, row=row, shape=shape, size=size, text=text, tooltip=tooltip, x=x, x2=x2, y=y, y2=y2)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(EncodingWithFacet, self).__init__(**kwargs)


class EqualFilter(jst.JSONHasTraits):
    """EqualFilter class

    

    Attributes
    ----------
    equal : AnyOf([string, number, boolean, DateTime])
        The value that the field should be equal to.
    field : string
        Field to be filtered.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit for the field to be filtered.
    """
    _additional_traits = False
    _required_traits = ['field', 'equal']
    _trait_name_map = {}
    equal = jst.JSONAnyOf([jst.JSONString(), jst.JSONNumber(), jst.JSONBoolean(), jst.JSONInstance(_localname('DateTime'))], help='The value that the field should be equal to.')
    field = jst.JSONString(help='Field to be filtered.')
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])

    def __init__(self, equal=jst.undefined, field=jst.undefined, timeUnit=jst.undefined, **kwargs):
        kwds = dict(equal=equal, field=field, timeUnit=timeUnit)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(EqualFilter, self).__init__(**kwargs)


class FacetFieldDef(jst.JSONHasTraits):
    """FacetFieldDef class

    

    Attributes
    ----------
    aggregate : string
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
        __Default value:__ `undefined` (None)
    bin : AnyOf([boolean, BinParams])
        A flag for binning a `quantitative` field, or [an object
        defining binning parameters](bin.html#params).
        If `true`, default [binning parameters](bin.html) will be
        applied.
        __Default value:__ `false`
    field : AnyOf([string, RepeatRef])
        __Required.__ A string defining the name of the field from
        which to pull a data value
        or an object defining iterated values from the
        [`repeat`](repeat.html) operator.
        __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to
        access nested objects (e.g., `"field": "foo.bar"` and
        `"field": "foo['bar']"`).
        If field names contain dots or brackets but are not nested,
        you can use `\\` to escape dots and brackets (e.g., `"a\\.b"`
        and `"a\\[0\\]"`).
        See more details about escaping in the [field
        documentation](field.html).
        __Note:__ `field` is not required if `aggregate` is `count`.
    header : Header
        An object defining properties of a facet's header.
    sort : ['string', 'null']
        Sort order for a facet field.
        This can be `"ascending"`, `"descending"`.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a
        temporal field.
        or [a temporal field that gets casted as
        ordinal](type.html#cast).
        __Default value:__ `undefined` (None)
    type : string
        The encoded field's type of measurement (`"quantitative"`,
        `"temporal"`, `"ordinal"`, or `"nominal"`).
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='A flag for binning a `quantitative` field, or [an object [...]')
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='__Required.__ A string defining the name of the field from which [...]')
    header = jst.JSONInstance(_localname('Header'), help="An object defining properties of a facet's header.")
    sort = SortOrder()
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])
    type = Type(help='Constants and utilities for data type Data type based on level [...]')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, field=jst.undefined, header=jst.undefined, sort=jst.undefined, timeUnit=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, field=field, header=header, sort=sort, timeUnit=timeUnit, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetFieldDef, self).__init__(**kwargs)


class FacetMapping(jst.JSONHasTraits):
    """FacetMapping class

    

    Attributes
    ----------
    column : FacetFieldDef
        Horizontal facets for trellis plots.
    row : FacetFieldDef
        Vertical facets for trellis plots.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    column = jst.JSONInstance(_localname('FacetFieldDef'), help='Horizontal facets for trellis plots.')
    row = jst.JSONInstance(_localname('FacetFieldDef'), help='Vertical facets for trellis plots.')

    def __init__(self, column=jst.undefined, row=jst.undefined, **kwargs):
        kwds = dict(column=column, row=row)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetMapping, self).__init__(**kwargs)


class FacetSpec(jst.JSONHasTraits):
    """FacetSpec class

    

    Attributes
    ----------
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    facet : FacetMapping
        An object that describes mappings between `row` and `column`
        channels and their field definitions.
    name : string
        Name of the visualization for later reference.
    resolve : Resolve
        Scale, axis, and legend resolutions for facets.
    spec : AnyOf([LayerSpec, CompositeUnitSpec])
        A specification of the view that gets faceted.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    """
    _additional_traits = False
    _required_traits = ['facet', 'spec']
    _trait_name_map = {}
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    facet = jst.JSONInstance(_localname('FacetMapping'), help='An object that describes mappings between `row` and `column` [...]')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale, axis, and legend resolutions for facets.')
    spec = jst.JSONAnyOf([jst.JSONInstance(_localname('LayerSpec')), jst.JSONInstance(_localname('CompositeUnitSpec'))], help='A specification of the view that gets faceted.')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')

    def __init__(self, data=jst.undefined, description=jst.undefined, facet=jst.undefined, name=jst.undefined, resolve=jst.undefined, spec=jst.undefined, title=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(data=data, description=description, facet=facet, name=name, resolve=resolve, spec=spec, title=title, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetSpec, self).__init__(**kwargs)


class FacetedCompositeUnitSpecAlias(jst.JSONHasTraits):
    """FacetedCompositeUnitSpecAlias class

    

    Attributes
    ----------
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    encoding : EncodingWithFacet
        A key-value mapping between encoding channels and definition
        of fields.
    height : number
        The height of a visualization.
        __Default value:__
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its y-channel has a [continuous
          scale](scale.html#continuous), the height will be the value
          of [`config.view.height`](spec.html#config).
        - For y-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the height is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          y-channel](scale.html#band). Otherwise, if the `rangeStep`
          is `null`, the height will be the value of
          [`config.view.height`](spec.html#config).
        - If no field is mapped to `y` channel, the `height` will be
          the value of `rangeStep`.
        __Note__: For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the height of
        a single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    mark : AnyOf([string, MarkDef])
        A string describing the mark type (one of `"bar"`, `"circle"`,
        `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`) or a [mark
        definition object](mark.html#mark-def).
    name : string
        Name of the visualization for later reference.
    selection : Mapping
        A key-value mapping between selection names and definitions.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    width : number
        The width of a visualization.
        __Default value:__ This will be determined by the following
        rules:
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its x-channel has a [continuous
          scale](scale.html#continuous), the width will be the value
          of [`config.view.width`](spec.html#config).
        - For x-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the width is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          x-channel](scale.html#band).   Otherwise, if the `rangeStep`
          is `null`, the width will be the value of
          [`config.view.width`](spec.html#config).
        - If no field is mapped to `x` channel, the `width` will be
          the value of
          [`config.scale.textXRangeStep`](size.html#default-width-and-
          height) for `text` mark and the value of `rangeStep` for
          other marks.
        __Note:__ For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the width of a
        single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    """
    _additional_traits = False
    _required_traits = ['mark', 'encoding']
    _trait_name_map = {}
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    encoding = jst.JSONInstance(_localname('EncodingWithFacet'), help='A key-value mapping between encoding channels and definition of [...]')
    height = jst.JSONNumber(help="The height of a visualization. __Default value:__ - If a view's [...]")
    mark = jst.JSONAnyOf([Mark(help='All types of primitive marks.'), jst.JSONInstance(_localname('MarkDef'))])
    name = jst.JSONString(help='Name of the visualization for later reference.')
    selection = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': [jst.JSONInstance(_localname('SelectionDef'))], '_required_traits': []}), help='A key-value mapping between selection names and definitions.')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')
    width = jst.JSONNumber(help='The width of a visualization. __Default value:__ This will be [...]')

    def __init__(self, data=jst.undefined, description=jst.undefined, encoding=jst.undefined, height=jst.undefined, mark=jst.undefined, name=jst.undefined, selection=jst.undefined, title=jst.undefined, transform=jst.undefined, width=jst.undefined, **kwargs):
        kwds = dict(data=data, description=description, encoding=encoding, height=height, mark=mark, name=name, selection=selection, title=title, transform=transform, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FacetedCompositeUnitSpecAlias, self).__init__(**kwargs)


class FieldDef(jst.JSONHasTraits):
    """FieldDef class

    Definition object for a data field, its type and transformation of
    an encoding channel.

    Attributes
    ----------
    aggregate : string
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
        __Default value:__ `undefined` (None)
    bin : AnyOf([boolean, BinParams])
        A flag for binning a `quantitative` field, or [an object
        defining binning parameters](bin.html#params).
        If `true`, default [binning parameters](bin.html) will be
        applied.
        __Default value:__ `false`
    field : AnyOf([string, RepeatRef])
        __Required.__ A string defining the name of the field from
        which to pull a data value
        or an object defining iterated values from the
        [`repeat`](repeat.html) operator.
        __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to
        access nested objects (e.g., `"field": "foo.bar"` and
        `"field": "foo['bar']"`).
        If field names contain dots or brackets but are not nested,
        you can use `\\` to escape dots and brackets (e.g., `"a\\.b"`
        and `"a\\[0\\]"`).
        See more details about escaping in the [field
        documentation](field.html).
        __Note:__ `field` is not required if `aggregate` is `count`.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a
        temporal field.
        or [a temporal field that gets casted as
        ordinal](type.html#cast).
        __Default value:__ `undefined` (None)
    type : string
        The encoded field's type of measurement (`"quantitative"`,
        `"temporal"`, `"ordinal"`, or `"nominal"`).
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='A flag for binning a `quantitative` field, or [an object [...]')
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='__Required.__ A string defining the name of the field from which [...]')
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])
    type = Type(help='Constants and utilities for data type Data type based on level [...]')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, field=jst.undefined, timeUnit=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, field=field, timeUnit=timeUnit, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FieldDef, self).__init__(**kwargs)


class FilterTransform(jst.JSONHasTraits):
    """FilterTransform class

    

    Attributes
    ----------
    filter : AnyOf([NotFilter, AndFilter, OrFilter, AnyOf([EqualFilter, RangeFilter, OneOfFilter, SelectionFilter, string])])
        The `filter` property must be either (1) a filter object for
        [equal-filters](filter.html#equalfilter),
        [range-filters](filter.html#rangefilter), [one-of
        filters](filter.html#oneoffilter), or [selection
        filters](filter.html#selectionfilter);
        (2) a [Vega Expression](filter.html#expression) string,
        where `datum` can be used to refer to the current data object;
        or (3) an array of filters (either objects or expression
        strings) that must all be true for a datum to pass the filter
        and be included.
    """
    _additional_traits = False
    _required_traits = ['filter']
    _trait_name_map = {}
    filter = jst.JSONAnyOf([jst.JSONInstance(_localname('NotFilter')), jst.JSONInstance(_localname('AndFilter')), jst.JSONInstance(_localname('OrFilter')), jst.JSONAnyOf([jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter')), jst.JSONInstance(_localname('SelectionFilter')), jst.JSONString()])])

    def __init__(self, filter=jst.undefined, **kwargs):
        kwds = dict(filter=filter)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(FilterTransform, self).__init__(**kwargs)


class HConcatSpec(jst.JSONHasTraits):
    """HConcatSpec class

    

    Attributes
    ----------
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    hconcat : Array(Spec)
        A list of views that should be concatenated and put into a
        row.
    name : string
        Name of the visualization for later reference.
    resolve : Resolve
        Scale, axis, and legend resolutions for horizontally
        concatenated charts.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    """
    _additional_traits = False
    _required_traits = ['hconcat']
    _trait_name_map = {}
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    hconcat = jst.JSONArray(jst.JSONInstance(_localname('Spec')), help='A list of views that should be concatenated and put into a row.')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale, axis, and legend resolutions for horizontally [...]')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')

    def __init__(self, data=jst.undefined, description=jst.undefined, hconcat=jst.undefined, name=jst.undefined, resolve=jst.undefined, title=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(data=data, description=description, hconcat=hconcat, name=name, resolve=resolve, title=title, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(HConcatSpec, self).__init__(**kwargs)


class Header(jst.JSONHasTraits):
    """Header class

    Headers of row / column channels for faceted plots.

    Attributes
    ----------
    format : string
        The formatting pattern for labels. This is D3's [number format
        pattern](https://github.com/d3/d3-format#locale_format) for
        quantitative fields and D3's [time format
        pattern](https://github.com/d3/d3-time-format#locale_format)
        for time field.
        See the [format documentation](format.html) for more
        information.
        __Default value:__  derived from
        [numberFormat](config.html#format) config for quantitative
        fields and from [timeFormat](config.html#format) config for
        temporal fields.
    labelAngle : number
        The rotation angle of the header labels.
        __Default value:__ `0`.
    title : ['string', 'null']
        A title for the field. If `null`, the title will be removed.
        __Default value:__  derived from the field's name and
        transformation function (`aggregate`, `bin` and `timeUnit`).
        If the field has an aggregate function, the function is
        displayed as a part of the title (e.g., `"Sum of Profit"`). If
        the field is binned or has a time unit applied, the applied
        function will be denoted in parentheses (e.g., `"Profit
        (binned)"`, `"Transaction Date (year-month)"`).  Otherwise,
        the title is simply the field name.
        __Note__: You can customize the default field title format by
        providing the [`fieldTitle` property in the
        [config](config.html) or [`fieldTitle` function via the
        `compile` function's options](compile.html#field-title).
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    format = jst.JSONString(help="The formatting pattern for labels. This is D3's [number format [...]")
    labelAngle = jst.JSONNumber(help='The rotation angle of the header labels. __Default value:__ `0`.', maximum=360, minimum=-360)
    title = jst.JSONString(allow_none=True, help='A title for the field. If `null`, the title will be removed. [...]')

    def __init__(self, format=jst.undefined, labelAngle=jst.undefined, title=jst.undefined, **kwargs):
        kwds = dict(format=format, labelAngle=labelAngle, title=title)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Header, self).__init__(**kwargs)


class InlineData(jst.JSONHasTraits):
    """InlineData class

    

    Attributes
    ----------
    format : DataFormat
        An object that specifies the format for parsing the data
        values.
    values : AnyOf([Array(number), Array(string), Array(boolean), Array(Mapping), string, Mapping])
        The full data set, included inline. This can be an array of
        objects or primitive values or a string.
        Arrays of primitive values are ingested as objects with a
        `data` property. Strings are parsed according to the specified
        format type.
    """
    _additional_traits = False
    _required_traits = ['values']
    _trait_name_map = {}
    format = jst.JSONInstance(_localname('DataFormat'), help='An object that specifies the format for parsing the data values.')
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONBoolean()), jst.JSONArray(jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True, '_required_traits': []}))), jst.JSONString(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True, '_required_traits': []}))], help='The full data set, included inline. This can be an array of [...]')

    def __init__(self, format=jst.undefined, values=jst.undefined, **kwargs):
        kwds = dict(format=format, values=values)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(InlineData, self).__init__(**kwargs)


class InterpolateParams(jst.JSONHasTraits):
    """InterpolateParams class

    

    Attributes
    ----------
    gamma : number
        
    type : string
        
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    gamma = jst.JSONNumber()
    type = jst.JSONEnum(['rgb', 'cubehelix', 'cubehelix-long'])

    def __init__(self, gamma=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(gamma=gamma, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(InterpolateParams, self).__init__(**kwargs)


class IntervalSelection(jst.JSONHasTraits):
    """IntervalSelection class

    

    Attributes
    ----------
    bind : string
        Establishes a two-way binding between the interval selection
        and the scales
        used within the same view. This allows a user to interactively
        pan and
        zoom the view.
    empty : string
        By default, all data values are considered to lie within an
        empty selection.
        When set to `none`, empty selections contain no data values.
    encodings : Array(string)
        An array of encoding channels. The corresponding data field
        values
        must match for a data tuple to fall within the selection.
    fields : Array(string)
        An array of field names whose values must match for a data
        tuple to
        fall within the selection.
    mark : BrushConfig
        An interval selection also adds a rectangle mark to depict the
        extents of the interval. The `mark` property can be used to
        customize the
        appearance of the mark.
    on : any_object
        A [Vega event stream](https://vega.github.io/vega/docs/event-
        streams/) (object or selector) that triggers the selection.
        For interval selections, the event stream must specify a
        [start and end](https://vega.github.io/vega/docs/event-
        streams/#between-filters).
    resolve : string
        With layered and multi-view displays, a strategy that
        determines how
        selections' data queries are resolved when applied in a filter
        transform,
        conditional encoding rule, or scale domain.
    translate : ['string', 'boolean']
        When truthy, allows a user to interactively move an interval
        selection
        back-and-forth. Can be `true`, `false` (to disable panning),
        or a
        [Vega event stream
        definition](https://vega.github.io/vega/docs/event-streams/)
        which must include a start and end event to trigger continuous
        panning.
        __Default value:__ `true`, which corresponds to
        `[mousedown, window:mouseup] > window:mousemove!` which
        corresponds to
        clicks and dragging within an interval selection to reposition
        it.
    type : string
        
    zoom : ['string', 'boolean']
        When truthy, allows a user to interactively resize an interval
        selection.
        Can be `true`, `false` (to disable zooming), or a [Vega event
        stream
        definition](https://vega.github.io/vega/docs/event-streams/).
        Currently,
        only `wheel` events are supported.
        __Default value:__ `true`, which corresponds to `wheel!`.
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    bind = jst.JSONEnum(['scales'], help='Establishes a two-way binding between the interval selection and [...]')
    empty = jst.JSONEnum(['all', 'none'], help='By default, all data values are considered to lie within an [...]')
    encodings = jst.JSONArray(SingleDefChannel(), help='An array of encoding channels. The corresponding data field [...]')
    fields = jst.JSONArray(jst.JSONString(), help='An array of field names whose values must match for a data tuple [...]')
    mark = jst.JSONInstance(_localname('BrushConfig'), help='An interval selection also adds a rectangle mark to depict the [...]')
    on = jst.JSONAny()
    resolve = SelectionResolution()
    translate = jst.JSONUnion([jst.JSONString(), jst.JSONBoolean()], help='When truthy, allows a user to interactively move an interval [...]')
    type = jst.JSONEnum(['interval'])
    zoom = jst.JSONUnion([jst.JSONString(), jst.JSONBoolean()], help='When truthy, allows a user to interactively resize an interval [...]')

    def __init__(self, bind=jst.undefined, empty=jst.undefined, encodings=jst.undefined, fields=jst.undefined, mark=jst.undefined, on=jst.undefined, resolve=jst.undefined, translate=jst.undefined, type=jst.undefined, zoom=jst.undefined, **kwargs):
        kwds = dict(bind=bind, empty=empty, encodings=encodings, fields=fields, mark=mark, on=on, resolve=resolve, translate=translate, type=type, zoom=zoom)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(IntervalSelection, self).__init__(**kwargs)


class IntervalSelectionConfig(jst.JSONHasTraits):
    """IntervalSelectionConfig class

    

    Attributes
    ----------
    bind : string
        Establishes a two-way binding between the interval selection
        and the scales
        used within the same view. This allows a user to interactively
        pan and
        zoom the view.
    empty : string
        By default, all data values are considered to lie within an
        empty selection.
        When set to `none`, empty selections contain no data values.
    encodings : Array(string)
        An array of encoding channels. The corresponding data field
        values
        must match for a data tuple to fall within the selection.
    fields : Array(string)
        An array of field names whose values must match for a data
        tuple to
        fall within the selection.
    mark : BrushConfig
        An interval selection also adds a rectangle mark to depict the
        extents of the interval. The `mark` property can be used to
        customize the
        appearance of the mark.
    on : any_object
        A [Vega event stream](https://vega.github.io/vega/docs/event-
        streams/) (object or selector) that triggers the selection.
        For interval selections, the event stream must specify a
        [start and end](https://vega.github.io/vega/docs/event-
        streams/#between-filters).
    resolve : string
        With layered and multi-view displays, a strategy that
        determines how
        selections' data queries are resolved when applied in a filter
        transform,
        conditional encoding rule, or scale domain.
    translate : ['string', 'boolean']
        When truthy, allows a user to interactively move an interval
        selection
        back-and-forth. Can be `true`, `false` (to disable panning),
        or a
        [Vega event stream
        definition](https://vega.github.io/vega/docs/event-streams/)
        which must include a start and end event to trigger continuous
        panning.
        __Default value:__ `true`, which corresponds to
        `[mousedown, window:mouseup] > window:mousemove!` which
        corresponds to
        clicks and dragging within an interval selection to reposition
        it.
    zoom : ['string', 'boolean']
        When truthy, allows a user to interactively resize an interval
        selection.
        Can be `true`, `false` (to disable zooming), or a [Vega event
        stream
        definition](https://vega.github.io/vega/docs/event-streams/).
        Currently,
        only `wheel` events are supported.
        __Default value:__ `true`, which corresponds to `wheel!`.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    bind = jst.JSONEnum(['scales'], help='Establishes a two-way binding between the interval selection and [...]')
    empty = jst.JSONEnum(['all', 'none'], help='By default, all data values are considered to lie within an [...]')
    encodings = jst.JSONArray(SingleDefChannel(), help='An array of encoding channels. The corresponding data field [...]')
    fields = jst.JSONArray(jst.JSONString(), help='An array of field names whose values must match for a data tuple [...]')
    mark = jst.JSONInstance(_localname('BrushConfig'), help='An interval selection also adds a rectangle mark to depict the [...]')
    on = jst.JSONAny()
    resolve = SelectionResolution()
    translate = jst.JSONUnion([jst.JSONString(), jst.JSONBoolean()], help='When truthy, allows a user to interactively move an interval [...]')
    zoom = jst.JSONUnion([jst.JSONString(), jst.JSONBoolean()], help='When truthy, allows a user to interactively resize an interval [...]')

    def __init__(self, bind=jst.undefined, empty=jst.undefined, encodings=jst.undefined, fields=jst.undefined, mark=jst.undefined, on=jst.undefined, resolve=jst.undefined, translate=jst.undefined, zoom=jst.undefined, **kwargs):
        kwds = dict(bind=bind, empty=empty, encodings=encodings, fields=fields, mark=mark, on=on, resolve=resolve, translate=translate, zoom=zoom)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(IntervalSelectionConfig, self).__init__(**kwargs)


class JsonDataFormat(jst.JSONHasTraits):
    """JsonDataFormat class

    

    Attributes
    ----------
    parse : AnyOf([string, Mapping])
        If set to auto (the default), perform automatic type inference
        to determine the desired data types.
        Alternatively, a parsing directive object can be provided for
        explicit data types. Each property of the object corresponds
        to a field name, and the value to the desired data type (one
        of `"number"`, `"boolean"` or `"date"`).
        For example, `"parse": {"modified_on": "date"}` parses the
        `modified_on` field in each input record a Date value.
        For `"date"`, we parse data based using Javascript's
        [`Date.parse()`](https://developer.mozilla.org/en-
        US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
        For Specific date formats can be provided (e.g., `{foo:
        'date:"%m%d%Y"'}`), using the [d3-time-format
        syntax](https://github.com/d3/d3-time-format#locale_format).
        UTC date format parsing is supported similarly (e.g., `{foo:
        'utc:"%m%d%Y"'}`). See more about [UTC
        time](timeunit.html#utc)
    property : string
        The JSON property containing the desired data.
        This parameter can be used when the loaded JSON file may have
        surrounding structure or meta-data.
        For example `"property": "values.features"` is equivalent to
        retrieving `json.values.features`
        from the loaded JSON object.
    type : string
        Type of input data: `"json"`, `"csv"`, `"tsv"`.
        The default format type is determined by the extension of the
        file URL.
        If no extension is detected, `"json"` will be used by default.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    parse = jst.JSONAnyOf([jst.JSONEnum(['auto']), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True, '_required_traits': []}))], help='If set to auto (the default), perform automatic type inference [...]')
    property = jst.JSONString(help='The JSON property containing the desired data. This parameter [...]')
    type = jst.JSONEnum(['json'], help='Type of input data: `"json"`, `"csv"`, `"tsv"`. The default [...]')

    def __init__(self, parse=jst.undefined, property=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(parse=parse, property=property, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(JsonDataFormat, self).__init__(**kwargs)


class LayerSpec(jst.JSONHasTraits):
    """LayerSpec class

    

    Attributes
    ----------
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    height : number
        The height of a visualization.
        __Default value:__
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its y-channel has a [continuous
          scale](scale.html#continuous), the height will be the value
          of [`config.view.height`](spec.html#config).
        - For y-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the height is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          y-channel](scale.html#band). Otherwise, if the `rangeStep`
          is `null`, the height will be the value of
          [`config.view.height`](spec.html#config).
        - If no field is mapped to `y` channel, the `height` will be
          the value of `rangeStep`.
        __Note__: For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the height of
        a single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    layer : Array(AnyOf([LayerSpec, CompositeUnitSpec]))
        Layer or single view specifications to be layered.
        __Note__: Specifications inside `layer` cannot use `row` and
        `column` channels as layering facet specifications is not
        allowed.
    name : string
        Name of the visualization for later reference.
    resolve : Resolve
        Scale, axis, and legend resolutions for layers.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    width : number
        The width of a visualization.
        __Default value:__ This will be determined by the following
        rules:
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its x-channel has a [continuous
          scale](scale.html#continuous), the width will be the value
          of [`config.view.width`](spec.html#config).
        - For x-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the width is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          x-channel](scale.html#band).   Otherwise, if the `rangeStep`
          is `null`, the width will be the value of
          [`config.view.width`](spec.html#config).
        - If no field is mapped to `x` channel, the `width` will be
          the value of
          [`config.scale.textXRangeStep`](size.html#default-width-and-
          height) for `text` mark and the value of `rangeStep` for
          other marks.
        __Note:__ For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the width of a
        single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    """
    _additional_traits = False
    _required_traits = ['layer']
    _trait_name_map = {}
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    height = jst.JSONNumber(help="The height of a visualization. __Default value:__ - If a view's [...]")
    layer = jst.JSONArray(jst.JSONAnyOf([jst.JSONInstance(_localname('LayerSpec')), jst.JSONInstance(_localname('CompositeUnitSpec'))]), help='Layer or single view specifications to be layered. __Note__: [...]')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale, axis, and legend resolutions for layers.')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')
    width = jst.JSONNumber(help='The width of a visualization. __Default value:__ This will be [...]')

    def __init__(self, data=jst.undefined, description=jst.undefined, height=jst.undefined, layer=jst.undefined, name=jst.undefined, resolve=jst.undefined, title=jst.undefined, transform=jst.undefined, width=jst.undefined, **kwargs):
        kwds = dict(data=data, description=description, height=height, layer=layer, name=name, resolve=resolve, title=title, transform=transform, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LayerSpec, self).__init__(**kwargs)


class Legend(jst.JSONHasTraits):
    """Legend class

    Properties of a legend or boolean flag for determining whether to
    show it.

    Attributes
    ----------
    entryPadding : number
        Padding (in pixels) between legend entries in a symbol legend.
    format : string
        The formatting pattern for labels. This is D3's [number format
        pattern](https://github.com/d3/d3-format#locale_format) for
        quantitative fields and D3's [time format
        pattern](https://github.com/d3/d3-time-format#locale_format)
        for time field.
        See the [format documentation](format.html) for more
        information.
        __Default value:__  derived from
        [numberFormat](config.html#format) config for quantitative
        fields and from [timeFormat](config.html#format) config for
        temporal fields.
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
        __Default value:__  `0`
    orient : string
        The orientation of the legend, which determines how the legend
        is positioned within the scene. One of "left", "right", "top-
        left", "top-right", "bottom-left", "bottom-right", "none".
        __Default value:__ `"right"`
    padding : number
        The padding, in pixels, between the legend and axis.
    tickCount : number
        The desired number of tick values for quantitative legends.
    title : ['string', 'null']
        A title for the field. If `null`, the title will be removed.
        __Default value:__  derived from the field's name and
        transformation function (`aggregate`, `bin` and `timeUnit`).
        If the field has an aggregate function, the function is
        displayed as a part of the title (e.g., `"Sum of Profit"`). If
        the field is binned or has a time unit applied, the applied
        function will be denoted in parentheses (e.g., `"Profit
        (binned)"`, `"Transaction Date (year-month)"`).  Otherwise,
        the title is simply the field name.
        __Note__: You can customize the default field title format by
        providing the [`fieldTitle` property in the
        [config](config.html) or [`fieldTitle` function via the
        `compile` function's options](compile.html#field-title).
    type : string
        The type of the legend. Use `"symbol"` to create a discrete
        legend and `"gradient"` for a continuous color gradient.
        __Default value:__ `"gradient"` for non-binned quantitative
        fields and temporal fields; `"symbol"` otherwise.
    values : AnyOf([Array(number), Array(string), Array(DateTime)])
        Explicitly set the visible legend values.
    zindex : number
        A non-positive integer indicating z-index of the legend.
        If zindex is 0, legend should be drawn behind all chart
        elements.
        To put them in front, use zindex = 1.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    entryPadding = jst.JSONNumber(help='Padding (in pixels) between legend entries in a symbol legend.')
    format = jst.JSONString(help="The formatting pattern for labels. This is D3's [number format [...]")
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    orient = LegendOrient()
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    tickCount = jst.JSONNumber(help='The desired number of tick values for quantitative legends.')
    title = jst.JSONString(allow_none=True, help='A title for the field. If `null`, the title will be removed. [...]')
    type = jst.JSONEnum(['symbol', 'gradient'], help='The type of the legend. Use `"symbol"` to create a discrete [...]')
    values = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help='Explicitly set the visible legend values.')
    zindex = jst.JSONNumber(help='A non-positive integer indicating z-index of the legend. If [...]', minimum=0)

    def __init__(self, entryPadding=jst.undefined, format=jst.undefined, offset=jst.undefined, orient=jst.undefined, padding=jst.undefined, tickCount=jst.undefined, title=jst.undefined, type=jst.undefined, values=jst.undefined, zindex=jst.undefined, **kwargs):
        kwds = dict(entryPadding=entryPadding, format=format, offset=offset, orient=orient, padding=padding, tickCount=tickCount, title=title, type=type, values=values, zindex=zindex)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Legend, self).__init__(**kwargs)


class LegendConfig(jst.JSONHasTraits):
    """LegendConfig class

    

    Attributes
    ----------
    cornerRadius : number
        Corner radius for the full legend.
    entryPadding : number
        Padding (in pixels) between legend entries in a symbol legend.
    fillColor : string
        Background fill color for the full legend.
    gradientHeight : number
        The height of the gradient, in pixels.
    gradientLabelBaseline : string
        Text baseline for color ramp gradient labels.
    gradientLabelLimit : number
        The maximum allowed length in pixels of color ramp gradient
        labels.
    gradientLabelOffset : number
        Vertical offset in pixels for color ramp gradient labels.
    gradientStrokeColor : string
        The color of the gradient stroke, can be in hex color code or
        regular color name.
    gradientStrokeWidth : number
        The width of the gradient stroke, in pixels.
    gradientWidth : number
        The width of the gradient, in pixels.
    labelAlign : string
        The alignment of the legend label, can be left, middle or
        right.
    labelBaseline : string
        The position of the baseline of legend label, can be top,
        middle or bottom.
    labelColor : string
        The color of the legend label, can be in hex color code or
        regular color name.
    labelFont : string
        The font of the legend label.
    labelFontSize : number
        The font size of legend label.
        __Default value:__ `10`.
    labelLimit : number
        Maximum allowed pixel width of axis tick labels.
    labelOffset : number
        The offset of the legend label.
    offset : number
        The offset, in pixels, by which to displace the legend from
        the edge of the enclosing group or data rectangle.
        __Default value:__  `0`
    orient : string
        The orientation of the legend, which determines how the legend
        is positioned within the scene. One of "left", "right", "top-
        left", "top-right", "bottom-left", "bottom-right", "none".
        __Default value:__ `"right"`
    padding : number
        The padding, in pixels, between the legend and axis.
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
        __Default value:__  `false`
    strokeColor : string
        Border stroke color for the full legend.
    strokeDash : Array(number)
        Border stroke dash pattern for the full legend.
    strokeWidth : number
        Border stroke width for the full legend.
    symbolColor : string
        The color of the legend symbol,
    symbolSize : number
        The size of the legend symbol, in pixels.
    symbolStrokeWidth : number
        The width of the symbol's stroke.
    symbolType : string
        Default shape type (such as "circle") for legend symbols.
    titleAlign : string
        Horizontal text alignment for legend titles.
    titleBaseline : string
        Vertical text baseline for legend titles.
    titleColor : string
        The color of the legend title, can be in hex color code or
        regular color name.
    titleFont : string
        The font of the legend title.
    titleFontSize : number
        The font size of the legend title.
    titleFontWeight : ['string', 'number']
        The font weight of the legend title.
    titleLimit : number
        Maximum allowed pixel width of axis titles.
    titlePadding : number
        The padding, in pixels, between title and legend.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    cornerRadius = jst.JSONNumber(help='Corner radius for the full legend.')
    entryPadding = jst.JSONNumber(help='Padding (in pixels) between legend entries in a symbol legend.')
    fillColor = jst.JSONString(help='Background fill color for the full legend.')
    gradientHeight = jst.JSONNumber(help='The height of the gradient, in pixels.', minimum=0)
    gradientLabelBaseline = jst.JSONString(help='Text baseline for color ramp gradient labels.')
    gradientLabelLimit = jst.JSONNumber(help='The maximum allowed length in pixels of color ramp gradient labels.')
    gradientLabelOffset = jst.JSONNumber(help='Vertical offset in pixels for color ramp gradient labels.')
    gradientStrokeColor = jst.JSONString(help='The color of the gradient stroke, can be in hex color code or [...]')
    gradientStrokeWidth = jst.JSONNumber(help='The width of the gradient stroke, in pixels.', minimum=0)
    gradientWidth = jst.JSONNumber(help='The width of the gradient, in pixels.', minimum=0)
    labelAlign = jst.JSONString(help='The alignment of the legend label, can be left, middle or right.')
    labelBaseline = jst.JSONString(help='The position of the baseline of legend label, can be top, middle [...]')
    labelColor = jst.JSONString(help='The color of the legend label, can be in hex color code or [...]')
    labelFont = jst.JSONString(help='The font of the legend label.')
    labelFontSize = jst.JSONNumber(help='The font size of legend label. __Default value:__ `10`.', minimum=0)
    labelLimit = jst.JSONNumber(help='Maximum allowed pixel width of axis tick labels.')
    labelOffset = jst.JSONNumber(help='The offset of the legend label.', minimum=0)
    offset = jst.JSONNumber(help='The offset, in pixels, by which to displace the legend from the [...]')
    orient = LegendOrient()
    padding = jst.JSONNumber(help='The padding, in pixels, between the legend and axis.')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated. [...]')
    strokeColor = jst.JSONString(help='Border stroke color for the full legend.')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='Border stroke dash pattern for the full legend.')
    strokeWidth = jst.JSONNumber(help='Border stroke width for the full legend.')
    symbolColor = jst.JSONString(help='The color of the legend symbol,')
    symbolSize = jst.JSONNumber(help='The size of the legend symbol, in pixels.', minimum=0)
    symbolStrokeWidth = jst.JSONNumber(help="The width of the symbol's stroke.", minimum=0)
    symbolType = jst.JSONString(help='Default shape type (such as "circle") for legend symbols.')
    titleAlign = jst.JSONString(help='Horizontal text alignment for legend titles.')
    titleBaseline = jst.JSONString(help='Vertical text baseline for legend titles.')
    titleColor = jst.JSONString(help='The color of the legend title, can be in hex color code or [...]')
    titleFont = jst.JSONString(help='The font of the legend title.')
    titleFontSize = jst.JSONNumber(help='The font size of the legend title.')
    titleFontWeight = jst.JSONUnion([jst.JSONString(), jst.JSONNumber()], help='The font weight of the legend title.')
    titleLimit = jst.JSONNumber(help='Maximum allowed pixel width of axis titles.')
    titlePadding = jst.JSONNumber(help='The padding, in pixels, between title and legend.')

    def __init__(self, cornerRadius=jst.undefined, entryPadding=jst.undefined, fillColor=jst.undefined, gradientHeight=jst.undefined, gradientLabelBaseline=jst.undefined, gradientLabelLimit=jst.undefined, gradientLabelOffset=jst.undefined, gradientStrokeColor=jst.undefined, gradientStrokeWidth=jst.undefined, gradientWidth=jst.undefined, labelAlign=jst.undefined, labelBaseline=jst.undefined, labelColor=jst.undefined, labelFont=jst.undefined, labelFontSize=jst.undefined, labelLimit=jst.undefined, labelOffset=jst.undefined, offset=jst.undefined, orient=jst.undefined, padding=jst.undefined, shortTimeLabels=jst.undefined, strokeColor=jst.undefined, strokeDash=jst.undefined, strokeWidth=jst.undefined, symbolColor=jst.undefined, symbolSize=jst.undefined, symbolStrokeWidth=jst.undefined, symbolType=jst.undefined, titleAlign=jst.undefined, titleBaseline=jst.undefined, titleColor=jst.undefined, titleFont=jst.undefined, titleFontSize=jst.undefined, titleFontWeight=jst.undefined, titleLimit=jst.undefined, titlePadding=jst.undefined, **kwargs):
        kwds = dict(cornerRadius=cornerRadius, entryPadding=entryPadding, fillColor=fillColor, gradientHeight=gradientHeight, gradientLabelBaseline=gradientLabelBaseline, gradientLabelLimit=gradientLabelLimit, gradientLabelOffset=gradientLabelOffset, gradientStrokeColor=gradientStrokeColor, gradientStrokeWidth=gradientStrokeWidth, gradientWidth=gradientWidth, labelAlign=labelAlign, labelBaseline=labelBaseline, labelColor=labelColor, labelFont=labelFont, labelFontSize=labelFontSize, labelLimit=labelLimit, labelOffset=labelOffset, offset=offset, orient=orient, padding=padding, shortTimeLabels=shortTimeLabels, strokeColor=strokeColor, strokeDash=strokeDash, strokeWidth=strokeWidth, symbolColor=symbolColor, symbolSize=symbolSize, symbolStrokeWidth=symbolStrokeWidth, symbolType=symbolType, titleAlign=titleAlign, titleBaseline=titleBaseline, titleColor=titleColor, titleFont=titleFont, titleFontSize=titleFontSize, titleFontWeight=titleFontWeight, titleLimit=titleLimit, titlePadding=titlePadding)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LegendConfig, self).__init__(**kwargs)


class LegendResolveMap(jst.JSONHasTraits):
    """LegendResolveMap class

    

    Attributes
    ----------
    color : string
        
    opacity : string
        
    shape : string
        
    size : string
        
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    color = ResolveMode()
    opacity = ResolveMode()
    shape = ResolveMode()
    size = ResolveMode()

    def __init__(self, color=jst.undefined, opacity=jst.undefined, shape=jst.undefined, size=jst.undefined, **kwargs):
        kwds = dict(color=color, opacity=opacity, shape=shape, size=size)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LegendResolveMap, self).__init__(**kwargs)


class LookupData(jst.JSONHasTraits):
    """LookupData class

    

    Attributes
    ----------
    data : Data
        Secondary data source to lookup in.
    fields : Array(string)
        Fields in foreign data to lookup.
        If not specificied, the entire object is queried.
    key : string
        Key in data to lookup.
    """
    _additional_traits = False
    _required_traits = ['data', 'key']
    _trait_name_map = {}
    data = jst.JSONInstance(_localname('Data'), help='Secondary data source to lookup in.')
    fields = jst.JSONArray(jst.JSONString(), help='Fields in foreign data to lookup. If not specificied, the entire [...]')
    key = jst.JSONString(help='Key in data to lookup.')

    def __init__(self, data=jst.undefined, fields=jst.undefined, key=jst.undefined, **kwargs):
        kwds = dict(data=data, fields=fields, key=key)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LookupData, self).__init__(**kwargs)


class LookupTransform(jst.JSONHasTraits):
    """LookupTransform class

    

    Attributes
    ----------
    as_ : AnyOf([string, Array(string)])
        The field or fields for storing the computed formula value.
        If `from.fields` is specified, the transform will use the same
        names for `as`.
        If `from.fields` is not specified, `as` has to be a string and
        we put the whole object into the data under the specified
        name.
    default : string
        The default value to use if lookup fails.
        __Default value:__ `null`
    from_ : LookupData
        Secondary data reference.
    lookup : string
        Key in primary data source.
    """
    _additional_traits = False
    _required_traits = ['lookup', 'from']
    _trait_name_map = {'as_': 'as', 'from_': 'from'}
    as_ = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='The field or fields for storing the computed formula value. If [...]')
    default = jst.JSONString(help='The default value to use if lookup fails. __Default value:__ `null`')
    from_ = jst.JSONInstance(_localname('LookupData'), help='Secondary data reference.')
    lookup = jst.JSONString(help='Key in primary data source.')

    def __init__(self, as_=jst.undefined, default=jst.undefined, from_=jst.undefined, lookup=jst.undefined, **kwargs):
        kwds = dict(as_=as_, default=default, from_=from_, lookup=lookup)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(LookupTransform, self).__init__(**kwargs)


class MarkConfig(jst.JSONHasTraits):
    """MarkConfig class

    

    Attributes
    ----------
    align : string
        The horizontal alignment of the text. One of `"left"`,
        `"right"`, `"center"`.
    angle : number
        The rotation angle of the text, in degrees.
    baseline : string
        The vertical alignment of the text. One of `"top"`,
        `"middle"`, `"bottom"`.
        __Default value:__ `"middle"`
    color : string
        Default color.  Note that `fill` and `stroke` have higher
        precedence than `color` and will override `color`.
        __Default value:__ <span style="color:
        #4682b4;">&#9632;</span> `"#4682b4"`
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        _angle_ property.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        _angle_ property.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    fillOpacity : number
        The fill opacity (value between [0,1]).
        __Default value:__ `1`
    filled : boolean
        Whether the mark's color should be used as fill color instead
        of stroke color.
        __Default value:__ `true` for all marks except `point` and
        `false` for `point`.
        __Applicable for:__ `bar`, `point`, `circle`, `square`, and
        `area` marks.
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    font : string
        The typeface to set the text in (e.g., `"Helvetica Neue"`).
    fontSize : number
        The font size, in pixels.
    fontStyle : string
        The font style (e.g., `"italic"`).
    fontWeight : AnyOf([string, number])
        The font weight (e.g., `"bold"`).
    interpolate : string
        The line interpolation method to use for line and area marks.
        One of the following:
        - `"linear"`: piecewise linear segments, as in a polyline.
        - `"linear-closed"`: close the linear segments to form a
          polygon.
        - `"step"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"step-before"`: alternate between vertical and horizontal
          segments, as in a step function.
        - `"step-after"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"basis"`: a B-spline, with control point duplication on
          the ends.
        - `"basis-open"`: an open B-spline; may not intersect the
          start or end.
        - `"basis-closed"`: a closed B-spline, as in a loop.
        - `"cardinal"`: a Cardinal spline, with control point
          duplication on the ends.
        - `"cardinal-open"`: an open Cardinal spline; may not
          intersect the start or end, but will intersect other control
          points.
        - `"cardinal-closed"`: a closed Cardinal spline, as in a
          loop.
        - `"bundle"`: equivalent to basis, except the tension
          parameter is used to straighten the spline.
        - `"monotone"`: cubic interpolation that preserves
          monotonicity in y.
    limit : number
        The maximum length of the text mark in pixels (default 0,
        indicating no limit). The text value will be automatically
        truncated if the rendered size exceeds the limit.
    opacity : number
        The overall opacity (value between [0,1]).
        __Default value:__ `0.7` for non-aggregate plots with `point`,
        `tick`, `circle`, or `square` marks or layered `bar` charts
        and `1` otherwise.
    orient : string
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the `x` and `y` properties.
    shape : string
        The default symbol shape to use. One of: `"circle"` (default),
        `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or
        `"triangle-down"`, or a custom SVG path.
        __Default value:__ `"circle"`
    size : number
        The pixel area each the point/circle/square.
        For example: in the case of circles, the radius is determined
        in part by the square root of the size value.
        __Default value:__ `30`
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    strokeDash : Array(number)
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
        __Default value:__ `1`
    strokeWidth : number
        The stroke width, in pixels.
    tension : number
        Depending on the interpolation type, sets the tension
        parameter (for line and area marks).
    text : string
        Placeholder text if the `text` channel is not specified
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the `x` and `y` properties. Values for
        `theta` follow the same convention of `arc` mark `startAngle`
        and `endAngle` properties: angles are measured in radians,
        with `0` indicating "north".
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    align = HorizontalAlign()
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.', maximum=360, minimum=0)
    baseline = VerticalAlign()
    color = jst.JSONString(help='Default color. Note that `fill` and `stroke` have higher [...]')
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color [...]')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    filled = jst.JSONBoolean(help="Whether the mark's color should be used as fill color instead of [...]")
    font = jst.JSONString(help='The typeface to set the text in (e.g., `"Helvetica Neue"`).')
    fontSize = jst.JSONNumber(help='The font size, in pixels.', minimum=0)
    fontStyle = FontStyle()
    fontWeight = jst.JSONAnyOf([FontWeight(), jst.JSONNumber(maximum=900, minimum=100)], help='The font weight (e.g., `"bold"`).')
    interpolate = Interpolate()
    limit = jst.JSONNumber(help='The maximum length of the text mark in pixels (default 0, [...]')
    opacity = jst.JSONNumber(help='The overall opacity (value between [0,1]). __Default value:__ [...]', maximum=1, minimum=0)
    orient = Orient()
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]', minimum=0)
    shape = jst.JSONString(help='The default symbol shape to use. One of: `"circle"` (default), [...]')
    size = jst.JSONNumber(help='The pixel area each the point/circle/square. For example: in the [...]', minimum=0)
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.', minimum=0)
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter [...]', maximum=1, minimum=0)
    text = jst.JSONString(help='Placeholder text if the `text` channel is not specified')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')

    def __init__(self, align=jst.undefined, angle=jst.undefined, baseline=jst.undefined, color=jst.undefined, dx=jst.undefined, dy=jst.undefined, fill=jst.undefined, fillOpacity=jst.undefined, filled=jst.undefined, font=jst.undefined, fontSize=jst.undefined, fontStyle=jst.undefined, fontWeight=jst.undefined, interpolate=jst.undefined, limit=jst.undefined, opacity=jst.undefined, orient=jst.undefined, radius=jst.undefined, shape=jst.undefined, size=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, strokeDashOffset=jst.undefined, strokeOpacity=jst.undefined, strokeWidth=jst.undefined, tension=jst.undefined, text=jst.undefined, theta=jst.undefined, **kwargs):
        kwds = dict(align=align, angle=angle, baseline=baseline, color=color, dx=dx, dy=dy, fill=fill, fillOpacity=fillOpacity, filled=filled, font=font, fontSize=fontSize, fontStyle=fontStyle, fontWeight=fontWeight, interpolate=interpolate, limit=limit, opacity=opacity, orient=orient, radius=radius, shape=shape, size=size, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth, tension=tension, text=text, theta=theta)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MarkConfig, self).__init__(**kwargs)


class MarkDef(jst.JSONHasTraits):
    """MarkDef class

    

    Attributes
    ----------
    align : string
        The horizontal alignment of the text. One of `"left"`,
        `"right"`, `"center"`.
    angle : number
        The rotation angle of the text, in degrees.
    baseline : string
        The vertical alignment of the text. One of `"top"`,
        `"middle"`, `"bottom"`.
        __Default value:__ `"middle"`
    clip : boolean
        Whether a mark be clipped to the enclosing group’s width and
        height.
    color : string
        Default color.  Note that `fill` and `stroke` have higher
        precedence than `color` and will override `color`.
        __Default value:__ <span style="color:
        #4682b4;">&#9632;</span> `"#4682b4"`
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        _angle_ property.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        _angle_ property.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    fillOpacity : number
        The fill opacity (value between [0,1]).
        __Default value:__ `1`
    filled : boolean
        Whether the mark's color should be used as fill color instead
        of stroke color.
        __Default value:__ `true` for all marks except `point` and
        `false` for `point`.
        __Applicable for:__ `bar`, `point`, `circle`, `square`, and
        `area` marks.
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    font : string
        The typeface to set the text in (e.g., `"Helvetica Neue"`).
    fontSize : number
        The font size, in pixels.
    fontStyle : string
        The font style (e.g., `"italic"`).
    fontWeight : AnyOf([string, number])
        The font weight (e.g., `"bold"`).
    interpolate : string
        The line interpolation method to use for line and area marks.
        One of the following:
        - `"linear"`: piecewise linear segments, as in a polyline.
        - `"linear-closed"`: close the linear segments to form a
          polygon.
        - `"step"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"step-before"`: alternate between vertical and horizontal
          segments, as in a step function.
        - `"step-after"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"basis"`: a B-spline, with control point duplication on
          the ends.
        - `"basis-open"`: an open B-spline; may not intersect the
          start or end.
        - `"basis-closed"`: a closed B-spline, as in a loop.
        - `"cardinal"`: a Cardinal spline, with control point
          duplication on the ends.
        - `"cardinal-open"`: an open Cardinal spline; may not
          intersect the start or end, but will intersect other control
          points.
        - `"cardinal-closed"`: a closed Cardinal spline, as in a
          loop.
        - `"bundle"`: equivalent to basis, except the tension
          parameter is used to straighten the spline.
        - `"monotone"`: cubic interpolation that preserves
          monotonicity in y.
    limit : number
        The maximum length of the text mark in pixels (default 0,
        indicating no limit). The text value will be automatically
        truncated if the rendered size exceeds the limit.
    opacity : number
        The overall opacity (value between [0,1]).
        __Default value:__ `0.7` for non-aggregate plots with `point`,
        `tick`, `circle`, or `square` marks or layered `bar` charts
        and `1` otherwise.
    orient : string
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the `x` and `y` properties.
    shape : string
        The default symbol shape to use. One of: `"circle"` (default),
        `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or
        `"triangle-down"`, or a custom SVG path.
        __Default value:__ `"circle"`
    size : number
        The pixel area each the point/circle/square.
        For example: in the case of circles, the radius is determined
        in part by the square root of the size value.
        __Default value:__ `30`
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    strokeDash : Array(number)
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
        __Default value:__ `1`
    strokeWidth : number
        The stroke width, in pixels.
    style : AnyOf([string, Array(string)])
        A string or array of strings indicating the name of custom
        styles to apply to the mark. A style is a named collection of
        mark property defaults defined within the [style
        configuration](mark.html#style-config). If style is an array,
        later styles will override earlier styles. Any [mark
        properties](encoding.html#mark-prop) explicitly defined within
        the `encoding` will override a style default.
        __Default value:__ The mark's name.  For example, a bar mark
        will have style `"bar"` by default.
        __Note:__ Any specified style will augment the default style.
        For example, a bar mark with `"style": "foo"` will receive
        from `config.style.bar` and `config.style.foo` (the specified
        style `"foo"` has higher precedence).
    tension : number
        Depending on the interpolation type, sets the tension
        parameter (for line and area marks).
    text : string
        Placeholder text if the `text` channel is not specified
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the `x` and `y` properties. Values for
        `theta` follow the same convention of `arc` mark `startAngle`
        and `endAngle` properties: angles are measured in radians,
        with `0` indicating "north".
    type : string
        The mark type.
        One of `"bar"`, `"circle"`, `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`.
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    align = HorizontalAlign()
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.', maximum=360, minimum=0)
    baseline = VerticalAlign()
    clip = jst.JSONBoolean(help='Whether a mark be clipped to the enclosing group’s width and height.')
    color = jst.JSONString(help='Default color. Note that `fill` and `stroke` have higher [...]')
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color [...]')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    filled = jst.JSONBoolean(help="Whether the mark's color should be used as fill color instead of [...]")
    font = jst.JSONString(help='The typeface to set the text in (e.g., `"Helvetica Neue"`).')
    fontSize = jst.JSONNumber(help='The font size, in pixels.', minimum=0)
    fontStyle = FontStyle()
    fontWeight = jst.JSONAnyOf([FontWeight(), jst.JSONNumber(maximum=900, minimum=100)], help='The font weight (e.g., `"bold"`).')
    interpolate = Interpolate()
    limit = jst.JSONNumber(help='The maximum length of the text mark in pixels (default 0, [...]')
    opacity = jst.JSONNumber(help='The overall opacity (value between [0,1]). __Default value:__ [...]', maximum=1, minimum=0)
    orient = Orient()
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]', minimum=0)
    shape = jst.JSONString(help='The default symbol shape to use. One of: `"circle"` (default), [...]')
    size = jst.JSONNumber(help='The pixel area each the point/circle/square. For example: in the [...]', minimum=0)
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.', minimum=0)
    style = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='A string or array of strings indicating the name of custom [...]')
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter [...]', maximum=1, minimum=0)
    text = jst.JSONString(help='Placeholder text if the `text` channel is not specified')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')
    type = Mark(help='All types of primitive marks.')

    def __init__(self, align=jst.undefined, angle=jst.undefined, baseline=jst.undefined, clip=jst.undefined, color=jst.undefined, dx=jst.undefined, dy=jst.undefined, fill=jst.undefined, fillOpacity=jst.undefined, filled=jst.undefined, font=jst.undefined, fontSize=jst.undefined, fontStyle=jst.undefined, fontWeight=jst.undefined, interpolate=jst.undefined, limit=jst.undefined, opacity=jst.undefined, orient=jst.undefined, radius=jst.undefined, shape=jst.undefined, size=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, strokeDashOffset=jst.undefined, strokeOpacity=jst.undefined, strokeWidth=jst.undefined, style=jst.undefined, tension=jst.undefined, text=jst.undefined, theta=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(align=align, angle=angle, baseline=baseline, clip=clip, color=color, dx=dx, dy=dy, fill=fill, fillOpacity=fillOpacity, filled=filled, font=font, fontSize=fontSize, fontStyle=fontStyle, fontWeight=fontWeight, interpolate=interpolate, limit=limit, opacity=opacity, orient=orient, radius=radius, shape=shape, size=size, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth, style=style, tension=tension, text=text, theta=theta, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MarkDef, self).__init__(**kwargs)


class MarkPropFieldDefWithCondition(jst.JSONHasTraits):
    """MarkPropFieldDefWithCondition class

    A FieldDef with Condition<ValueDef>
    {
       condition: {value: ...},
       field: ...,
       ...
    }

    Attributes
    ----------
    aggregate : string
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
        __Default value:__ `undefined` (None)
    bin : AnyOf([boolean, BinParams])
        A flag for binning a `quantitative` field, or [an object
        defining binning parameters](bin.html#params).
        If `true`, default [binning parameters](bin.html) will be
        applied.
        __Default value:__ `false`
    condition : AnyOf([Conditional_ValueDef, Array(Conditional_ValueDef)])
        One or more value definition(s) with a selection predicate.
        __Note:__ A field definition's `condition` property can only
        contain [value definitions](encoding.html#value-def)
        since Vega-Lite only allows at mosty  one encoded field per
        encoding channel.
    field : AnyOf([string, RepeatRef])
        __Required.__ A string defining the name of the field from
        which to pull a data value
        or an object defining iterated values from the
        [`repeat`](repeat.html) operator.
        __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to
        access nested objects (e.g., `"field": "foo.bar"` and
        `"field": "foo['bar']"`).
        If field names contain dots or brackets but are not nested,
        you can use `\\` to escape dots and brackets (e.g., `"a\\.b"`
        and `"a\\[0\\]"`).
        See more details about escaping in the [field
        documentation](field.html).
        __Note:__ `field` is not required if `aggregate` is `count`.
    legend : AnyOf([Legend, null])
        An object defining properties of the legend.
        If `null`, the legend for the encoding channel will be
        removed.
        __Default value:__ If undefined, default [legend
        properties](legend.html) are applied.
    scale : Scale
        An object defining properties of the channel's scale, which is
        the function that transforms values in the data domain
        (numbers, dates, strings, etc) to visual values (pixels,
        colors, sizes) of the encoding channels.
        __Default value:__ If undefined, default [scale
        properties](scale.html) are applied.
    sort : AnyOf([['string', 'null'], SortField, null])
        Sort order for the encoded field.
        Supported `sort` values include `"ascending"`, `"descending"`
        and `null` (no sorting).
        For fields with discrete domains, `sort` can also be a [sort
        field definition object](sort.html#sort-field).
        __Default value:__ `"ascending"`
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a
        temporal field.
        or [a temporal field that gets casted as
        ordinal](type.html#cast).
        __Default value:__ `undefined` (None)
    type : string
        The encoded field's type of measurement (`"quantitative"`,
        `"temporal"`, `"ordinal"`, or `"nominal"`).
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='A flag for binning a `quantitative` field, or [an object [...]')
    condition = jst.JSONAnyOf([jst.JSONInstance(_localname('Conditional_ValueDef')), jst.JSONArray(jst.JSONInstance(_localname('Conditional_ValueDef')))], help='One or more value definition(s) with a selection predicate. [...]')
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='__Required.__ A string defining the name of the field from which [...]')
    legend = jst.JSONAnyOf([jst.JSONInstance(_localname('Legend')), jst.JSONNull()], help='An object defining properties of the legend. If `null`, the [...]')
    scale = jst.JSONInstance(_localname('Scale'), help="An object defining properties of the channel's scale, which is [...]")
    sort = jst.JSONAnyOf([SortOrder(), jst.JSONInstance(_localname('SortField')), jst.JSONNull()], help='Sort order for the encoded field. Supported `sort` values [...]')
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])
    type = Type(help='Constants and utilities for data type Data type based on level [...]')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, condition=jst.undefined, field=jst.undefined, legend=jst.undefined, scale=jst.undefined, sort=jst.undefined, timeUnit=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, condition=condition, field=field, legend=legend, scale=scale, sort=sort, timeUnit=timeUnit, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MarkPropFieldDefWithCondition, self).__init__(**kwargs)


class MarkPropValueDefWithCondition(jst.JSONHasTraits):
    """MarkPropValueDefWithCondition class

    A ValueDef with Condition<ValueDef | FieldDef>
    {
       condition: {field: ...} | {value: ...},
       value: ...,
    }

    Attributes
    ----------
    condition : AnyOf([Conditional_MarkPropFieldDef, Conditional_ValueDef, Array(Conditional_ValueDef)])
        A field definition or one or more value definition(s) with a
        selection predicate.
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    condition = jst.JSONAnyOf([jst.JSONInstance(_localname('Conditional_MarkPropFieldDef')), jst.JSONInstance(_localname('Conditional_ValueDef')), jst.JSONArray(jst.JSONInstance(_localname('Conditional_ValueDef')))], help='A field definition or one or more value definition(s) with a [...]')
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')

    def __init__(self, condition=jst.undefined, value=jst.undefined, **kwargs):
        kwds = dict(condition=condition, value=value)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MarkPropValueDefWithCondition, self).__init__(**kwargs)


class MultiSelection(jst.JSONHasTraits):
    """MultiSelection class

    

    Attributes
    ----------
    empty : string
        By default, all data values are considered to lie within an
        empty selection.
        When set to `none`, empty selections contain no data values.
    encodings : Array(string)
        An array of encoding channels. The corresponding data field
        values
        must match for a data tuple to fall within the selection.
    fields : Array(string)
        An array of field names whose values must match for a data
        tuple to
        fall within the selection.
    nearest : boolean
        When true, an invisible voronoi diagram is computed to
        accelerate discrete
        selection. The data value _nearest_ the mouse cursor is added
        to the selection.
        See the [nearest transform](nearest.html) documentation for
        more information.
    on : any_object
        A [Vega event stream](https://vega.github.io/vega/docs/event-
        streams/) (object or selector) that triggers the selection.
        For interval selections, the event stream must specify a
        [start and end](https://vega.github.io/vega/docs/event-
        streams/#between-filters).
    resolve : string
        With layered and multi-view displays, a strategy that
        determines how
        selections' data queries are resolved when applied in a filter
        transform,
        conditional encoding rule, or scale domain.
    toggle : ['string', 'boolean']
        Controls whether data values should be toggled or only ever
        inserted into
        multi selections. Can be `true`, `false` (for insertion only),
        or a
        [Vega
        expression](https://vega.github.io/vega/docs/expressions/).
        __Default value:__ `true`, which corresponds to
        `event.shiftKey` (i.e.,
        data values are toggled when a user interacts with the shift-
        key pressed).
        See the [toggle transform](toggle.html) documentation for more
        information.
    type : string
        
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    empty = jst.JSONEnum(['all', 'none'], help='By default, all data values are considered to lie within an [...]')
    encodings = jst.JSONArray(SingleDefChannel(), help='An array of encoding channels. The corresponding data field [...]')
    fields = jst.JSONArray(jst.JSONString(), help='An array of field names whose values must match for a data tuple [...]')
    nearest = jst.JSONBoolean(help='When true, an invisible voronoi diagram is computed to [...]')
    on = jst.JSONAny()
    resolve = SelectionResolution()
    toggle = jst.JSONUnion([jst.JSONString(), jst.JSONBoolean()], help='Controls whether data values should be toggled or only ever [...]')
    type = jst.JSONEnum(['multi'])

    def __init__(self, empty=jst.undefined, encodings=jst.undefined, fields=jst.undefined, nearest=jst.undefined, on=jst.undefined, resolve=jst.undefined, toggle=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(empty=empty, encodings=encodings, fields=fields, nearest=nearest, on=on, resolve=resolve, toggle=toggle, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MultiSelection, self).__init__(**kwargs)


class MultiSelectionConfig(jst.JSONHasTraits):
    """MultiSelectionConfig class

    

    Attributes
    ----------
    empty : string
        By default, all data values are considered to lie within an
        empty selection.
        When set to `none`, empty selections contain no data values.
    encodings : Array(string)
        An array of encoding channels. The corresponding data field
        values
        must match for a data tuple to fall within the selection.
    fields : Array(string)
        An array of field names whose values must match for a data
        tuple to
        fall within the selection.
    nearest : boolean
        When true, an invisible voronoi diagram is computed to
        accelerate discrete
        selection. The data value _nearest_ the mouse cursor is added
        to the selection.
        See the [nearest transform](nearest.html) documentation for
        more information.
    on : any_object
        A [Vega event stream](https://vega.github.io/vega/docs/event-
        streams/) (object or selector) that triggers the selection.
        For interval selections, the event stream must specify a
        [start and end](https://vega.github.io/vega/docs/event-
        streams/#between-filters).
    resolve : string
        With layered and multi-view displays, a strategy that
        determines how
        selections' data queries are resolved when applied in a filter
        transform,
        conditional encoding rule, or scale domain.
    toggle : ['string', 'boolean']
        Controls whether data values should be toggled or only ever
        inserted into
        multi selections. Can be `true`, `false` (for insertion only),
        or a
        [Vega
        expression](https://vega.github.io/vega/docs/expressions/).
        __Default value:__ `true`, which corresponds to
        `event.shiftKey` (i.e.,
        data values are toggled when a user interacts with the shift-
        key pressed).
        See the [toggle transform](toggle.html) documentation for more
        information.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    empty = jst.JSONEnum(['all', 'none'], help='By default, all data values are considered to lie within an [...]')
    encodings = jst.JSONArray(SingleDefChannel(), help='An array of encoding channels. The corresponding data field [...]')
    fields = jst.JSONArray(jst.JSONString(), help='An array of field names whose values must match for a data tuple [...]')
    nearest = jst.JSONBoolean(help='When true, an invisible voronoi diagram is computed to [...]')
    on = jst.JSONAny()
    resolve = SelectionResolution()
    toggle = jst.JSONUnion([jst.JSONString(), jst.JSONBoolean()], help='Controls whether data values should be toggled or only ever [...]')

    def __init__(self, empty=jst.undefined, encodings=jst.undefined, fields=jst.undefined, nearest=jst.undefined, on=jst.undefined, resolve=jst.undefined, toggle=jst.undefined, **kwargs):
        kwds = dict(empty=empty, encodings=encodings, fields=fields, nearest=nearest, on=on, resolve=resolve, toggle=toggle)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(MultiSelectionConfig, self).__init__(**kwargs)


class NamedData(jst.JSONHasTraits):
    """NamedData class

    

    Attributes
    ----------
    format : DataFormat
        An object that specifies the format for parsing the data.
    name : string
        Provide a placeholder name and bind data at runtime.
    """
    _additional_traits = False
    _required_traits = ['name']
    _trait_name_map = {}
    format = jst.JSONInstance(_localname('DataFormat'), help='An object that specifies the format for parsing the data.')
    name = jst.JSONString(help='Provide a placeholder name and bind data at runtime.')

    def __init__(self, format=jst.undefined, name=jst.undefined, **kwargs):
        kwds = dict(format=format, name=name)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(NamedData, self).__init__(**kwargs)


class NotFilter(jst.JSONHasTraits):
    """NotFilter class

    

    Attributes
    ----------
    not_ : AnyOf([NotFilter, AndFilter, OrFilter, AnyOf([EqualFilter, RangeFilter, OneOfFilter, SelectionFilter, string])])
        
    """
    _additional_traits = False
    _required_traits = ['not']
    _trait_name_map = {'not_': 'not'}
    not_ = jst.JSONAnyOf([jst.JSONInstance(_localname('NotFilter')), jst.JSONInstance(_localname('AndFilter')), jst.JSONInstance(_localname('OrFilter')), jst.JSONAnyOf([jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter')), jst.JSONInstance(_localname('SelectionFilter')), jst.JSONString()])])

    def __init__(self, not_=jst.undefined, **kwargs):
        kwds = dict(not_=not_)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(NotFilter, self).__init__(**kwargs)


class OneOfFilter(jst.JSONHasTraits):
    """OneOfFilter class

    

    Attributes
    ----------
    field : string
        Field to be filtered
    oneOf : AnyOf([Array(string), Array(number), Array(boolean), Array(DateTime)])
        A set of values that the `field`'s value should be a member
        of,
        for a data item included in the filtered data.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        time unit for the field to be filtered.
    """
    _additional_traits = False
    _required_traits = ['field', 'oneOf']
    _trait_name_map = {}
    field = jst.JSONString(help='Field to be filtered')
    oneOf = jst.JSONAnyOf([jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONBoolean()), jst.JSONArray(jst.JSONInstance(_localname('DateTime')))], help="A set of values that the `field`'s value should be a member of, [...]")
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])

    def __init__(self, field=jst.undefined, oneOf=jst.undefined, timeUnit=jst.undefined, **kwargs):
        kwds = dict(field=field, oneOf=oneOf, timeUnit=timeUnit)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OneOfFilter, self).__init__(**kwargs)


class OrFilter(jst.JSONHasTraits):
    """OrFilter class

    

    Attributes
    ----------
    or_ : Array(AnyOf([NotFilter, AndFilter, OrFilter, AnyOf([EqualFilter, RangeFilter, OneOfFilter, SelectionFilter, string])]))
        
    """
    _additional_traits = False
    _required_traits = ['or']
    _trait_name_map = {'or_': 'or'}
    or_ = jst.JSONArray(jst.JSONAnyOf([jst.JSONInstance(_localname('NotFilter')), jst.JSONInstance(_localname('AndFilter')), jst.JSONInstance(_localname('OrFilter')), jst.JSONAnyOf([jst.JSONInstance(_localname('EqualFilter')), jst.JSONInstance(_localname('RangeFilter')), jst.JSONInstance(_localname('OneOfFilter')), jst.JSONInstance(_localname('SelectionFilter')), jst.JSONString()])]))

    def __init__(self, or_=jst.undefined, **kwargs):
        kwds = dict(or_=or_)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OrFilter, self).__init__(**kwargs)


class OrderFieldDef(jst.JSONHasTraits):
    """OrderFieldDef class

    

    Attributes
    ----------
    aggregate : string
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
        __Default value:__ `undefined` (None)
    bin : AnyOf([boolean, BinParams])
        A flag for binning a `quantitative` field, or [an object
        defining binning parameters](bin.html#params).
        If `true`, default [binning parameters](bin.html) will be
        applied.
        __Default value:__ `false`
    field : AnyOf([string, RepeatRef])
        __Required.__ A string defining the name of the field from
        which to pull a data value
        or an object defining iterated values from the
        [`repeat`](repeat.html) operator.
        __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to
        access nested objects (e.g., `"field": "foo.bar"` and
        `"field": "foo['bar']"`).
        If field names contain dots or brackets but are not nested,
        you can use `\\` to escape dots and brackets (e.g., `"a\\.b"`
        and `"a\\[0\\]"`).
        See more details about escaping in the [field
        documentation](field.html).
        __Note:__ `field` is not required if `aggregate` is `count`.
    sort : ['string', 'null']
        The sort order. One of `"ascending"` (default) or
        `"descending"`.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a
        temporal field.
        or [a temporal field that gets casted as
        ordinal](type.html#cast).
        __Default value:__ `undefined` (None)
    type : string
        The encoded field's type of measurement (`"quantitative"`,
        `"temporal"`, `"ordinal"`, or `"nominal"`).
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='A flag for binning a `quantitative` field, or [an object [...]')
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='__Required.__ A string defining the name of the field from which [...]')
    sort = SortOrder()
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])
    type = Type(help='Constants and utilities for data type Data type based on level [...]')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, field=jst.undefined, sort=jst.undefined, timeUnit=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, field=field, sort=sort, timeUnit=timeUnit, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(OrderFieldDef, self).__init__(**kwargs)


class PositionFieldDef(jst.JSONHasTraits):
    """PositionFieldDef class

    

    Attributes
    ----------
    aggregate : string
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
        __Default value:__ `undefined` (None)
    axis : AnyOf([Axis, null])
        An object defining properties of axis's gridlines, ticks and
        labels.
        If `null`, the axis for the encoding channel will be removed.
        __Default value:__ If undefined, default [axis
        properties](axis.html) are applied.
    bin : AnyOf([boolean, BinParams])
        A flag for binning a `quantitative` field, or [an object
        defining binning parameters](bin.html#params).
        If `true`, default [binning parameters](bin.html) will be
        applied.
        __Default value:__ `false`
    field : AnyOf([string, RepeatRef])
        __Required.__ A string defining the name of the field from
        which to pull a data value
        or an object defining iterated values from the
        [`repeat`](repeat.html) operator.
        __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to
        access nested objects (e.g., `"field": "foo.bar"` and
        `"field": "foo['bar']"`).
        If field names contain dots or brackets but are not nested,
        you can use `\\` to escape dots and brackets (e.g., `"a\\.b"`
        and `"a\\[0\\]"`).
        See more details about escaping in the [field
        documentation](field.html).
        __Note:__ `field` is not required if `aggregate` is `count`.
    scale : Scale
        An object defining properties of the channel's scale, which is
        the function that transforms values in the data domain
        (numbers, dates, strings, etc) to visual values (pixels,
        colors, sizes) of the encoding channels.
        __Default value:__ If undefined, default [scale
        properties](scale.html) are applied.
    sort : AnyOf([['string', 'null'], SortField, null])
        Sort order for the encoded field.
        Supported `sort` values include `"ascending"`, `"descending"`
        and `null` (no sorting).
        For fields with discrete domains, `sort` can also be a [sort
        field definition object](sort.html#sort-field).
        __Default value:__ `"ascending"`
    stack : AnyOf([string, null])
        Type of stacking offset if the field should be stacked.
        `stack` is only applicable for `x` and `y` channels with
        continuous domains.
        For example, `stack` of `y` can be used to customize stacking
        for a vertical bar chart.
        `stack` can be one of the following values:
        - `"zero"`: stacking with baseline offset at zero value of
          the scale (for creating typical stacked
          [bar](stack.html#bar) and [area](stack.html#area) chart).
        - `"normalize"` - stacking with normalized domain (for
          creating [normalized stacked bar and area
          charts](stack.html#normalized). <br/>
        -`"center"` - stacking with center baseline (for
          [streamgraph](stack.html#streamgraph)).
        - `null` - No-stacking. This will produce layered
          [bar](stack.html#layered-bar-chart) and area chart.
        __Default value:__ `zero` for plots with all of the following
        conditions are true:
        (1) the mark is `bar` or `area`;
        (2) the stacked measure channel (x or y) has a linear scale;
        (3) At least one of non-position channels mapped to an
        unaggregated field that is different from x and y.  Otherwise,
        `null` by default.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a
        temporal field.
        or [a temporal field that gets casted as
        ordinal](type.html#cast).
        __Default value:__ `undefined` (None)
    type : string
        The encoded field's type of measurement (`"quantitative"`,
        `"temporal"`, `"ordinal"`, or `"nominal"`).
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    aggregate = AggregateOp()
    axis = jst.JSONAnyOf([jst.JSONInstance(_localname('Axis')), jst.JSONNull()], help="An object defining properties of axis's gridlines, ticks and [...]")
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='A flag for binning a `quantitative` field, or [an object [...]')
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='__Required.__ A string defining the name of the field from which [...]')
    scale = jst.JSONInstance(_localname('Scale'), help="An object defining properties of the channel's scale, which is [...]")
    sort = jst.JSONAnyOf([SortOrder(), jst.JSONInstance(_localname('SortField')), jst.JSONNull()], help='Sort order for the encoded field. Supported `sort` values [...]')
    stack = jst.JSONAnyOf([StackOffset(), jst.JSONNull()], help='Type of stacking offset if the field should be stacked. `stack` [...]')
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])
    type = Type(help='Constants and utilities for data type Data type based on level [...]')

    def __init__(self, aggregate=jst.undefined, axis=jst.undefined, bin=jst.undefined, field=jst.undefined, scale=jst.undefined, sort=jst.undefined, stack=jst.undefined, timeUnit=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, axis=axis, bin=bin, field=field, scale=scale, sort=sort, stack=stack, timeUnit=timeUnit, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(PositionFieldDef, self).__init__(**kwargs)


class RangeConfig(jst.JSONHasTraits):
    """RangeConfig class

    

    Attributes
    ----------
    category : AnyOf([Array(string), VgScheme])
        Default range for _nominal_ (categorical) fields.
    diverging : AnyOf([Array(string), VgScheme])
        Default range for diverging _quantitative_ fields.
    heatmap : AnyOf([Array(string), VgScheme])
        Default range for _quantitative_ heatmaps.
    ordinal : AnyOf([Array(string), VgScheme])
        Default range for _ordinal_ fields.
    ramp : AnyOf([Array(string), VgScheme])
        Default range for _quantitative_ and _temporal_ fields.
    symbol : Array(string)
        Default range palette for the `shape` channel.
    """
    _additional_traits = [jst.JSONAnyOf([jst.JSONArray(jst.JSONUnion([jst.JSONNumber(), jst.JSONString()])), jst.JSONInstance(_localname('VgScheme')), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': ['step'], 'step': jst.JSONNumber()}))])]
    _required_traits = []
    _trait_name_map = {}
    category = jst.JSONAnyOf([jst.JSONArray(jst.JSONString()), jst.JSONInstance(_localname('VgScheme'))], help='Default range for _nominal_ (categorical) fields.')
    diverging = jst.JSONAnyOf([jst.JSONArray(jst.JSONString()), jst.JSONInstance(_localname('VgScheme'))], help='Default range for diverging _quantitative_ fields.')
    heatmap = jst.JSONAnyOf([jst.JSONArray(jst.JSONString()), jst.JSONInstance(_localname('VgScheme'))], help='Default range for _quantitative_ heatmaps.')
    ordinal = jst.JSONAnyOf([jst.JSONArray(jst.JSONString()), jst.JSONInstance(_localname('VgScheme'))], help='Default range for _ordinal_ fields.')
    ramp = jst.JSONAnyOf([jst.JSONArray(jst.JSONString()), jst.JSONInstance(_localname('VgScheme'))], help='Default range for _quantitative_ and _temporal_ fields.')
    symbol = jst.JSONArray(jst.JSONString(), help='Default range palette for the `shape` channel.')

    def __init__(self, category=jst.undefined, diverging=jst.undefined, heatmap=jst.undefined, ordinal=jst.undefined, ramp=jst.undefined, symbol=jst.undefined, **kwargs):
        kwds = dict(category=category, diverging=diverging, heatmap=heatmap, ordinal=ordinal, ramp=ramp, symbol=symbol)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(RangeConfig, self).__init__(**kwargs)


class RangeFilter(jst.JSONHasTraits):
    """RangeFilter class

    

    Attributes
    ----------
    field : string
        Field to be filtered
    range : Array(AnyOf([number, DateTime]))
        An array of inclusive minimum and maximum values
        for a field value of a data item to be included in the
        filtered data.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        time unit for the field to be filtered.
    """
    _additional_traits = False
    _required_traits = ['field', 'range']
    _trait_name_map = {}
    field = jst.JSONString(help='Field to be filtered')
    range = jst.JSONArray(jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(_localname('DateTime'))]), help='An array of inclusive minimum and maximum values for a field [...]', maxlen=2, minlen=2)
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])

    def __init__(self, field=jst.undefined, range=jst.undefined, timeUnit=jst.undefined, **kwargs):
        kwds = dict(field=field, range=range, timeUnit=timeUnit)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(RangeFilter, self).__init__(**kwargs)


class Repeat(jst.JSONHasTraits):
    """Repeat class

    

    Attributes
    ----------
    column : Array(string)
        Horizontal repeated views.
    row : Array(string)
        Vertical repeated views.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    column = jst.JSONArray(jst.JSONString(), help='Horizontal repeated views.')
    row = jst.JSONArray(jst.JSONString(), help='Vertical repeated views.')

    def __init__(self, column=jst.undefined, row=jst.undefined, **kwargs):
        kwds = dict(column=column, row=row)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Repeat, self).__init__(**kwargs)


class RepeatRef(jst.JSONHasTraits):
    """RepeatRef class

    Reference to a repeated value.

    Attributes
    ----------
    repeat : string
        
    """
    _additional_traits = False
    _required_traits = ['repeat']
    _trait_name_map = {}
    repeat = jst.JSONEnum(['row', 'column'])

    def __init__(self, repeat=jst.undefined, **kwargs):
        kwds = dict(repeat=repeat)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(RepeatRef, self).__init__(**kwargs)


class RepeatSpec(jst.JSONHasTraits):
    """RepeatSpec class

    

    Attributes
    ----------
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    name : string
        Name of the visualization for later reference.
    repeat : Repeat
        An object that describes what fields should be repeated into
        views that are laid out as a `row` or `column`.
    resolve : Resolve
        Scale and legend resolutions for repeated charts.
    spec : Spec
        
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    """
    _additional_traits = False
    _required_traits = ['repeat', 'spec']
    _trait_name_map = {}
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    repeat = jst.JSONInstance(_localname('Repeat'), help='An object that describes what fields should be repeated into [...]')
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale and legend resolutions for repeated charts.')
    spec = jst.JSONInstance(_localname('Spec'))
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')

    def __init__(self, data=jst.undefined, description=jst.undefined, name=jst.undefined, repeat=jst.undefined, resolve=jst.undefined, spec=jst.undefined, title=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(data=data, description=description, name=name, repeat=repeat, resolve=resolve, spec=spec, title=title, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(RepeatSpec, self).__init__(**kwargs)


class Resolve(jst.JSONHasTraits):
    """Resolve class

    Defines how scales, axes, and legends from different specs should
    be combined. Resolve is a mapping from `scale`, `axis`, and
    `legend` to a mapping from channels to resolutions.

    Attributes
    ----------
    axis : AxisResolveMap
        
    legend : LegendResolveMap
        
    scale : ScaleResolveMap
        
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    axis = jst.JSONInstance(_localname('AxisResolveMap'))
    legend = jst.JSONInstance(_localname('LegendResolveMap'))
    scale = jst.JSONInstance(_localname('ScaleResolveMap'))

    def __init__(self, axis=jst.undefined, legend=jst.undefined, scale=jst.undefined, **kwargs):
        kwds = dict(axis=axis, legend=legend, scale=scale)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Resolve, self).__init__(**kwargs)


class Scale(jst.JSONHasTraits):
    """Scale class

    

    Attributes
    ----------
    base : number
        The logarithm base of the `log` scale (default `10`).
    clamp : boolean
        If `true`, values that exceed the data domain are clamped to
        either the minimum or maximum range value
        __Default value:__ derived from the [scale
        config](config.html#scale-config)'s `clamp` (`true` by
        default).
    domain : AnyOf([Array(number), Array(string), Array(boolean), Array(DateTime), string, SelectionDomain])
        Customized domain values.
        For _quantitative_ fields, `domain` can take the form of a
        two-element array with minimum and maximum values.  [Piecewise
        scales](scale.html#piecewise) can be created by providing a
        `domain` with more than two entries.
        If the input field is aggregated, `domain` can also be a
        string value `"unaggregated"`, indicating that the domain
        should include the raw data values prior to the aggregation.
        For _temporal_ fields, `domain` can be a two-element array
        minimum and maximum values, in the form of either timestamps
        or the [DateTime definition objects](types.html#datetime).
        For _ordinal_ and _nominal_ fields, `domain` can be an array
        that lists valid input values.
        The `selection` property can be used to [interactively
        determine](selection.html#scale-domains) the scale domain.
    exponent : number
        The exponent of the `pow` scale.
    interpolate : AnyOf([string, InterpolateParams])
        The interpolation method for range values. By default, a
        general interpolator for numbers, dates, strings and colors
        (in RGB space) is used. For color ranges, this property allows
        interpolation in alternative color spaces. Legal values
        include `rgb`, `hsl`, `hsl-long`, `lab`, `hcl`, `hcl-long`,
        `cubehelix` and `cubehelix-long` ('-long' variants use longer
        paths in polar coordinate spaces). If object-valued, this
        property accepts an object with a string-valued _type_
        property and an optional numeric _gamma_ property applicable
        to rgb and cubehelix interpolators. For more, see the
        [d3-interpolate
        documentation](https://github.com/d3/d3-interpolate).
        __Note:__ Sequential scales do not support `interpolate` as
        they have a fixed interpolator.  Since Vega-Lite uses
        sequential scales for quantitative fields by default, you have
        to set the scale `type` to other quantitative scale type such
        as `"linear"` to customize `interpolate`.
    nice : AnyOf([boolean, number, string, Mapping])
        Extending the domain so that it starts and ends on nice round
        values. This method typically modifies the scale’s domain, and
        may only extend the bounds to the nearest round value. Nicing
        is useful if the domain is computed from data and may be
        irregular. For example, for a domain of _[0.201479…,
        0.996679…]_, a nice domain might be _[0.2, 1.0]_.
        For quantitative scales such as linear, `nice` can be either a
        boolean flag or a number. If `nice` is a number, it will
        represent a desired tick count. This allows greater control
        over the step size used to extend the bounds, guaranteeing
        that the returned ticks will exactly cover the domain.
        For temporal fields with time and utc scales, the `nice` value
        can be a string indicating the desired time interval. Legal
        values are `"millisecond"`, `"second"`, `"minute"`, `"hour"`,
        `"day"`, `"week"`, `"month"`, and `"year"`. Alternatively,
        `time` and `utc` scales can accept an object-valued interval
        specifier of the form `{"interval": "month", "step": 3}`,
        which includes a desired number of interval steps. Here, the
        domain would snap to quarter (Jan, Apr, Jul, Oct) boundaries.
        __Default value:__ `true` for unbinned _quantitative_ fields;
        `false` otherwise.
    padding : number
        For _[continuous](scale.html#continuous)_ scales, expands the
        scale domain to accommodate the specified number of pixels on
        each of the scale range. The scale range must represent pixels
        for this parameter to function as intended. Padding adjustment
        is performed prior to all other adjustments, including the
        effects of the zero, nice, domainMin,
        and domainMax properties.
        For _[band](scale.html#band)_ scales, shortcut for setting
        `paddingInner` and `paddingOuter` to the same value.
        For _[point](scale.html#point)_ scales, alias for
        `paddingOuter`.
        __Default value:__ For _continuous_ scales, derived from the
        [scale config](scale.html#config)'s `continuousPadding`.
        For _band and point_ scales, see `paddingInner` and
        `paddingOuter`.
    paddingInner : number
        The inner padding (spacing) within each band step of band
        scales, as a fraction of the step size. This value must lie in
        the range [0,1].
        For point scale, this property is invalid as point scales do
        not have internal band widths (only step sizes between bands).
        __Default value:__ derived from the [scale
        config](scale.html#config)'s `bandPaddingInner`.
    paddingOuter : number
        The outer padding (spacing) at the ends of the range of band
        and point scales,
        as a fraction of the step size. This value must lie in the
        range [0,1].
        __Default value:__ derived from the [scale
        config](scale.html#config)'s `bandPaddingOuter` for band
        scales and `pointPadding` for point scales.
    range : AnyOf([Array(number), Array(string), string])
        The range of the scale. One of:
        - A string indicating a [pre-defined named scale
          range](scale.html#range-config) (e.g., example, `"symbol"`,
          or `"diverging"`).
        - For [continuous scales](scale.html#continuous), two-
          element array indicating  minimum and maximum values, or an
          array with more than two entries for specifying a [piecewise
          scale](scale.html#piecewise).
        - For [discrete](scale.html#discrete) and
          [discretizing](scale.html#discretizing) scales, an array of
          desired output values.
        __Notes:__
        1) For [sequential](scale.html#sequential),
        [ordinal](scale.html#ordinal), and discretizing color scales,
        you can also specify a color [`scheme`](scale.html#scheme)
        instead of `range`.
        2) Any directly specified `range` for `x` and `y` channels
        will be ignored. Range can be customized via the view's
        corresponding [size](size.html) (`width` and `height`) or via
        [range steps and paddings properties](#range-step) for
        [band](#band) and [point](#point) scales.
    rangeStep : ['number', 'null']
        The distance between the starts of adjacent bands or points in
        [band](scale.html#band) and [point](scale.html#point) scales.
        If `rangeStep` is `null` or if the view contains the scale's
        corresponding [size](size.html) (`width` for `x` scales and
        `height` for `y` scales), `rangeStep` will be automatically
        determined to fit the size of the view.
        __Default value:__  derived the [scale
        config](config.html#scale-config)'s `textXRangeStep` (`90` by
        default) for x-scales of `text` marks and `rangeStep` (`21` by
        default) for x-scales of other marks and y-scales.
        __Warning__: If `rangeStep` is `null` and the cardinality of
        the scale's domain is higher than `width` or `height`, the
        rangeStep might become less than one pixel and the mark might
        not appear correctly.
    round : boolean
        If `true`, rounds numeric output values to integers. This can
        be helpful for snapping to the pixel grid.
        __Default value:__ `false`.
    scheme : AnyOf([string, SchemeParams])
        A string indicating a color [scheme](scale.html#scheme) name
        (e.g., `"category10"` or `"viridis"`) or a [scheme parameter
        object](scale.html#scheme-params).
        Discrete color schemes may be used with
        [discrete](scale.html#discrete) or
        [discretizing](scale.html#discretizing) scales. Continuous
        color schemes are intended for use with
        [sequential](scales.html#sequential) scales.
        For the full list of supported scheme, please refer to the
        [Vega
        Scheme](https://vega.github.io/vega/docs/schemes/#reference)
        reference.
    type : string
        The type of scale.  Vega-Lite supports the following
        categories of scale types:
        1) [**Continuous Scales**](scale.html#continuous) -- mapping
        continuous domains to continuous output ranges
        ([`"linear"`](scale.html#linear), [`"pow"`](scale.html#pow),
        [`"sqrt"`](scale.html#sqrt), [`"log"`](scale.html#log),
        [`"time"`](scale.html#time), [`"utc"`](scale.html#utc),
        [`"sequential"`](scale.html#sequential)).
        2) [**Discrete Scales**](scale.html#discrete) -- mapping
        discrete domains to discrete
        ([`"ordinal"`](scale.html#ordinal)) or continuous
        ([`"band"`](scale.html#band) and
        [`"point"`](scale.html#point)) output ranges.
        3) [**Discretizing Scales**](scale.html#discretizing) --
        mapping continuous domains to discrete output ranges ([`"bin-
        linear"`](scale.html#bin-linear) and [`"bin-
        ordinal"`](scale.html#bin-ordinal)).
        __Default value:__ please see the [scale type
        table](scale.html#type).
    zero : boolean
        If `true`, ensures that a zero baseline value is included in
        the scale domain.
        __Default value:__ `true` for x and y channels if the
        quantitative field is not binned and no custom `domain` is
        provided; `false` otherwise.
        __Note:__ Log, time, and utc scales do not support `zero`.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    base = jst.JSONNumber(help='The logarithm base of the `log` scale (default `10`).')
    clamp = jst.JSONBoolean(help='If `true`, values that exceed the data domain are clamped to [...]')
    domain = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONArray(jst.JSONBoolean()), jst.JSONArray(jst.JSONInstance(_localname('DateTime'))), jst.JSONEnum(['unaggregated']), jst.JSONInstance(_localname('SelectionDomain'))], help='Customized domain values. For _quantitative_ fields, `domain` [...]')
    exponent = jst.JSONNumber(help='The exponent of the `pow` scale.')
    interpolate = jst.JSONAnyOf([Interpolate(), jst.JSONInstance(_localname('InterpolateParams'))], help='The interpolation method for range values. By default, a general [...]')
    nice = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONNumber(), NiceTime(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': ['interval', 'step'], 'interval': jst.JSONString(), 'step': jst.JSONNumber()}))], help='Extending the domain so that it starts and ends on nice round [...]')
    padding = jst.JSONNumber(help='For _[continuous](scale.html#continuous)_ scales, expands the [...]', minimum=0)
    paddingInner = jst.JSONNumber(help='The inner padding (spacing) within each band step of band [...]', maximum=1, minimum=0)
    paddingOuter = jst.JSONNumber(help='The outer padding (spacing) at the ends of the range of band and [...]', maximum=1, minimum=0)
    range = jst.JSONAnyOf([jst.JSONArray(jst.JSONNumber()), jst.JSONArray(jst.JSONString()), jst.JSONString()], help='The range of the scale. One of: - A string indicating a [pre- [...]')
    rangeStep = jst.JSONNumber(allow_none=True, help='The distance between the starts of adjacent bands or points in [...]', minimum=0)
    round = jst.JSONBoolean(help='If `true`, rounds numeric output values to integers. This can be [...]')
    scheme = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('SchemeParams'))], help='A string indicating a color [scheme](scale.html#scheme) name [...]')
    type = ScaleType()
    zero = jst.JSONBoolean(help='If `true`, ensures that a zero baseline value is included in the [...]')

    def __init__(self, base=jst.undefined, clamp=jst.undefined, domain=jst.undefined, exponent=jst.undefined, interpolate=jst.undefined, nice=jst.undefined, padding=jst.undefined, paddingInner=jst.undefined, paddingOuter=jst.undefined, range=jst.undefined, rangeStep=jst.undefined, round=jst.undefined, scheme=jst.undefined, type=jst.undefined, zero=jst.undefined, **kwargs):
        kwds = dict(base=base, clamp=clamp, domain=domain, exponent=exponent, interpolate=interpolate, nice=nice, padding=padding, paddingInner=paddingInner, paddingOuter=paddingOuter, range=range, rangeStep=rangeStep, round=round, scheme=scheme, type=type, zero=zero)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(Scale, self).__init__(**kwargs)


class ScaleConfig(jst.JSONHasTraits):
    """ScaleConfig class

    

    Attributes
    ----------
    bandPaddingInner : number
        Default inner padding for `x` and `y` band-ordinal scales.
        __Default value:__ `0.1`
    bandPaddingOuter : number
        Default outer padding for `x` and `y` band-ordinal scales.
        If not specified, by default, band scale's paddingOuter is
        paddingInner/2.
    clamp : boolean
        If true, values that exceed the data domain are clamped to
        either the minimum or maximum range value
    continuousPadding : number
        Default padding for continuous scales.
        __Default:__ `5` for continuous x-scale of a vertical bar and
        continuous y-scale of a horizontal bar.; `0` otherwise.
    maxBandSize : number
        The default max value for mapping quantitative fields to bar's
        size/bandSize.
        If undefined (default), we will use the scale's `rangeStep` -
        1.
    maxFontSize : number
        The default max value for mapping quantitative fields to
        text's size/fontSize.
        __Default value:__ `40`
    maxOpacity : number
        Default max opacity for mapping a field to opacity.
        __Default value:__ `0.8`
    maxSize : number
        Default max value for point size scale.
    maxStrokeWidth : number
        Default max strokeWidth for strokeWidth  (or rule/line's size)
        scale.
        __Default value:__ `4`
    minBandSize : number
        The default min value for mapping quantitative fields to bar
        and tick's size/bandSize scale with zero=false.
        __Default value:__ `2`
    minFontSize : number
        The default min value for mapping quantitative fields to
        tick's size/fontSize scale with zero=false
        __Default value:__ `8`
    minOpacity : number
        Default minimum opacity for mapping a field to opacity.
        __Default value:__ `0.3`
    minSize : number
        Default minimum value for point size scale with zero=false.
        __Default value:__ `9`
    minStrokeWidth : number
        Default minimum strokeWidth for strokeWidth (or rule/line's
        size) scale with zero=false.
        __Default value:__ `1`
    pointPadding : number
        Default outer padding for `x` and `y` point-ordinal scales.
        __Default value:__ `0.5`
    rangeStep : ['number', 'null']
        Default range step for band and point scales of (1) the `y`
        channel
        and (2) the `x` channel when the mark is not `text`.
        __Default value:__ `21`
    round : boolean
        If true, rounds numeric output values to integers.
        This can be helpful for snapping to the pixel grid.
        (Only available for `x`, `y`, and `size` scales.)
    textXRangeStep : number
        Default range step for `x` band and point scales of text
        marks.
        __Default value:__ `90`
    useUnaggregatedDomain : boolean
        Use the source data range before aggregation as scale domain
        instead of aggregated data for aggregate axis.
        This is equivalent to setting `domain` to `"unaggregate"` for
        aggregated _quantitative_ fields by default.
        This property only works with aggregate functions that produce
        values within the raw data domain (`"mean"`, `"average"`,
        `"median"`, `"q1"`, `"q3"`, `"min"`, `"max"`). For other
        aggregations that produce values outside of the raw data
        domain (e.g. `"count"`, `"sum"`), this property is ignored.
        __Default value:__ `false`
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    bandPaddingInner = jst.JSONNumber(help='Default inner padding for `x` and `y` band-ordinal scales. [...]', maximum=1, minimum=0)
    bandPaddingOuter = jst.JSONNumber(help='Default outer padding for `x` and `y` band-ordinal scales. If [...]', maximum=1, minimum=0)
    clamp = jst.JSONBoolean(help='If true, values that exceed the data domain are clamped to [...]')
    continuousPadding = jst.JSONNumber(help='Default padding for continuous scales. __Default:__ `5` for [...]', minimum=0)
    maxBandSize = jst.JSONNumber(help="The default max value for mapping quantitative fields to bar's [...]", minimum=0)
    maxFontSize = jst.JSONNumber(help="The default max value for mapping quantitative fields to text's [...]", minimum=0)
    maxOpacity = jst.JSONNumber(help='Default max opacity for mapping a field to opacity. __Default [...]', maximum=1, minimum=0)
    maxSize = jst.JSONNumber(help='Default max value for point size scale.', minimum=0)
    maxStrokeWidth = jst.JSONNumber(help="Default max strokeWidth for strokeWidth (or rule/line's size) [...]", minimum=0)
    minBandSize = jst.JSONNumber(help='The default min value for mapping quantitative fields to bar and [...]', minimum=0)
    minFontSize = jst.JSONNumber(help="The default min value for mapping quantitative fields to tick's [...]", minimum=0)
    minOpacity = jst.JSONNumber(help='Default minimum opacity for mapping a field to opacity. [...]', maximum=1, minimum=0)
    minSize = jst.JSONNumber(help='Default minimum value for point size scale with zero=false. [...]', minimum=0)
    minStrokeWidth = jst.JSONNumber(help="Default minimum strokeWidth for strokeWidth (or rule/line's [...]", minimum=0)
    pointPadding = jst.JSONNumber(help='Default outer padding for `x` and `y` point-ordinal scales. [...]', maximum=1, minimum=0)
    rangeStep = jst.JSONNumber(allow_none=True, help='Default range step for band and point scales of (1) the `y` [...]', minimum=0)
    round = jst.JSONBoolean(help='If true, rounds numeric output values to integers. This can be [...]')
    textXRangeStep = jst.JSONNumber(help='Default range step for `x` band and point scales of text marks. [...]', minimum=0)
    useUnaggregatedDomain = jst.JSONBoolean(help='Use the source data range before aggregation as scale domain [...]')

    def __init__(self, bandPaddingInner=jst.undefined, bandPaddingOuter=jst.undefined, clamp=jst.undefined, continuousPadding=jst.undefined, maxBandSize=jst.undefined, maxFontSize=jst.undefined, maxOpacity=jst.undefined, maxSize=jst.undefined, maxStrokeWidth=jst.undefined, minBandSize=jst.undefined, minFontSize=jst.undefined, minOpacity=jst.undefined, minSize=jst.undefined, minStrokeWidth=jst.undefined, pointPadding=jst.undefined, rangeStep=jst.undefined, round=jst.undefined, textXRangeStep=jst.undefined, useUnaggregatedDomain=jst.undefined, **kwargs):
        kwds = dict(bandPaddingInner=bandPaddingInner, bandPaddingOuter=bandPaddingOuter, clamp=clamp, continuousPadding=continuousPadding, maxBandSize=maxBandSize, maxFontSize=maxFontSize, maxOpacity=maxOpacity, maxSize=maxSize, maxStrokeWidth=maxStrokeWidth, minBandSize=minBandSize, minFontSize=minFontSize, minOpacity=minOpacity, minSize=minSize, minStrokeWidth=minStrokeWidth, pointPadding=pointPadding, rangeStep=rangeStep, round=round, textXRangeStep=textXRangeStep, useUnaggregatedDomain=useUnaggregatedDomain)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ScaleConfig, self).__init__(**kwargs)


class ScaleResolveMap(jst.JSONHasTraits):
    """ScaleResolveMap class

    

    Attributes
    ----------
    color : string
        
    opacity : string
        
    shape : string
        
    size : string
        
    x : string
        
    y : string
        
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    color = ResolveMode()
    opacity = ResolveMode()
    shape = ResolveMode()
    size = ResolveMode()
    x = ResolveMode()
    y = ResolveMode()

    def __init__(self, color=jst.undefined, opacity=jst.undefined, shape=jst.undefined, size=jst.undefined, x=jst.undefined, y=jst.undefined, **kwargs):
        kwds = dict(color=color, opacity=opacity, shape=shape, size=size, x=x, y=y)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ScaleResolveMap, self).__init__(**kwargs)


class SchemeParams(jst.JSONHasTraits):
    """SchemeParams class

    

    Attributes
    ----------
    extent : Array(number)
        For sequential and diverging schemes only, determines the
        extent of the color range to use. For example `[0.2, 1]` will
        rescale the color scheme such that color values in the range
        _[0, 0.2)_ are excluded from the scheme.
    name : string
        A color scheme name for sequential/ordinal scales (e.g.,
        `"category10"` or `"viridis"`).
        For the full list of supported scheme, please refer to the
        [Vega
        Scheme](https://vega.github.io/vega/docs/schemes/#reference)
        reference.
    """
    _additional_traits = False
    _required_traits = ['name']
    _trait_name_map = {}
    extent = jst.JSONArray(jst.JSONNumber(), help='For sequential and diverging schemes only, determines the extent [...]')
    name = jst.JSONString(help='A color scheme name for sequential/ordinal scales (e.g., [...]')

    def __init__(self, extent=jst.undefined, name=jst.undefined, **kwargs):
        kwds = dict(extent=extent, name=name)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SchemeParams, self).__init__(**kwargs)


class SelectionAnd(jst.JSONHasTraits):
    """SelectionAnd class

    

    Attributes
    ----------
    and_ : Array(AnyOf([SelectionNot, SelectionAnd, SelectionOr, string]))
        
    """
    _additional_traits = False
    _required_traits = ['and']
    _trait_name_map = {'and_': 'and'}
    and_ = jst.JSONArray(jst.JSONAnyOf([jst.JSONInstance(_localname('SelectionNot')), jst.JSONInstance(_localname('SelectionAnd')), jst.JSONInstance(_localname('SelectionOr')), jst.JSONString()]))

    def __init__(self, and_=jst.undefined, **kwargs):
        kwds = dict(and_=and_)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SelectionAnd, self).__init__(**kwargs)


class SelectionConfig(jst.JSONHasTraits):
    """SelectionConfig class

    

    Attributes
    ----------
    interval : IntervalSelectionConfig
        The default definition for an
        [`interval`](selection.html#type) selection. All properties
        and transformations
        for an interval selection definition (except `type`) may be
        specified here.
        For instance, setting `interval` to `{"translate": false}`
        disables the ability to move
        interval selections by default.
    multi : MultiSelectionConfig
        The default definition for a [`multi`](selection.html#type)
        selection. All properties and transformations
        for a multi selection definition (except `type`) may be
        specified here.
        For instance, setting `multi` to `{"toggle": "event.altKey"}`
        adds additional values to
        multi selections when clicking with the alt-key pressed by
        default.
    single : SingleSelectionConfig
        The default definition for a [`single`](selection.html#type)
        selection. All properties and transformations
          for a single selection definition (except `type`) may be
        specified here.
        For instance, setting `single` to `{"on": "dblclick"}`
        populates single selections on double-click by default.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    interval = jst.JSONInstance(_localname('IntervalSelectionConfig'), help='The default definition for an [`interval`](selection.html#type) [...]')
    multi = jst.JSONInstance(_localname('MultiSelectionConfig'), help='The default definition for a [`multi`](selection.html#type) [...]')
    single = jst.JSONInstance(_localname('SingleSelectionConfig'), help='The default definition for a [`single`](selection.html#type) [...]')

    def __init__(self, interval=jst.undefined, multi=jst.undefined, single=jst.undefined, **kwargs):
        kwds = dict(interval=interval, multi=multi, single=single)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SelectionConfig, self).__init__(**kwargs)


class SelectionFilter(jst.JSONHasTraits):
    """SelectionFilter class

    

    Attributes
    ----------
    selection : AnyOf([SelectionNot, SelectionAnd, SelectionOr, string])
        Filter using a selection name.
    """
    _additional_traits = False
    _required_traits = ['selection']
    _trait_name_map = {}
    selection = jst.JSONAnyOf([jst.JSONInstance(_localname('SelectionNot')), jst.JSONInstance(_localname('SelectionAnd')), jst.JSONInstance(_localname('SelectionOr')), jst.JSONString()])

    def __init__(self, selection=jst.undefined, **kwargs):
        kwds = dict(selection=selection)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SelectionFilter, self).__init__(**kwargs)


class SelectionNot(jst.JSONHasTraits):
    """SelectionNot class

    

    Attributes
    ----------
    not_ : AnyOf([SelectionNot, SelectionAnd, SelectionOr, string])
        
    """
    _additional_traits = False
    _required_traits = ['not']
    _trait_name_map = {'not_': 'not'}
    not_ = jst.JSONAnyOf([jst.JSONInstance(_localname('SelectionNot')), jst.JSONInstance(_localname('SelectionAnd')), jst.JSONInstance(_localname('SelectionOr')), jst.JSONString()])

    def __init__(self, not_=jst.undefined, **kwargs):
        kwds = dict(not_=not_)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SelectionNot, self).__init__(**kwargs)


class SelectionOr(jst.JSONHasTraits):
    """SelectionOr class

    

    Attributes
    ----------
    or_ : Array(AnyOf([SelectionNot, SelectionAnd, SelectionOr, string]))
        
    """
    _additional_traits = False
    _required_traits = ['or']
    _trait_name_map = {'or_': 'or'}
    or_ = jst.JSONArray(jst.JSONAnyOf([jst.JSONInstance(_localname('SelectionNot')), jst.JSONInstance(_localname('SelectionAnd')), jst.JSONInstance(_localname('SelectionOr')), jst.JSONString()]))

    def __init__(self, or_=jst.undefined, **kwargs):
        kwds = dict(or_=or_)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SelectionOr, self).__init__(**kwargs)


class SingleSelection(jst.JSONHasTraits):
    """SingleSelection class

    

    Attributes
    ----------
    bind : AnyOf([VgBinding, Mapping])
        Establish a two-way binding between a single selection and
        input elements
        (also known as dynamic query widgets). A binding takes the
        form of
        Vega's [input element binding
        definition](https://vega.github.io/vega/docs/signals/#bind)
        or can be a mapping between projected field/encodings and
        binding definitions.
        See the [bind transform](bind.html) documentation for more
        information.
    empty : string
        By default, all data values are considered to lie within an
        empty selection.
        When set to `none`, empty selections contain no data values.
    encodings : Array(string)
        An array of encoding channels. The corresponding data field
        values
        must match for a data tuple to fall within the selection.
    fields : Array(string)
        An array of field names whose values must match for a data
        tuple to
        fall within the selection.
    nearest : boolean
        When true, an invisible voronoi diagram is computed to
        accelerate discrete
        selection. The data value _nearest_ the mouse cursor is added
        to the selection.
        See the [nearest transform](nearest.html) documentation for
        more information.
    on : any_object
        A [Vega event stream](https://vega.github.io/vega/docs/event-
        streams/) (object or selector) that triggers the selection.
        For interval selections, the event stream must specify a
        [start and end](https://vega.github.io/vega/docs/event-
        streams/#between-filters).
    resolve : string
        With layered and multi-view displays, a strategy that
        determines how
        selections' data queries are resolved when applied in a filter
        transform,
        conditional encoding rule, or scale domain.
    type : string
        
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    bind = jst.JSONAnyOf([jst.JSONInstance(_localname('VgBinding')), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': [jst.JSONInstance(_localname('VgBinding'))], '_required_traits': []}))], help='Establish a two-way binding between a single selection and input [...]')
    empty = jst.JSONEnum(['all', 'none'], help='By default, all data values are considered to lie within an [...]')
    encodings = jst.JSONArray(SingleDefChannel(), help='An array of encoding channels. The corresponding data field [...]')
    fields = jst.JSONArray(jst.JSONString(), help='An array of field names whose values must match for a data tuple [...]')
    nearest = jst.JSONBoolean(help='When true, an invisible voronoi diagram is computed to [...]')
    on = jst.JSONAny()
    resolve = SelectionResolution()
    type = jst.JSONEnum(['single'])

    def __init__(self, bind=jst.undefined, empty=jst.undefined, encodings=jst.undefined, fields=jst.undefined, nearest=jst.undefined, on=jst.undefined, resolve=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(bind=bind, empty=empty, encodings=encodings, fields=fields, nearest=nearest, on=on, resolve=resolve, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SingleSelection, self).__init__(**kwargs)


class SingleSelectionConfig(jst.JSONHasTraits):
    """SingleSelectionConfig class

    

    Attributes
    ----------
    bind : AnyOf([VgBinding, Mapping])
        Establish a two-way binding between a single selection and
        input elements
        (also known as dynamic query widgets). A binding takes the
        form of
        Vega's [input element binding
        definition](https://vega.github.io/vega/docs/signals/#bind)
        or can be a mapping between projected field/encodings and
        binding definitions.
        See the [bind transform](bind.html) documentation for more
        information.
    empty : string
        By default, all data values are considered to lie within an
        empty selection.
        When set to `none`, empty selections contain no data values.
    encodings : Array(string)
        An array of encoding channels. The corresponding data field
        values
        must match for a data tuple to fall within the selection.
    fields : Array(string)
        An array of field names whose values must match for a data
        tuple to
        fall within the selection.
    nearest : boolean
        When true, an invisible voronoi diagram is computed to
        accelerate discrete
        selection. The data value _nearest_ the mouse cursor is added
        to the selection.
        See the [nearest transform](nearest.html) documentation for
        more information.
    on : any_object
        A [Vega event stream](https://vega.github.io/vega/docs/event-
        streams/) (object or selector) that triggers the selection.
        For interval selections, the event stream must specify a
        [start and end](https://vega.github.io/vega/docs/event-
        streams/#between-filters).
    resolve : string
        With layered and multi-view displays, a strategy that
        determines how
        selections' data queries are resolved when applied in a filter
        transform,
        conditional encoding rule, or scale domain.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    bind = jst.JSONAnyOf([jst.JSONInstance(_localname('VgBinding')), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': [jst.JSONInstance(_localname('VgBinding'))], '_required_traits': []}))], help='Establish a two-way binding between a single selection and input [...]')
    empty = jst.JSONEnum(['all', 'none'], help='By default, all data values are considered to lie within an [...]')
    encodings = jst.JSONArray(SingleDefChannel(), help='An array of encoding channels. The corresponding data field [...]')
    fields = jst.JSONArray(jst.JSONString(), help='An array of field names whose values must match for a data tuple [...]')
    nearest = jst.JSONBoolean(help='When true, an invisible voronoi diagram is computed to [...]')
    on = jst.JSONAny()
    resolve = SelectionResolution()

    def __init__(self, bind=jst.undefined, empty=jst.undefined, encodings=jst.undefined, fields=jst.undefined, nearest=jst.undefined, on=jst.undefined, resolve=jst.undefined, **kwargs):
        kwds = dict(bind=bind, empty=empty, encodings=encodings, fields=fields, nearest=nearest, on=on, resolve=resolve)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SingleSelectionConfig, self).__init__(**kwargs)


class SortField(jst.JSONHasTraits):
    """SortField class

    

    Attributes
    ----------
    field : AnyOf([string, RepeatRef])
        The data [field](field.html) to sort by.
        __Default value:__ If unspecified, defaults to the field
        specified in the outer data reference.
    op : string
        An [aggregate operation](aggregate.html#ops) to perform on the
        field prior to sorting (e.g., `"count"`, `"mean"` and
        `"median"`).
        This property is required in cases where the sort field and
        the data reference field do not match.
        The input data objects will be aggregated, grouped by the
        encoded data field.
        For a full list of operations, please see the documentation
        for [aggregate](aggregate.html#ops).
    order : ['string', 'null']
        The sort order. One of `"ascending"` (default) or
        `"descending"`.
    """
    _additional_traits = False
    _required_traits = ['op']
    _trait_name_map = {}
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='The data [field](field.html) to sort by. __Default value:__ If [...]')
    op = AggregateOp()
    order = SortOrder()

    def __init__(self, field=jst.undefined, op=jst.undefined, order=jst.undefined, **kwargs):
        kwds = dict(field=field, op=op, order=order)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(SortField, self).__init__(**kwargs)


class StyleConfigIndex(jst.JSONHasTraits):
    """StyleConfigIndex class

    

    Attributes
    ----------
    """
    _additional_traits = [jst.JSONInstance(_localname('VgMarkConfig'))]
    _required_traits = []
    _trait_name_map = {}

    def __init__(self, **kwargs):
        kwds = dict()
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(StyleConfigIndex, self).__init__(**kwargs)


class TextConfig(jst.JSONHasTraits):
    """TextConfig class

    

    Attributes
    ----------
    align : string
        The horizontal alignment of the text. One of `"left"`,
        `"right"`, `"center"`.
    angle : number
        The rotation angle of the text, in degrees.
    baseline : string
        The vertical alignment of the text. One of `"top"`,
        `"middle"`, `"bottom"`.
        __Default value:__ `"middle"`
    color : string
        Default color.  Note that `fill` and `stroke` have higher
        precedence than `color` and will override `color`.
        __Default value:__ <span style="color:
        #4682b4;">&#9632;</span> `"#4682b4"`
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        _angle_ property.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        _angle_ property.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    fillOpacity : number
        The fill opacity (value between [0,1]).
        __Default value:__ `1`
    filled : boolean
        Whether the mark's color should be used as fill color instead
        of stroke color.
        __Default value:__ `true` for all marks except `point` and
        `false` for `point`.
        __Applicable for:__ `bar`, `point`, `circle`, `square`, and
        `area` marks.
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    font : string
        The typeface to set the text in (e.g., `"Helvetica Neue"`).
    fontSize : number
        The font size, in pixels.
    fontStyle : string
        The font style (e.g., `"italic"`).
    fontWeight : AnyOf([string, number])
        The font weight (e.g., `"bold"`).
    interpolate : string
        The line interpolation method to use for line and area marks.
        One of the following:
        - `"linear"`: piecewise linear segments, as in a polyline.
        - `"linear-closed"`: close the linear segments to form a
          polygon.
        - `"step"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"step-before"`: alternate between vertical and horizontal
          segments, as in a step function.
        - `"step-after"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"basis"`: a B-spline, with control point duplication on
          the ends.
        - `"basis-open"`: an open B-spline; may not intersect the
          start or end.
        - `"basis-closed"`: a closed B-spline, as in a loop.
        - `"cardinal"`: a Cardinal spline, with control point
          duplication on the ends.
        - `"cardinal-open"`: an open Cardinal spline; may not
          intersect the start or end, but will intersect other control
          points.
        - `"cardinal-closed"`: a closed Cardinal spline, as in a
          loop.
        - `"bundle"`: equivalent to basis, except the tension
          parameter is used to straighten the spline.
        - `"monotone"`: cubic interpolation that preserves
          monotonicity in y.
    limit : number
        The maximum length of the text mark in pixels (default 0,
        indicating no limit). The text value will be automatically
        truncated if the rendered size exceeds the limit.
    opacity : number
        The overall opacity (value between [0,1]).
        __Default value:__ `0.7` for non-aggregate plots with `point`,
        `tick`, `circle`, or `square` marks or layered `bar` charts
        and `1` otherwise.
    orient : string
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the `x` and `y` properties.
    shape : string
        The default symbol shape to use. One of: `"circle"` (default),
        `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or
        `"triangle-down"`, or a custom SVG path.
        __Default value:__ `"circle"`
    shortTimeLabels : boolean
        Whether month names and weekday names should be abbreviated.
    size : number
        The pixel area each the point/circle/square.
        For example: in the case of circles, the radius is determined
        in part by the square root of the size value.
        __Default value:__ `30`
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    strokeDash : Array(number)
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
        __Default value:__ `1`
    strokeWidth : number
        The stroke width, in pixels.
    tension : number
        Depending on the interpolation type, sets the tension
        parameter (for line and area marks).
    text : string
        Placeholder text if the `text` channel is not specified
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the `x` and `y` properties. Values for
        `theta` follow the same convention of `arc` mark `startAngle`
        and `endAngle` properties: angles are measured in radians,
        with `0` indicating "north".
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    align = HorizontalAlign()
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.', maximum=360, minimum=0)
    baseline = VerticalAlign()
    color = jst.JSONString(help='Default color. Note that `fill` and `stroke` have higher [...]')
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color [...]')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    filled = jst.JSONBoolean(help="Whether the mark's color should be used as fill color instead of [...]")
    font = jst.JSONString(help='The typeface to set the text in (e.g., `"Helvetica Neue"`).')
    fontSize = jst.JSONNumber(help='The font size, in pixels.', minimum=0)
    fontStyle = FontStyle()
    fontWeight = jst.JSONAnyOf([FontWeight(), jst.JSONNumber(maximum=900, minimum=100)], help='The font weight (e.g., `"bold"`).')
    interpolate = Interpolate()
    limit = jst.JSONNumber(help='The maximum length of the text mark in pixels (default 0, [...]')
    opacity = jst.JSONNumber(help='The overall opacity (value between [0,1]). __Default value:__ [...]', maximum=1, minimum=0)
    orient = Orient()
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]', minimum=0)
    shape = jst.JSONString(help='The default symbol shape to use. One of: `"circle"` (default), [...]')
    shortTimeLabels = jst.JSONBoolean(help='Whether month names and weekday names should be abbreviated.')
    size = jst.JSONNumber(help='The pixel area each the point/circle/square. For example: in the [...]', minimum=0)
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.', minimum=0)
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter [...]', maximum=1, minimum=0)
    text = jst.JSONString(help='Placeholder text if the `text` channel is not specified')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')

    def __init__(self, align=jst.undefined, angle=jst.undefined, baseline=jst.undefined, color=jst.undefined, dx=jst.undefined, dy=jst.undefined, fill=jst.undefined, fillOpacity=jst.undefined, filled=jst.undefined, font=jst.undefined, fontSize=jst.undefined, fontStyle=jst.undefined, fontWeight=jst.undefined, interpolate=jst.undefined, limit=jst.undefined, opacity=jst.undefined, orient=jst.undefined, radius=jst.undefined, shape=jst.undefined, shortTimeLabels=jst.undefined, size=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, strokeDashOffset=jst.undefined, strokeOpacity=jst.undefined, strokeWidth=jst.undefined, tension=jst.undefined, text=jst.undefined, theta=jst.undefined, **kwargs):
        kwds = dict(align=align, angle=angle, baseline=baseline, color=color, dx=dx, dy=dy, fill=fill, fillOpacity=fillOpacity, filled=filled, font=font, fontSize=fontSize, fontStyle=fontStyle, fontWeight=fontWeight, interpolate=interpolate, limit=limit, opacity=opacity, orient=orient, radius=radius, shape=shape, shortTimeLabels=shortTimeLabels, size=size, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth, tension=tension, text=text, theta=theta)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TextConfig, self).__init__(**kwargs)


class TextFieldDefWithCondition(jst.JSONHasTraits):
    """TextFieldDefWithCondition class

    A FieldDef with Condition<ValueDef>
    {
       condition: {value: ...},
       field: ...,
       ...
    }

    Attributes
    ----------
    aggregate : string
        Aggregation function for the field
        (e.g., `mean`, `sum`, `median`, `min`, `max`, `count`).
        __Default value:__ `undefined` (None)
    bin : AnyOf([boolean, BinParams])
        A flag for binning a `quantitative` field, or [an object
        defining binning parameters](bin.html#params).
        If `true`, default [binning parameters](bin.html) will be
        applied.
        __Default value:__ `false`
    condition : AnyOf([Conditional_ValueDef, Array(Conditional_ValueDef)])
        One or more value definition(s) with a selection predicate.
        __Note:__ A field definition's `condition` property can only
        contain [value definitions](encoding.html#value-def)
        since Vega-Lite only allows at mosty  one encoded field per
        encoding channel.
    field : AnyOf([string, RepeatRef])
        __Required.__ A string defining the name of the field from
        which to pull a data value
        or an object defining iterated values from the
        [`repeat`](repeat.html) operator.
        __Note:__ Dots (`.`) and brackets (`[` and `]`) can be used to
        access nested objects (e.g., `"field": "foo.bar"` and
        `"field": "foo['bar']"`).
        If field names contain dots or brackets but are not nested,
        you can use `\\` to escape dots and brackets (e.g., `"a\\.b"`
        and `"a\\[0\\]"`).
        See more details about escaping in the [field
        documentation](field.html).
        __Note:__ `field` is not required if `aggregate` is `count`.
    format : string
        The [formatting pattern](format.html) for a text field. If not
        defined, this will be determined automatically.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        Time unit (e.g., `year`, `yearmonth`, `month`, `hours`) for a
        temporal field.
        or [a temporal field that gets casted as
        ordinal](type.html#cast).
        __Default value:__ `undefined` (None)
    type : string
        The encoded field's type of measurement (`"quantitative"`,
        `"temporal"`, `"ordinal"`, or `"nominal"`).
    """
    _additional_traits = False
    _required_traits = ['type']
    _trait_name_map = {}
    aggregate = AggregateOp()
    bin = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONInstance(_localname('BinParams'))], help='A flag for binning a `quantitative` field, or [an object [...]')
    condition = jst.JSONAnyOf([jst.JSONInstance(_localname('Conditional_ValueDef')), jst.JSONArray(jst.JSONInstance(_localname('Conditional_ValueDef')))], help='One or more value definition(s) with a selection predicate. [...]')
    field = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('RepeatRef'))], help='__Required.__ A string defining the name of the field from which [...]')
    format = jst.JSONString(help='The [formatting pattern](format.html) for a text field. If not [...]')
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])
    type = Type(help='Constants and utilities for data type Data type based on level [...]')

    def __init__(self, aggregate=jst.undefined, bin=jst.undefined, condition=jst.undefined, field=jst.undefined, format=jst.undefined, timeUnit=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(aggregate=aggregate, bin=bin, condition=condition, field=field, format=format, timeUnit=timeUnit, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TextFieldDefWithCondition, self).__init__(**kwargs)


class TextValueDefWithCondition(jst.JSONHasTraits):
    """TextValueDefWithCondition class

    A ValueDef with Condition<ValueDef | FieldDef>
    {
       condition: {field: ...} | {value: ...},
       value: ...,
    }

    Attributes
    ----------
    condition : AnyOf([Conditional_TextFieldDef, Conditional_ValueDef, Array(Conditional_ValueDef)])
        A field definition or one or more value definition(s) with a
        selection predicate.
    value : ['number', 'string', 'boolean']
        A constant value in visual domain.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    condition = jst.JSONAnyOf([jst.JSONInstance(_localname('Conditional_TextFieldDef')), jst.JSONInstance(_localname('Conditional_ValueDef')), jst.JSONArray(jst.JSONInstance(_localname('Conditional_ValueDef')))], help='A field definition or one or more value definition(s) with a [...]')
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain.')

    def __init__(self, condition=jst.undefined, value=jst.undefined, **kwargs):
        kwds = dict(condition=condition, value=value)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TextValueDefWithCondition, self).__init__(**kwargs)


class TickConfig(jst.JSONHasTraits):
    """TickConfig class

    

    Attributes
    ----------
    align : string
        The horizontal alignment of the text. One of `"left"`,
        `"right"`, `"center"`.
    angle : number
        The rotation angle of the text, in degrees.
    bandSize : number
        The width of the ticks.
        __Default value:__  2/3 of rangeStep.
    baseline : string
        The vertical alignment of the text. One of `"top"`,
        `"middle"`, `"bottom"`.
        __Default value:__ `"middle"`
    color : string
        Default color.  Note that `fill` and `stroke` have higher
        precedence than `color` and will override `color`.
        __Default value:__ <span style="color:
        #4682b4;">&#9632;</span> `"#4682b4"`
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        _angle_ property.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        _angle_ property.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    fillOpacity : number
        The fill opacity (value between [0,1]).
        __Default value:__ `1`
    filled : boolean
        Whether the mark's color should be used as fill color instead
        of stroke color.
        __Default value:__ `true` for all marks except `point` and
        `false` for `point`.
        __Applicable for:__ `bar`, `point`, `circle`, `square`, and
        `area` marks.
        __Note:__ This property cannot be used in a [style
        config](mark.html#style-config).
    font : string
        The typeface to set the text in (e.g., `"Helvetica Neue"`).
    fontSize : number
        The font size, in pixels.
    fontStyle : string
        The font style (e.g., `"italic"`).
    fontWeight : AnyOf([string, number])
        The font weight (e.g., `"bold"`).
    interpolate : string
        The line interpolation method to use for line and area marks.
        One of the following:
        - `"linear"`: piecewise linear segments, as in a polyline.
        - `"linear-closed"`: close the linear segments to form a
          polygon.
        - `"step"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"step-before"`: alternate between vertical and horizontal
          segments, as in a step function.
        - `"step-after"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"basis"`: a B-spline, with control point duplication on
          the ends.
        - `"basis-open"`: an open B-spline; may not intersect the
          start or end.
        - `"basis-closed"`: a closed B-spline, as in a loop.
        - `"cardinal"`: a Cardinal spline, with control point
          duplication on the ends.
        - `"cardinal-open"`: an open Cardinal spline; may not
          intersect the start or end, but will intersect other control
          points.
        - `"cardinal-closed"`: a closed Cardinal spline, as in a
          loop.
        - `"bundle"`: equivalent to basis, except the tension
          parameter is used to straighten the spline.
        - `"monotone"`: cubic interpolation that preserves
          monotonicity in y.
    limit : number
        The maximum length of the text mark in pixels (default 0,
        indicating no limit). The text value will be automatically
        truncated if the rendered size exceeds the limit.
    opacity : number
        The overall opacity (value between [0,1]).
        __Default value:__ `0.7` for non-aggregate plots with `point`,
        `tick`, `circle`, or `square` marks or layered `bar` charts
        and `1` otherwise.
    orient : string
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the `x` and `y` properties.
    shape : string
        The default symbol shape to use. One of: `"circle"` (default),
        `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or
        `"triangle-down"`, or a custom SVG path.
        __Default value:__ `"circle"`
    size : number
        The pixel area each the point/circle/square.
        For example: in the case of circles, the radius is determined
        in part by the square root of the size value.
        __Default value:__ `30`
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    strokeDash : Array(number)
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
        __Default value:__ `1`
    strokeWidth : number
        The stroke width, in pixels.
    tension : number
        Depending on the interpolation type, sets the tension
        parameter (for line and area marks).
    text : string
        Placeholder text if the `text` channel is not specified
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the `x` and `y` properties. Values for
        `theta` follow the same convention of `arc` mark `startAngle`
        and `endAngle` properties: angles are measured in radians,
        with `0` indicating "north".
    thickness : number
        Thickness of the tick mark.
        __Default value:__  `1`
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    align = HorizontalAlign()
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.', maximum=360, minimum=0)
    bandSize = jst.JSONNumber(help='The width of the ticks. __Default value:__ 2/3 of rangeStep.', minimum=0)
    baseline = VerticalAlign()
    color = jst.JSONString(help='Default color. Note that `fill` and `stroke` have higher [...]')
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color [...]')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    filled = jst.JSONBoolean(help="Whether the mark's color should be used as fill color instead of [...]")
    font = jst.JSONString(help='The typeface to set the text in (e.g., `"Helvetica Neue"`).')
    fontSize = jst.JSONNumber(help='The font size, in pixels.', minimum=0)
    fontStyle = FontStyle()
    fontWeight = jst.JSONAnyOf([FontWeight(), jst.JSONNumber(maximum=900, minimum=100)], help='The font weight (e.g., `"bold"`).')
    interpolate = Interpolate()
    limit = jst.JSONNumber(help='The maximum length of the text mark in pixels (default 0, [...]')
    opacity = jst.JSONNumber(help='The overall opacity (value between [0,1]). __Default value:__ [...]', maximum=1, minimum=0)
    orient = Orient()
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]', minimum=0)
    shape = jst.JSONString(help='The default symbol shape to use. One of: `"circle"` (default), [...]')
    size = jst.JSONNumber(help='The pixel area each the point/circle/square. For example: in the [...]', minimum=0)
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.', minimum=0)
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter [...]', maximum=1, minimum=0)
    text = jst.JSONString(help='Placeholder text if the `text` channel is not specified')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')
    thickness = jst.JSONNumber(help='Thickness of the tick mark. __Default value:__ `1`', minimum=0)

    def __init__(self, align=jst.undefined, angle=jst.undefined, bandSize=jst.undefined, baseline=jst.undefined, color=jst.undefined, dx=jst.undefined, dy=jst.undefined, fill=jst.undefined, fillOpacity=jst.undefined, filled=jst.undefined, font=jst.undefined, fontSize=jst.undefined, fontStyle=jst.undefined, fontWeight=jst.undefined, interpolate=jst.undefined, limit=jst.undefined, opacity=jst.undefined, orient=jst.undefined, radius=jst.undefined, shape=jst.undefined, size=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, strokeDashOffset=jst.undefined, strokeOpacity=jst.undefined, strokeWidth=jst.undefined, tension=jst.undefined, text=jst.undefined, theta=jst.undefined, thickness=jst.undefined, **kwargs):
        kwds = dict(align=align, angle=angle, bandSize=bandSize, baseline=baseline, color=color, dx=dx, dy=dy, fill=fill, fillOpacity=fillOpacity, filled=filled, font=font, fontSize=fontSize, fontStyle=fontStyle, fontWeight=fontWeight, interpolate=interpolate, limit=limit, opacity=opacity, orient=orient, radius=radius, shape=shape, size=size, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth, tension=tension, text=text, theta=theta, thickness=thickness)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TickConfig, self).__init__(**kwargs)


class TimeUnitTransform(jst.JSONHasTraits):
    """TimeUnitTransform class

    

    Attributes
    ----------
    as_ : string
        The output field to write the timeUnit value.
    field : string
        The data field to apply time unit.
    timeUnit : AnyOf([AnyOf([string, string]), AnyOf([string, string])])
        The timeUnit.
    """
    _additional_traits = False
    _required_traits = ['timeUnit', 'field', 'as']
    _trait_name_map = {'as_': 'as'}
    as_ = jst.JSONString(help='The output field to write the timeUnit value.')
    field = jst.JSONString(help='The data field to apply time unit.')
    timeUnit = jst.JSONAnyOf([jst.JSONAnyOf([LocalSingleTimeUnit(), UtcSingleTimeUnit()]), jst.JSONAnyOf([LocalMultiTimeUnit(), UtcMultiTimeUnit()])])

    def __init__(self, as_=jst.undefined, field=jst.undefined, timeUnit=jst.undefined, **kwargs):
        kwds = dict(as_=as_, field=field, timeUnit=timeUnit)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TimeUnitTransform, self).__init__(**kwargs)


class TitleParams(jst.JSONHasTraits):
    """TitleParams class

    

    Attributes
    ----------
    anchor : string
        The anchor position for placing the title. One of `"start"`,
        `"middle"`, or `"end"`. For example, with an orientation of
        top these anchor positions map to a left-, center-, or right-
        aligned title.
        __Default value:__ `"middle"` for [single](spec.html) and
        [layered](layer.html) views.
        `"start"` for other composite views.
        __Note:__ [For now](https://github.com/vega/vega-
        lite/issues/2875), `anchor` is only customizable only for
        [single](spec.html) and [layered](layer.html) views.  For
        other composite views, `anchor` is always `"start"`.
    offset : number
        The orthogonal offset in pixels by which to displace the title
        from its position along the edge of the chart.
    orient : string
        The orientation of the title relative to the chart. One of
        `"top"` (the default), `"bottom"`, `"left"`, or `"right"`.
    style : AnyOf([string, Array(string)])
        A [mark style property](config.html#style) to apply to the
        title text mark.
        __Default value:__ `"group-title"`.
    text : string
        The title text.
    """
    _additional_traits = False
    _required_traits = ['text']
    _trait_name_map = {}
    anchor = Anchor()
    offset = jst.JSONNumber(help='The orthogonal offset in pixels by which to displace the title [...]')
    orient = TitleOrient()
    style = jst.JSONAnyOf([jst.JSONString(), jst.JSONArray(jst.JSONString())], help='A [mark style property](config.html#style) to apply to the title [...]')
    text = jst.JSONString(help='The title text.')

    def __init__(self, anchor=jst.undefined, offset=jst.undefined, orient=jst.undefined, style=jst.undefined, text=jst.undefined, **kwargs):
        kwds = dict(anchor=anchor, offset=offset, orient=orient, style=style, text=text)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TitleParams, self).__init__(**kwargs)


class TopLevel_FacetSpec(jst.JSONHasTraits):
    """TopLevel_FacetSpec class

    

    Attributes
    ----------
    schema : string
        URL to [JSON schema](http://json-schema.org/) for a Vega-Lite
        specification. Unless you have a reason to change this, use
        `https://vega.github.io/schema/vega-lite/v2.json`. Setting the
        `$schema` property allows automatic validation and
        autocomplete in editors that support JSON schema.
    autosize : AnyOf([string, AutoSizeParams])
        Sets how the visualization size should be determined. If a
        string, should be one of `"pad"`, `"fit"` or `"none"`.
        Object values can additionally specify parameters for content
        sizing and automatic resizing.
        `"fit"` is only supported for single and layered views that
        don't use `rangeStep`.
        __Default value__: `pad`
    background : string
        CSS color property to use as the background of visualization.
        __Default value:__ none (transparent)
    config : Config
        Vega-Lite configuration object.  This property can only be
        defined at the top-level of a specification.
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    facet : FacetMapping
        An object that describes mappings between `row` and `column`
        channels and their field definitions.
    name : string
        Name of the visualization for later reference.
    padding : AnyOf([number, Mapping])
        The default visualization padding, in pixels, from the edge of
        the visualization canvas to the data rectangle.  If a number,
        specifies padding for all sides.
        If an object, the value should have the format `{"left": 5,
        "top": 5, "right": 5, "bottom": 5}` to specify padding for
        each side of the visualization.
        __Default value__: `5`
    resolve : Resolve
        Scale, axis, and legend resolutions for facets.
    spec : AnyOf([LayerSpec, CompositeUnitSpec])
        A specification of the view that gets faceted.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    """
    _additional_traits = False
    _required_traits = ['facet', 'spec']
    _trait_name_map = {'schema': '$schema'}
    schema = jst.JSONString(help='URL to [JSON schema](http://json-schema.org/) for a Vega-Lite [...]')
    autosize = jst.JSONAnyOf([AutosizeType(), jst.JSONInstance(_localname('AutoSizeParams'))], help='Sets how the visualization size should be determined. If a [...]')
    background = jst.JSONString(help='CSS color property to use as the background of visualization. [...]')
    config = jst.JSONInstance(_localname('Config'), help='Vega-Lite configuration object. This property can only be [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    facet = jst.JSONInstance(_localname('FacetMapping'), help='An object that describes mappings between `row` and `column` [...]')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    padding = jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': [], 'bottom': jst.JSONNumber(), 'left': jst.JSONNumber(), 'right': jst.JSONNumber(), 'top': jst.JSONNumber()}))])
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale, axis, and legend resolutions for facets.')
    spec = jst.JSONAnyOf([jst.JSONInstance(_localname('LayerSpec')), jst.JSONInstance(_localname('CompositeUnitSpec'))], help='A specification of the view that gets faceted.')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')

    def __init__(self, schema=jst.undefined, autosize=jst.undefined, background=jst.undefined, config=jst.undefined, data=jst.undefined, description=jst.undefined, facet=jst.undefined, name=jst.undefined, padding=jst.undefined, resolve=jst.undefined, spec=jst.undefined, title=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(schema=schema, autosize=autosize, background=background, config=config, data=data, description=description, facet=facet, name=name, padding=padding, resolve=resolve, spec=spec, title=title, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TopLevel_FacetSpec, self).__init__(**kwargs)


class TopLevel_FacetedUnitSpec(jst.JSONHasTraits):
    """TopLevel_FacetedUnitSpec class

    

    Attributes
    ----------
    schema : string
        URL to [JSON schema](http://json-schema.org/) for a Vega-Lite
        specification. Unless you have a reason to change this, use
        `https://vega.github.io/schema/vega-lite/v2.json`. Setting the
        `$schema` property allows automatic validation and
        autocomplete in editors that support JSON schema.
    autosize : AnyOf([string, AutoSizeParams])
        Sets how the visualization size should be determined. If a
        string, should be one of `"pad"`, `"fit"` or `"none"`.
        Object values can additionally specify parameters for content
        sizing and automatic resizing.
        `"fit"` is only supported for single and layered views that
        don't use `rangeStep`.
        __Default value__: `pad`
    background : string
        CSS color property to use as the background of visualization.
        __Default value:__ none (transparent)
    config : Config
        Vega-Lite configuration object.  This property can only be
        defined at the top-level of a specification.
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    encoding : EncodingWithFacet
        A key-value mapping between encoding channels and definition
        of fields.
    height : number
        The height of a visualization.
        __Default value:__
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its y-channel has a [continuous
          scale](scale.html#continuous), the height will be the value
          of [`config.view.height`](spec.html#config).
        - For y-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the height is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          y-channel](scale.html#band). Otherwise, if the `rangeStep`
          is `null`, the height will be the value of
          [`config.view.height`](spec.html#config).
        - If no field is mapped to `y` channel, the `height` will be
          the value of `rangeStep`.
        __Note__: For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the height of
        a single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    mark : AnyOf([string, MarkDef])
        A string describing the mark type (one of `"bar"`, `"circle"`,
        `"square"`, `"tick"`, `"line"`,
        `"area"`, `"point"`, `"rule"`, and `"text"`) or a [mark
        definition object](mark.html#mark-def).
    name : string
        Name of the visualization for later reference.
    padding : AnyOf([number, Mapping])
        The default visualization padding, in pixels, from the edge of
        the visualization canvas to the data rectangle.  If a number,
        specifies padding for all sides.
        If an object, the value should have the format `{"left": 5,
        "top": 5, "right": 5, "bottom": 5}` to specify padding for
        each side of the visualization.
        __Default value__: `5`
    selection : Mapping
        A key-value mapping between selection names and definitions.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    width : number
        The width of a visualization.
        __Default value:__ This will be determined by the following
        rules:
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its x-channel has a [continuous
          scale](scale.html#continuous), the width will be the value
          of [`config.view.width`](spec.html#config).
        - For x-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the width is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          x-channel](scale.html#band).   Otherwise, if the `rangeStep`
          is `null`, the width will be the value of
          [`config.view.width`](spec.html#config).
        - If no field is mapped to `x` channel, the `width` will be
          the value of
          [`config.scale.textXRangeStep`](size.html#default-width-and-
          height) for `text` mark and the value of `rangeStep` for
          other marks.
        __Note:__ For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the width of a
        single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    """
    _additional_traits = False
    _required_traits = ['encoding', 'mark']
    _trait_name_map = {'schema': '$schema'}
    schema = jst.JSONString(help='URL to [JSON schema](http://json-schema.org/) for a Vega-Lite [...]')
    autosize = jst.JSONAnyOf([AutosizeType(), jst.JSONInstance(_localname('AutoSizeParams'))], help='Sets how the visualization size should be determined. If a [...]')
    background = jst.JSONString(help='CSS color property to use as the background of visualization. [...]')
    config = jst.JSONInstance(_localname('Config'), help='Vega-Lite configuration object. This property can only be [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    encoding = jst.JSONInstance(_localname('EncodingWithFacet'), help='A key-value mapping between encoding channels and definition of [...]')
    height = jst.JSONNumber(help="The height of a visualization. __Default value:__ - If a view's [...]")
    mark = jst.JSONAnyOf([Mark(help='All types of primitive marks.'), jst.JSONInstance(_localname('MarkDef'))])
    name = jst.JSONString(help='Name of the visualization for later reference.')
    padding = jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': [], 'bottom': jst.JSONNumber(), 'left': jst.JSONNumber(), 'right': jst.JSONNumber(), 'top': jst.JSONNumber()}))])
    selection = jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': [jst.JSONInstance(_localname('SelectionDef'))], '_required_traits': []}), help='A key-value mapping between selection names and definitions.')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')
    width = jst.JSONNumber(help='The width of a visualization. __Default value:__ This will be [...]')

    def __init__(self, schema=jst.undefined, autosize=jst.undefined, background=jst.undefined, config=jst.undefined, data=jst.undefined, description=jst.undefined, encoding=jst.undefined, height=jst.undefined, mark=jst.undefined, name=jst.undefined, padding=jst.undefined, selection=jst.undefined, title=jst.undefined, transform=jst.undefined, width=jst.undefined, **kwargs):
        kwds = dict(schema=schema, autosize=autosize, background=background, config=config, data=data, description=description, encoding=encoding, height=height, mark=mark, name=name, padding=padding, selection=selection, title=title, transform=transform, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TopLevel_FacetedUnitSpec, self).__init__(**kwargs)


class TopLevel_HConcatSpec(jst.JSONHasTraits):
    """TopLevel_HConcatSpec class

    

    Attributes
    ----------
    schema : string
        URL to [JSON schema](http://json-schema.org/) for a Vega-Lite
        specification. Unless you have a reason to change this, use
        `https://vega.github.io/schema/vega-lite/v2.json`. Setting the
        `$schema` property allows automatic validation and
        autocomplete in editors that support JSON schema.
    autosize : AnyOf([string, AutoSizeParams])
        Sets how the visualization size should be determined. If a
        string, should be one of `"pad"`, `"fit"` or `"none"`.
        Object values can additionally specify parameters for content
        sizing and automatic resizing.
        `"fit"` is only supported for single and layered views that
        don't use `rangeStep`.
        __Default value__: `pad`
    background : string
        CSS color property to use as the background of visualization.
        __Default value:__ none (transparent)
    config : Config
        Vega-Lite configuration object.  This property can only be
        defined at the top-level of a specification.
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    hconcat : Array(Spec)
        A list of views that should be concatenated and put into a
        row.
    name : string
        Name of the visualization for later reference.
    padding : AnyOf([number, Mapping])
        The default visualization padding, in pixels, from the edge of
        the visualization canvas to the data rectangle.  If a number,
        specifies padding for all sides.
        If an object, the value should have the format `{"left": 5,
        "top": 5, "right": 5, "bottom": 5}` to specify padding for
        each side of the visualization.
        __Default value__: `5`
    resolve : Resolve
        Scale, axis, and legend resolutions for horizontally
        concatenated charts.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    """
    _additional_traits = False
    _required_traits = ['hconcat']
    _trait_name_map = {'schema': '$schema'}
    schema = jst.JSONString(help='URL to [JSON schema](http://json-schema.org/) for a Vega-Lite [...]')
    autosize = jst.JSONAnyOf([AutosizeType(), jst.JSONInstance(_localname('AutoSizeParams'))], help='Sets how the visualization size should be determined. If a [...]')
    background = jst.JSONString(help='CSS color property to use as the background of visualization. [...]')
    config = jst.JSONInstance(_localname('Config'), help='Vega-Lite configuration object. This property can only be [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    hconcat = jst.JSONArray(jst.JSONInstance(_localname('Spec')), help='A list of views that should be concatenated and put into a row.')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    padding = jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': [], 'bottom': jst.JSONNumber(), 'left': jst.JSONNumber(), 'right': jst.JSONNumber(), 'top': jst.JSONNumber()}))])
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale, axis, and legend resolutions for horizontally [...]')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')

    def __init__(self, schema=jst.undefined, autosize=jst.undefined, background=jst.undefined, config=jst.undefined, data=jst.undefined, description=jst.undefined, hconcat=jst.undefined, name=jst.undefined, padding=jst.undefined, resolve=jst.undefined, title=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(schema=schema, autosize=autosize, background=background, config=config, data=data, description=description, hconcat=hconcat, name=name, padding=padding, resolve=resolve, title=title, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TopLevel_HConcatSpec, self).__init__(**kwargs)


class TopLevel_LayerSpec(jst.JSONHasTraits):
    """TopLevel_LayerSpec class

    

    Attributes
    ----------
    schema : string
        URL to [JSON schema](http://json-schema.org/) for a Vega-Lite
        specification. Unless you have a reason to change this, use
        `https://vega.github.io/schema/vega-lite/v2.json`. Setting the
        `$schema` property allows automatic validation and
        autocomplete in editors that support JSON schema.
    autosize : AnyOf([string, AutoSizeParams])
        Sets how the visualization size should be determined. If a
        string, should be one of `"pad"`, `"fit"` or `"none"`.
        Object values can additionally specify parameters for content
        sizing and automatic resizing.
        `"fit"` is only supported for single and layered views that
        don't use `rangeStep`.
        __Default value__: `pad`
    background : string
        CSS color property to use as the background of visualization.
        __Default value:__ none (transparent)
    config : Config
        Vega-Lite configuration object.  This property can only be
        defined at the top-level of a specification.
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    height : number
        The height of a visualization.
        __Default value:__
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its y-channel has a [continuous
          scale](scale.html#continuous), the height will be the value
          of [`config.view.height`](spec.html#config).
        - For y-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the height is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          y-channel](scale.html#band). Otherwise, if the `rangeStep`
          is `null`, the height will be the value of
          [`config.view.height`](spec.html#config).
        - If no field is mapped to `y` channel, the `height` will be
          the value of `rangeStep`.
        __Note__: For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the height of
        a single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    layer : Array(AnyOf([LayerSpec, CompositeUnitSpec]))
        Layer or single view specifications to be layered.
        __Note__: Specifications inside `layer` cannot use `row` and
        `column` channels as layering facet specifications is not
        allowed.
    name : string
        Name of the visualization for later reference.
    padding : AnyOf([number, Mapping])
        The default visualization padding, in pixels, from the edge of
        the visualization canvas to the data rectangle.  If a number,
        specifies padding for all sides.
        If an object, the value should have the format `{"left": 5,
        "top": 5, "right": 5, "bottom": 5}` to specify padding for
        each side of the visualization.
        __Default value__: `5`
    resolve : Resolve
        Scale, axis, and legend resolutions for layers.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    width : number
        The width of a visualization.
        __Default value:__ This will be determined by the following
        rules:
        - If a view's [`autosize`](size.html#autosize) type is
          `"fit"` or its x-channel has a [continuous
          scale](scale.html#continuous), the width will be the value
          of [`config.view.width`](spec.html#config).
        - For x-axis with a band or point scale: if
          [`rangeStep`](scale.html#band) is a numeric value or
          unspecified, the width is [determined by the range step,
          paddings, and the cardinality of the field mapped to
          x-channel](scale.html#band).   Otherwise, if the `rangeStep`
          is `null`, the width will be the value of
          [`config.view.width`](spec.html#config).
        - If no field is mapped to `x` channel, the `width` will be
          the value of
          [`config.scale.textXRangeStep`](size.html#default-width-and-
          height) for `text` mark and the value of `rangeStep` for
          other marks.
        __Note:__ For plots with [`row` and `column`
        channels](encoding.html#facet), this represents the width of a
        single view.
        __See also:__ The documentation for [width and
        height](size.html) contains more examples.
    """
    _additional_traits = False
    _required_traits = ['layer']
    _trait_name_map = {'schema': '$schema'}
    schema = jst.JSONString(help='URL to [JSON schema](http://json-schema.org/) for a Vega-Lite [...]')
    autosize = jst.JSONAnyOf([AutosizeType(), jst.JSONInstance(_localname('AutoSizeParams'))], help='Sets how the visualization size should be determined. If a [...]')
    background = jst.JSONString(help='CSS color property to use as the background of visualization. [...]')
    config = jst.JSONInstance(_localname('Config'), help='Vega-Lite configuration object. This property can only be [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    height = jst.JSONNumber(help="The height of a visualization. __Default value:__ - If a view's [...]")
    layer = jst.JSONArray(jst.JSONAnyOf([jst.JSONInstance(_localname('LayerSpec')), jst.JSONInstance(_localname('CompositeUnitSpec'))]), help='Layer or single view specifications to be layered. __Note__: [...]')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    padding = jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': [], 'bottom': jst.JSONNumber(), 'left': jst.JSONNumber(), 'right': jst.JSONNumber(), 'top': jst.JSONNumber()}))])
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale, axis, and legend resolutions for layers.')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')
    width = jst.JSONNumber(help='The width of a visualization. __Default value:__ This will be [...]')

    def __init__(self, schema=jst.undefined, autosize=jst.undefined, background=jst.undefined, config=jst.undefined, data=jst.undefined, description=jst.undefined, height=jst.undefined, layer=jst.undefined, name=jst.undefined, padding=jst.undefined, resolve=jst.undefined, title=jst.undefined, transform=jst.undefined, width=jst.undefined, **kwargs):
        kwds = dict(schema=schema, autosize=autosize, background=background, config=config, data=data, description=description, height=height, layer=layer, name=name, padding=padding, resolve=resolve, title=title, transform=transform, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TopLevel_LayerSpec, self).__init__(**kwargs)


class TopLevel_RepeatSpec(jst.JSONHasTraits):
    """TopLevel_RepeatSpec class

    

    Attributes
    ----------
    schema : string
        URL to [JSON schema](http://json-schema.org/) for a Vega-Lite
        specification. Unless you have a reason to change this, use
        `https://vega.github.io/schema/vega-lite/v2.json`. Setting the
        `$schema` property allows automatic validation and
        autocomplete in editors that support JSON schema.
    autosize : AnyOf([string, AutoSizeParams])
        Sets how the visualization size should be determined. If a
        string, should be one of `"pad"`, `"fit"` or `"none"`.
        Object values can additionally specify parameters for content
        sizing and automatic resizing.
        `"fit"` is only supported for single and layered views that
        don't use `rangeStep`.
        __Default value__: `pad`
    background : string
        CSS color property to use as the background of visualization.
        __Default value:__ none (transparent)
    config : Config
        Vega-Lite configuration object.  This property can only be
        defined at the top-level of a specification.
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    name : string
        Name of the visualization for later reference.
    padding : AnyOf([number, Mapping])
        The default visualization padding, in pixels, from the edge of
        the visualization canvas to the data rectangle.  If a number,
        specifies padding for all sides.
        If an object, the value should have the format `{"left": 5,
        "top": 5, "right": 5, "bottom": 5}` to specify padding for
        each side of the visualization.
        __Default value__: `5`
    repeat : Repeat
        An object that describes what fields should be repeated into
        views that are laid out as a `row` or `column`.
    resolve : Resolve
        Scale and legend resolutions for repeated charts.
    spec : Spec
        
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    """
    _additional_traits = False
    _required_traits = ['repeat', 'spec']
    _trait_name_map = {'schema': '$schema'}
    schema = jst.JSONString(help='URL to [JSON schema](http://json-schema.org/) for a Vega-Lite [...]')
    autosize = jst.JSONAnyOf([AutosizeType(), jst.JSONInstance(_localname('AutoSizeParams'))], help='Sets how the visualization size should be determined. If a [...]')
    background = jst.JSONString(help='CSS color property to use as the background of visualization. [...]')
    config = jst.JSONInstance(_localname('Config'), help='Vega-Lite configuration object. This property can only be [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    padding = jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': [], 'bottom': jst.JSONNumber(), 'left': jst.JSONNumber(), 'right': jst.JSONNumber(), 'top': jst.JSONNumber()}))])
    repeat = jst.JSONInstance(_localname('Repeat'), help='An object that describes what fields should be repeated into [...]')
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale and legend resolutions for repeated charts.')
    spec = jst.JSONInstance(_localname('Spec'))
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')

    def __init__(self, schema=jst.undefined, autosize=jst.undefined, background=jst.undefined, config=jst.undefined, data=jst.undefined, description=jst.undefined, name=jst.undefined, padding=jst.undefined, repeat=jst.undefined, resolve=jst.undefined, spec=jst.undefined, title=jst.undefined, transform=jst.undefined, **kwargs):
        kwds = dict(schema=schema, autosize=autosize, background=background, config=config, data=data, description=description, name=name, padding=padding, repeat=repeat, resolve=resolve, spec=spec, title=title, transform=transform)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TopLevel_RepeatSpec, self).__init__(**kwargs)


class TopLevel_VConcatSpec(jst.JSONHasTraits):
    """TopLevel_VConcatSpec class

    

    Attributes
    ----------
    schema : string
        URL to [JSON schema](http://json-schema.org/) for a Vega-Lite
        specification. Unless you have a reason to change this, use
        `https://vega.github.io/schema/vega-lite/v2.json`. Setting the
        `$schema` property allows automatic validation and
        autocomplete in editors that support JSON schema.
    autosize : AnyOf([string, AutoSizeParams])
        Sets how the visualization size should be determined. If a
        string, should be one of `"pad"`, `"fit"` or `"none"`.
        Object values can additionally specify parameters for content
        sizing and automatic resizing.
        `"fit"` is only supported for single and layered views that
        don't use `rangeStep`.
        __Default value__: `pad`
    background : string
        CSS color property to use as the background of visualization.
        __Default value:__ none (transparent)
    config : Config
        Vega-Lite configuration object.  This property can only be
        defined at the top-level of a specification.
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    name : string
        Name of the visualization for later reference.
    padding : AnyOf([number, Mapping])
        The default visualization padding, in pixels, from the edge of
        the visualization canvas to the data rectangle.  If a number,
        specifies padding for all sides.
        If an object, the value should have the format `{"left": 5,
        "top": 5, "right": 5, "bottom": 5}` to specify padding for
        each side of the visualization.
        __Default value__: `5`
    resolve : Resolve
        Scale, axis, and legend resolutions for vertically
        concatenated charts.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    vconcat : Array(Spec)
        A list of views that should be concatenated and put into a
        column.
    """
    _additional_traits = False
    _required_traits = ['vconcat']
    _trait_name_map = {'schema': '$schema'}
    schema = jst.JSONString(help='URL to [JSON schema](http://json-schema.org/) for a Vega-Lite [...]')
    autosize = jst.JSONAnyOf([AutosizeType(), jst.JSONInstance(_localname('AutoSizeParams'))], help='Sets how the visualization size should be determined. If a [...]')
    background = jst.JSONString(help='CSS color property to use as the background of visualization. [...]')
    config = jst.JSONInstance(_localname('Config'), help='Vega-Lite configuration object. This property can only be [...]')
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    padding = jst.JSONAnyOf([jst.JSONNumber(), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': False, '_required_traits': [], 'bottom': jst.JSONNumber(), 'left': jst.JSONNumber(), 'right': jst.JSONNumber(), 'top': jst.JSONNumber()}))])
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale, axis, and legend resolutions for vertically concatenated [...]')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')
    vconcat = jst.JSONArray(jst.JSONInstance(_localname('Spec')), help='A list of views that should be concatenated and put into a column.')

    def __init__(self, schema=jst.undefined, autosize=jst.undefined, background=jst.undefined, config=jst.undefined, data=jst.undefined, description=jst.undefined, name=jst.undefined, padding=jst.undefined, resolve=jst.undefined, title=jst.undefined, transform=jst.undefined, vconcat=jst.undefined, **kwargs):
        kwds = dict(schema=schema, autosize=autosize, background=background, config=config, data=data, description=description, name=name, padding=padding, resolve=resolve, title=title, transform=transform, vconcat=vconcat)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TopLevel_VConcatSpec, self).__init__(**kwargs)


class TopoDataFormat(jst.JSONHasTraits):
    """TopoDataFormat class

    

    Attributes
    ----------
    feature : string
        The name of the TopoJSON object set to convert to a GeoJSON
        feature collection.
        For example, in a map of the world, there may be an object set
        named `"countries"`.
        Using the feature property, we can extract this set and
        generate a GeoJSON feature object for each country.
    mesh : string
        The name of the TopoJSON object set to convert to mesh.
        Similar to the `feature` option, `mesh` extracts a named
        TopoJSON object set.
          Unlike the `feature` option, the corresponding geo data is
        returned as a single, unified mesh instance, not as individual
        GeoJSON features.
        Extracting a mesh is useful for more efficiently drawing
        borders or other geographic elements that you do not need to
        associate with specific regions such as individual countries,
        states or counties.
    parse : AnyOf([string, Mapping])
        If set to auto (the default), perform automatic type inference
        to determine the desired data types.
        Alternatively, a parsing directive object can be provided for
        explicit data types. Each property of the object corresponds
        to a field name, and the value to the desired data type (one
        of `"number"`, `"boolean"` or `"date"`).
        For example, `"parse": {"modified_on": "date"}` parses the
        `modified_on` field in each input record a Date value.
        For `"date"`, we parse data based using Javascript's
        [`Date.parse()`](https://developer.mozilla.org/en-
        US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
        For Specific date formats can be provided (e.g., `{foo:
        'date:"%m%d%Y"'}`), using the [d3-time-format
        syntax](https://github.com/d3/d3-time-format#locale_format).
        UTC date format parsing is supported similarly (e.g., `{foo:
        'utc:"%m%d%Y"'}`). See more about [UTC
        time](timeunit.html#utc)
    type : string
        Type of input data: `"json"`, `"csv"`, `"tsv"`.
        The default format type is determined by the extension of the
        file URL.
        If no extension is detected, `"json"` will be used by default.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    feature = jst.JSONString(help='The name of the TopoJSON object set to convert to a GeoJSON [...]')
    mesh = jst.JSONString(help='The name of the TopoJSON object set to convert to mesh. Similar [...]')
    parse = jst.JSONAnyOf([jst.JSONEnum(['auto']), jst.JSONInstance(T.MetaHasTraits('Mapping', (jst.JSONHasTraits,), {'_additional_traits': True, '_required_traits': []}))], help='If set to auto (the default), perform automatic type inference [...]')
    type = jst.JSONEnum(['topojson'], help='Type of input data: `"json"`, `"csv"`, `"tsv"`. The default [...]')

    def __init__(self, feature=jst.undefined, mesh=jst.undefined, parse=jst.undefined, type=jst.undefined, **kwargs):
        kwds = dict(feature=feature, mesh=mesh, parse=parse, type=type)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(TopoDataFormat, self).__init__(**kwargs)


class UrlData(jst.JSONHasTraits):
    """UrlData class

    

    Attributes
    ----------
    format : DataFormat
        An object that specifies the format for parsing the data file.
    url : string
        An URL from which to load the data set. Use the `format.type`
        property
        to ensure the loaded data is correctly parsed.
    """
    _additional_traits = False
    _required_traits = ['url']
    _trait_name_map = {}
    format = jst.JSONInstance(_localname('DataFormat'), help='An object that specifies the format for parsing the data file.')
    url = jst.JSONString(help='An URL from which to load the data set. Use the `format.type` [...]')

    def __init__(self, format=jst.undefined, url=jst.undefined, **kwargs):
        kwds = dict(format=format, url=url)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(UrlData, self).__init__(**kwargs)


class VConcatSpec(jst.JSONHasTraits):
    """VConcatSpec class

    

    Attributes
    ----------
    data : Data
        An object describing the data source
    description : string
        Description of this mark for commenting purpose.
    name : string
        Name of the visualization for later reference.
    resolve : Resolve
        Scale, axis, and legend resolutions for vertically
        concatenated charts.
    title : AnyOf([string, TitleParams])
        Title for the plot.
    transform : Array(Transform)
        An array of data transformations such as filter and new field
        calculation.
    vconcat : Array(Spec)
        A list of views that should be concatenated and put into a
        column.
    """
    _additional_traits = False
    _required_traits = ['vconcat']
    _trait_name_map = {}
    data = jst.JSONInstance(_localname('Data'), help='An object describing the data source')
    description = jst.JSONString(help='Description of this mark for commenting purpose.')
    name = jst.JSONString(help='Name of the visualization for later reference.')
    resolve = jst.JSONInstance(_localname('Resolve'), help='Scale, axis, and legend resolutions for vertically concatenated [...]')
    title = jst.JSONAnyOf([jst.JSONString(), jst.JSONInstance(_localname('TitleParams'))], help='Title for the plot.')
    transform = jst.JSONArray(jst.JSONInstance(_localname('Transform')), help='An array of data transformations such as filter and new field [...]')
    vconcat = jst.JSONArray(jst.JSONInstance(_localname('Spec')), help='A list of views that should be concatenated and put into a column.')

    def __init__(self, data=jst.undefined, description=jst.undefined, name=jst.undefined, resolve=jst.undefined, title=jst.undefined, transform=jst.undefined, vconcat=jst.undefined, **kwargs):
        kwds = dict(data=data, description=description, name=name, resolve=resolve, title=title, transform=transform, vconcat=vconcat)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VConcatSpec, self).__init__(**kwargs)


class ValueDef(jst.JSONHasTraits):
    """ValueDef class

    Definition object for a constant value of an encoding channel.

    Attributes
    ----------
    value : ['number', 'string', 'boolean']
        A constant value in visual domain (e.g., `"red"` / "#0099ff"
        for color, values between `0` to `1` for opacity).
    """
    _additional_traits = False
    _required_traits = ['value']
    _trait_name_map = {}
    value = jst.JSONUnion([jst.JSONNumber(), jst.JSONString(), jst.JSONBoolean()], help='A constant value in visual domain (e.g., `"red"` / "#0099ff" for [...]')

    def __init__(self, value=jst.undefined, **kwargs):
        kwds = dict(value=value)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ValueDef, self).__init__(**kwargs)


class VgAxisConfig(jst.JSONHasTraits):
    """VgAxisConfig class

    

    Attributes
    ----------
    bandPosition : number
        An interpolation fraction indicating where, for `band` scales,
        axis ticks should be positioned. A value of `0` places ticks
        at the left edge of their bands. A value of `0.5` places ticks
        in the middle of their bands.
    domain : boolean
        A boolean flag indicating if the domain (the axis baseline)
        should be included as part of the axis.
        __Default value:__ `true`
    domainColor : string
        Color of axis domain line.
        __Default value:__  (none, using Vega default).
    domainWidth : number
        Stroke width of axis domain line
        __Default value:__  (none, using Vega default).
    grid : boolean
        A boolean flag indicating if grid lines should be included as
        part of the axis
        __Default value:__ `true` for [continuous
        scales](scale.html#continuous) that are not binned; otherwise,
        `false`.
    gridColor : string
        Color of gridlines.
    gridDash : Array(number)
        The offset (in pixels) into which to begin drawing with the
        grid dash array.
    gridOpacity : number
        The stroke opacity of grid (value between [0,1])
        __Default value:__ (`1` by default)
    gridWidth : number
        The grid width, in pixels.
    labelAngle : number
        The rotation angle of the axis labels.
        __Default value:__ `-90` for nominal and ordinal fields; `0`
        otherwise.
    labelBound : ['boolean', 'number']
        Indicates if labels should be hidden if they exceed the axis
        range. If `false `(the default) no bounds overlap analysis is
        performed. If `true`, labels will be hidden if they exceed the
        axis range by more than 1 pixel. If this property is a number,
        it specifies the pixel tolerance: the maximum amount by which
        a label bounding box may exceed the axis range.
        __Default value:__ `false`.
    labelColor : string
        The color of the tick label, can be in hex color code or
        regular color name.
    labelFlush : ['boolean', 'number']
        Indicates if the first and last axis labels should be aligned
        flush with the scale range. Flush alignment for a horizontal
        axis will left-align the first label and right-align the last
        label. For vertical axes, bottom and top text baselines are
        applied instead. If this property is a number, it also
        indicates the number of pixels by which to offset the first
        and last labels; for example, a value of 2 will flush-align
        the first and last labels and also push them 2 pixels outward
        from the center of the axis. The additional adjustment can
        sometimes help the labels better visually group with
        corresponding axis ticks.
        __Default value:__ `true` for axis of a continuous x-scale.
        Otherwise, `false`.
    labelFont : string
        The font of the tick label.
    labelFontSize : number
        The font size of the label, in pixels.
    labelLimit : number
        Maximum allowed pixel width of axis tick labels.
    labelOverlap : AnyOf([boolean, string, string])
        The strategy to use for resolving overlap of axis labels. If
        `false` (the default), no overlap reduction is attempted. If
        set to `true` or `"parity"`, a strategy of removing every
        other label is used (this works well for standard linear
        axes). If set to `"greedy"`, a linear scan of the labels is
        performed, removing any labels that overlaps with the last
        visible label (this often works better for log-scaled axes).
        __Default value:__ `true` for non-nominal fields with non-log
        scales; `"greedy"` for log scales; otherwise `false`.
    labelPadding : number
        The padding, in pixels, between axis and text labels.
    labels : boolean
        A boolean flag indicating if labels should be included as part
        of the axis.
        __Default value:__  `true`.
    maxExtent : number
        The maximum extent in pixels that axis ticks and labels should
        use. This determines a maximum offset value for axis titles.
        __Default value:__ `undefined`.
    minExtent : number
        The minimum extent in pixels that axis ticks and labels should
        use. This determines a minimum offset value for axis titles.
        __Default value:__ `30` for y-axis; `undefined` for x-axis.
    tickColor : string
        The color of the axis's tick.
    tickRound : boolean
        Boolean flag indicating if pixel position values should be
        rounded to the nearest integer.
    tickSize : number
        The size in pixels of axis ticks.
    tickWidth : number
        The width, in pixels, of ticks.
    ticks : boolean
        Boolean value that determines whether the axis should include
        ticks.
    titleAlign : string
        Horizontal text alignment of axis titles.
    titleAngle : number
        Angle in degrees of axis titles.
    titleBaseline : string
        Vertical text baseline for axis titles.
    titleColor : string
        Color of the title, can be in hex color code or regular color
        name.
    titleFont : string
        Font of the title. (e.g., `"Helvetica Neue"`).
    titleFontSize : number
        Font size of the title.
    titleFontWeight : ['string', 'number']
        Font weight of the title. (e.g., `"bold"`).
    titleLimit : number
        Maximum allowed pixel width of axis titles.
    titleMaxLength : number
        Max length for axis title if the title is automatically
        generated from the field's description.
    titlePadding : number
        The padding, in pixels, between title and axis.
    titleX : number
        X-coordinate of the axis title relative to the axis group.
    titleY : number
        Y-coordinate of the axis title relative to the axis group.
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    bandPosition = jst.JSONNumber(help='An interpolation fraction indicating where, for `band` scales, [...]')
    domain = jst.JSONBoolean(help='A boolean flag indicating if the domain (the axis baseline) [...]')
    domainColor = jst.JSONString(help='Color of axis domain line. __Default value:__ (none, using Vega [...]')
    domainWidth = jst.JSONNumber(help='Stroke width of axis domain line __Default value:__ (none, using [...]')
    grid = jst.JSONBoolean(help='A boolean flag indicating if grid lines should be included as [...]')
    gridColor = jst.JSONString(help='Color of gridlines.')
    gridDash = jst.JSONArray(jst.JSONNumber(), help='The offset (in pixels) into which to begin drawing with the grid [...]')
    gridOpacity = jst.JSONNumber(help='The stroke opacity of grid (value between [0,1]) __Default [...]', maximum=1, minimum=0)
    gridWidth = jst.JSONNumber(help='The grid width, in pixels.', minimum=0)
    labelAngle = jst.JSONNumber(help='The rotation angle of the axis labels. __Default value:__ `-90` [...]', maximum=360, minimum=-360)
    labelBound = jst.JSONUnion([jst.JSONBoolean(), jst.JSONNumber()], help='Indicates if labels should be hidden if they exceed the axis [...]')
    labelColor = jst.JSONString(help='The color of the tick label, can be in hex color code or regular [...]')
    labelFlush = jst.JSONUnion([jst.JSONBoolean(), jst.JSONNumber()], help='Indicates if the first and last axis labels should be aligned [...]')
    labelFont = jst.JSONString(help='The font of the tick label.')
    labelFontSize = jst.JSONNumber(help='The font size of the label, in pixels.', minimum=0)
    labelLimit = jst.JSONNumber(help='Maximum allowed pixel width of axis tick labels.')
    labelOverlap = jst.JSONAnyOf([jst.JSONBoolean(), jst.JSONEnum(['parity']), jst.JSONEnum(['greedy'])], help='The strategy to use for resolving overlap of axis labels. If [...]')
    labelPadding = jst.JSONNumber(help='The padding, in pixels, between axis and text labels.')
    labels = jst.JSONBoolean(help='A boolean flag indicating if labels should be included as part [...]')
    maxExtent = jst.JSONNumber(help='The maximum extent in pixels that axis ticks and labels should [...]')
    minExtent = jst.JSONNumber(help='The minimum extent in pixels that axis ticks and labels should [...]')
    tickColor = jst.JSONString(help="The color of the axis's tick.")
    tickRound = jst.JSONBoolean(help='Boolean flag indicating if pixel position values should be [...]')
    tickSize = jst.JSONNumber(help='The size in pixels of axis ticks.', minimum=0)
    tickWidth = jst.JSONNumber(help='The width, in pixels, of ticks.', minimum=0)
    ticks = jst.JSONBoolean(help='Boolean value that determines whether the axis should include ticks.')
    titleAlign = jst.JSONString(help='Horizontal text alignment of axis titles.')
    titleAngle = jst.JSONNumber(help='Angle in degrees of axis titles.')
    titleBaseline = jst.JSONString(help='Vertical text baseline for axis titles.')
    titleColor = jst.JSONString(help='Color of the title, can be in hex color code or regular color name.')
    titleFont = jst.JSONString(help='Font of the title. (e.g., `"Helvetica Neue"`).')
    titleFontSize = jst.JSONNumber(help='Font size of the title.', minimum=0)
    titleFontWeight = jst.JSONUnion([jst.JSONString(), jst.JSONNumber()], help='Font weight of the title. (e.g., `"bold"`).')
    titleLimit = jst.JSONNumber(help='Maximum allowed pixel width of axis titles.')
    titleMaxLength = jst.JSONNumber(help='Max length for axis title if the title is automatically [...]')
    titlePadding = jst.JSONNumber(help='The padding, in pixels, between title and axis.')
    titleX = jst.JSONNumber(help='X-coordinate of the axis title relative to the axis group.')
    titleY = jst.JSONNumber(help='Y-coordinate of the axis title relative to the axis group.')

    def __init__(self, bandPosition=jst.undefined, domain=jst.undefined, domainColor=jst.undefined, domainWidth=jst.undefined, grid=jst.undefined, gridColor=jst.undefined, gridDash=jst.undefined, gridOpacity=jst.undefined, gridWidth=jst.undefined, labelAngle=jst.undefined, labelBound=jst.undefined, labelColor=jst.undefined, labelFlush=jst.undefined, labelFont=jst.undefined, labelFontSize=jst.undefined, labelLimit=jst.undefined, labelOverlap=jst.undefined, labelPadding=jst.undefined, labels=jst.undefined, maxExtent=jst.undefined, minExtent=jst.undefined, tickColor=jst.undefined, tickRound=jst.undefined, tickSize=jst.undefined, tickWidth=jst.undefined, ticks=jst.undefined, titleAlign=jst.undefined, titleAngle=jst.undefined, titleBaseline=jst.undefined, titleColor=jst.undefined, titleFont=jst.undefined, titleFontSize=jst.undefined, titleFontWeight=jst.undefined, titleLimit=jst.undefined, titleMaxLength=jst.undefined, titlePadding=jst.undefined, titleX=jst.undefined, titleY=jst.undefined, **kwargs):
        kwds = dict(bandPosition=bandPosition, domain=domain, domainColor=domainColor, domainWidth=domainWidth, grid=grid, gridColor=gridColor, gridDash=gridDash, gridOpacity=gridOpacity, gridWidth=gridWidth, labelAngle=labelAngle, labelBound=labelBound, labelColor=labelColor, labelFlush=labelFlush, labelFont=labelFont, labelFontSize=labelFontSize, labelLimit=labelLimit, labelOverlap=labelOverlap, labelPadding=labelPadding, labels=labels, maxExtent=maxExtent, minExtent=minExtent, tickColor=tickColor, tickRound=tickRound, tickSize=tickSize, tickWidth=tickWidth, ticks=ticks, titleAlign=titleAlign, titleAngle=titleAngle, titleBaseline=titleBaseline, titleColor=titleColor, titleFont=titleFont, titleFontSize=titleFontSize, titleFontWeight=titleFontWeight, titleLimit=titleLimit, titleMaxLength=titleMaxLength, titlePadding=titlePadding, titleX=titleX, titleY=titleY)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgAxisConfig, self).__init__(**kwargs)


class VgCheckboxBinding(jst.JSONHasTraits):
    """VgCheckboxBinding class

    

    Attributes
    ----------
    element : string
        
    input : string
        
    """
    _additional_traits = False
    _required_traits = ['input']
    _trait_name_map = {}
    element = jst.JSONString()
    input = jst.JSONEnum(['checkbox'])

    def __init__(self, element=jst.undefined, input=jst.undefined, **kwargs):
        kwds = dict(element=element, input=input)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgCheckboxBinding, self).__init__(**kwargs)


class VgGenericBinding(jst.JSONHasTraits):
    """VgGenericBinding class

    

    Attributes
    ----------
    element : string
        
    input : string
        
    """
    _additional_traits = False
    _required_traits = ['input']
    _trait_name_map = {}
    element = jst.JSONString()
    input = jst.JSONString()

    def __init__(self, element=jst.undefined, input=jst.undefined, **kwargs):
        kwds = dict(element=element, input=input)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgGenericBinding, self).__init__(**kwargs)


class VgMarkConfig(jst.JSONHasTraits):
    """VgMarkConfig class

    

    Attributes
    ----------
    align : string
        The horizontal alignment of the text. One of `"left"`,
        `"right"`, `"center"`.
    angle : number
        The rotation angle of the text, in degrees.
    baseline : string
        The vertical alignment of the text. One of `"top"`,
        `"middle"`, `"bottom"`.
        __Default value:__ `"middle"`
    dx : number
        The horizontal offset, in pixels, between the text label and
        its anchor point. The offset is applied after rotation by the
        _angle_ property.
    dy : number
        The vertical offset, in pixels, between the text label and its
        anchor point. The offset is applied after rotation by the
        _angle_ property.
    fill : string
        Default Fill Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    fillOpacity : number
        The fill opacity (value between [0,1]).
        __Default value:__ `1`
    font : string
        The typeface to set the text in (e.g., `"Helvetica Neue"`).
    fontSize : number
        The font size, in pixels.
    fontStyle : string
        The font style (e.g., `"italic"`).
    fontWeight : AnyOf([string, number])
        The font weight (e.g., `"bold"`).
    interpolate : string
        The line interpolation method to use for line and area marks.
        One of the following:
        - `"linear"`: piecewise linear segments, as in a polyline.
        - `"linear-closed"`: close the linear segments to form a
          polygon.
        - `"step"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"step-before"`: alternate between vertical and horizontal
          segments, as in a step function.
        - `"step-after"`: alternate between horizontal and vertical
          segments, as in a step function.
        - `"basis"`: a B-spline, with control point duplication on
          the ends.
        - `"basis-open"`: an open B-spline; may not intersect the
          start or end.
        - `"basis-closed"`: a closed B-spline, as in a loop.
        - `"cardinal"`: a Cardinal spline, with control point
          duplication on the ends.
        - `"cardinal-open"`: an open Cardinal spline; may not
          intersect the start or end, but will intersect other control
          points.
        - `"cardinal-closed"`: a closed Cardinal spline, as in a
          loop.
        - `"bundle"`: equivalent to basis, except the tension
          parameter is used to straighten the spline.
        - `"monotone"`: cubic interpolation that preserves
          monotonicity in y.
    limit : number
        The maximum length of the text mark in pixels (default 0,
        indicating no limit). The text value will be automatically
        truncated if the rendered size exceeds the limit.
    opacity : number
        The overall opacity (value between [0,1]).
        __Default value:__ `0.7` for non-aggregate plots with `point`,
        `tick`, `circle`, or `square` marks or layered `bar` charts
        and `1` otherwise.
    orient : string
        The orientation of a non-stacked bar, tick, area, and line
        charts.
        The value is either horizontal (default) or vertical.
        - For bar, rule and tick, this determines whether the size
          of the bar and tick
        should be applied to x or y dimension.
        - For area, this property determines the orient property of
          the Vega output.
        - For line, this property determines the sort order of the
          points in the line
        if `config.sortLineBy` is not specified.
        For stacked charts, this is always determined by the
        orientation of the stack;
        therefore explicitly specified value will be ignored.
    radius : number
        Polar coordinate radial offset, in pixels, of the text label
        from the origin determined by the `x` and `y` properties.
    shape : string
        The default symbol shape to use. One of: `"circle"` (default),
        `"square"`, `"cross"`, `"diamond"`, `"triangle-up"`, or
        `"triangle-down"`, or a custom SVG path.
        __Default value:__ `"circle"`
    size : number
        The pixel area each the point/circle/square.
        For example: in the case of circles, the radius is determined
        in part by the square root of the size value.
        __Default value:__ `30`
    stroke : string
        Default Stroke Color.  This has higher precedence than
        config.color
        __Default value:__ (None)
    strokeDash : Array(number)
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
        __Default value:__ `1`
    strokeWidth : number
        The stroke width, in pixels.
    tension : number
        Depending on the interpolation type, sets the tension
        parameter (for line and area marks).
    text : string
        Placeholder text if the `text` channel is not specified
    theta : number
        Polar coordinate angle, in radians, of the text label from the
        origin determined by the `x` and `y` properties. Values for
        `theta` follow the same convention of `arc` mark `startAngle`
        and `endAngle` properties: angles are measured in radians,
        with `0` indicating "north".
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    align = HorizontalAlign()
    angle = jst.JSONNumber(help='The rotation angle of the text, in degrees.', maximum=360, minimum=0)
    baseline = VerticalAlign()
    dx = jst.JSONNumber(help='The horizontal offset, in pixels, between the text label and its [...]')
    dy = jst.JSONNumber(help='The vertical offset, in pixels, between the text label and its [...]')
    fill = jst.JSONString(help='Default Fill Color. This has higher precedence than config.color [...]')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    font = jst.JSONString(help='The typeface to set the text in (e.g., `"Helvetica Neue"`).')
    fontSize = jst.JSONNumber(help='The font size, in pixels.', minimum=0)
    fontStyle = FontStyle()
    fontWeight = jst.JSONAnyOf([FontWeight(), jst.JSONNumber(maximum=900, minimum=100)], help='The font weight (e.g., `"bold"`).')
    interpolate = Interpolate()
    limit = jst.JSONNumber(help='The maximum length of the text mark in pixels (default 0, [...]')
    opacity = jst.JSONNumber(help='The overall opacity (value between [0,1]). __Default value:__ [...]', maximum=1, minimum=0)
    orient = Orient()
    radius = jst.JSONNumber(help='Polar coordinate radial offset, in pixels, of the text label [...]', minimum=0)
    shape = jst.JSONString(help='The default symbol shape to use. One of: `"circle"` (default), [...]')
    size = jst.JSONNumber(help='The pixel area each the point/circle/square. For example: in the [...]', minimum=0)
    stroke = jst.JSONString(help='Default Stroke Color. This has higher precedence than [...]')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]). __Default value:__ `1`', maximum=1, minimum=0)
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels.', minimum=0)
    tension = jst.JSONNumber(help='Depending on the interpolation type, sets the tension parameter [...]', maximum=1, minimum=0)
    text = jst.JSONString(help='Placeholder text if the `text` channel is not specified')
    theta = jst.JSONNumber(help='Polar coordinate angle, in radians, of the text label from the [...]')

    def __init__(self, align=jst.undefined, angle=jst.undefined, baseline=jst.undefined, dx=jst.undefined, dy=jst.undefined, fill=jst.undefined, fillOpacity=jst.undefined, font=jst.undefined, fontSize=jst.undefined, fontStyle=jst.undefined, fontWeight=jst.undefined, interpolate=jst.undefined, limit=jst.undefined, opacity=jst.undefined, orient=jst.undefined, radius=jst.undefined, shape=jst.undefined, size=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, strokeDashOffset=jst.undefined, strokeOpacity=jst.undefined, strokeWidth=jst.undefined, tension=jst.undefined, text=jst.undefined, theta=jst.undefined, **kwargs):
        kwds = dict(align=align, angle=angle, baseline=baseline, dx=dx, dy=dy, fill=fill, fillOpacity=fillOpacity, font=font, fontSize=fontSize, fontStyle=fontStyle, fontWeight=fontWeight, interpolate=interpolate, limit=limit, opacity=opacity, orient=orient, radius=radius, shape=shape, size=size, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth, tension=tension, text=text, theta=theta)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgMarkConfig, self).__init__(**kwargs)


class VgRadioBinding(jst.JSONHasTraits):
    """VgRadioBinding class

    

    Attributes
    ----------
    element : string
        
    input : string
        
    options : Array(string)
        
    """
    _additional_traits = False
    _required_traits = ['input', 'options']
    _trait_name_map = {}
    element = jst.JSONString()
    input = jst.JSONEnum(['radio'])
    options = jst.JSONArray(jst.JSONString())

    def __init__(self, element=jst.undefined, input=jst.undefined, options=jst.undefined, **kwargs):
        kwds = dict(element=element, input=input, options=options)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgRadioBinding, self).__init__(**kwargs)


class VgRangeBinding(jst.JSONHasTraits):
    """VgRangeBinding class

    

    Attributes
    ----------
    element : string
        
    input : string
        
    max : number
        
    min : number
        
    step : number
        
    """
    _additional_traits = False
    _required_traits = ['input']
    _trait_name_map = {}
    element = jst.JSONString()
    input = jst.JSONEnum(['range'])
    max = jst.JSONNumber()
    min = jst.JSONNumber()
    step = jst.JSONNumber()

    def __init__(self, element=jst.undefined, input=jst.undefined, max=jst.undefined, min=jst.undefined, step=jst.undefined, **kwargs):
        kwds = dict(element=element, input=input, max=max, min=min, step=step)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgRangeBinding, self).__init__(**kwargs)


class VgScheme(jst.JSONHasTraits):
    """VgScheme class

    

    Attributes
    ----------
    count : number
        
    extent : Array(number)
        
    scheme : string
        
    """
    _additional_traits = False
    _required_traits = ['scheme']
    _trait_name_map = {}
    count = jst.JSONNumber()
    extent = jst.JSONArray(jst.JSONNumber())
    scheme = jst.JSONString()

    def __init__(self, count=jst.undefined, extent=jst.undefined, scheme=jst.undefined, **kwargs):
        kwds = dict(count=count, extent=extent, scheme=scheme)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgScheme, self).__init__(**kwargs)


class VgSelectBinding(jst.JSONHasTraits):
    """VgSelectBinding class

    

    Attributes
    ----------
    element : string
        
    input : string
        
    options : Array(string)
        
    """
    _additional_traits = False
    _required_traits = ['input', 'options']
    _trait_name_map = {}
    element = jst.JSONString()
    input = jst.JSONEnum(['select'])
    options = jst.JSONArray(jst.JSONString())

    def __init__(self, element=jst.undefined, input=jst.undefined, options=jst.undefined, **kwargs):
        kwds = dict(element=element, input=input, options=options)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgSelectBinding, self).__init__(**kwargs)


class VgTitleConfig(jst.JSONHasTraits):
    """VgTitleConfig class

    

    Attributes
    ----------
    anchor : string
        The anchor position for placing the title. One of `"start"`,
        `"middle"`, or `"end"`. For example, with an orientation of
        top these anchor positions map to a left-, center-, or right-
        aligned title.
        __Default value:__ `"middle"` for [single](spec.html) and
        [layered](layer.html) views.
        `"start"` for other composite views.
        __Note:__ [For now](https://github.com/vega/vega-
        lite/issues/2875), `anchor` is only customizable only for
        [single](spec.html) and [layered](layer.html) views.  For
        other composite views, `anchor` is always `"start"`.
    angle : number
        Angle in degrees of title text.
    baseline : string
        Vertical text baseline for title text.
    color : string
        Text color for title text.
    font : string
        Font name for title text.
    fontSize : number
        Font size in pixels for title text.
        __Default value:__ `10`.
    fontWeight : AnyOf([string, number])
        Font weight for title text.
    limit : number
        The maximum allowed length in pixels of legend labels.
    offset : number
        Offset in pixels of the title from the chart body and axes.
    orient : string
        Default title orientation ("top", "bottom", "left", or
        "right")
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    anchor = Anchor()
    angle = jst.JSONNumber(help='Angle in degrees of title text.')
    baseline = VerticalAlign()
    color = jst.JSONString(help='Text color for title text.')
    font = jst.JSONString(help='Font name for title text.')
    fontSize = jst.JSONNumber(help='Font size in pixels for title text. __Default value:__ `10`.', minimum=0)
    fontWeight = jst.JSONAnyOf([FontWeight(), jst.JSONNumber(maximum=900, minimum=100)], help='Font weight for title text.')
    limit = jst.JSONNumber(help='The maximum allowed length in pixels of legend labels.', minimum=0)
    offset = jst.JSONNumber(help='Offset in pixels of the title from the chart body and axes.')
    orient = TitleOrient()

    def __init__(self, anchor=jst.undefined, angle=jst.undefined, baseline=jst.undefined, color=jst.undefined, font=jst.undefined, fontSize=jst.undefined, fontWeight=jst.undefined, limit=jst.undefined, offset=jst.undefined, orient=jst.undefined, **kwargs):
        kwds = dict(anchor=anchor, angle=angle, baseline=baseline, color=color, font=font, fontSize=fontSize, fontWeight=fontWeight, limit=limit, offset=offset, orient=orient)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(VgTitleConfig, self).__init__(**kwargs)


class ViewConfig(jst.JSONHasTraits):
    """ViewConfig class

    

    Attributes
    ----------
    clip : boolean
        Whether the view should be clipped.
    fill : string
        The fill color.
        __Default value:__ (none)
    fillOpacity : number
        The fill opacity (value between [0,1]).
        __Default value:__ (none)
    height : number
        The default height of the single plot or each plot in a
        trellis plot when the visualization has a continuous (non-
        ordinal) y-scale with `rangeStep` = `null`.
        __Default value:__ `200`
    stroke : string
        The stroke color.
        __Default value:__ (none)
    strokeDash : Array(number)
        An array of alternating stroke, space lengths for creating
        dashed or dotted lines.
        __Default value:__ (none)
    strokeDashOffset : number
        The offset (in pixels) into which to begin drawing with the
        stroke dash array.
        __Default value:__ (none)
    strokeOpacity : number
        The stroke opacity (value between [0,1]).
        __Default value:__ (none)
    strokeWidth : number
        The stroke width, in pixels.
        __Default value:__ (none)
    width : number
        The default width of the single plot or each plot in a trellis
        plot when the visualization has a continuous (non-ordinal)
        x-scale or ordinal x-scale with `rangeStep` = `null`.
        __Default value:__ `200`
    """
    _additional_traits = False
    _required_traits = []
    _trait_name_map = {}
    clip = jst.JSONBoolean(help='Whether the view should be clipped.')
    fill = jst.JSONString(help='The fill color. __Default value:__ (none)')
    fillOpacity = jst.JSONNumber(help='The fill opacity (value between [0,1]). __Default value:__ (none)')
    height = jst.JSONNumber(help='The default height of the single plot or each plot in a trellis [...]')
    stroke = jst.JSONString(help='The stroke color. __Default value:__ (none)')
    strokeDash = jst.JSONArray(jst.JSONNumber(), help='An array of alternating stroke, space lengths for creating [...]')
    strokeDashOffset = jst.JSONNumber(help='The offset (in pixels) into which to begin drawing with the [...]')
    strokeOpacity = jst.JSONNumber(help='The stroke opacity (value between [0,1]). __Default value:__ (none)')
    strokeWidth = jst.JSONNumber(help='The stroke width, in pixels. __Default value:__ (none)')
    width = jst.JSONNumber(help='The default width of the single plot or each plot in a trellis [...]')

    def __init__(self, clip=jst.undefined, fill=jst.undefined, fillOpacity=jst.undefined, height=jst.undefined, stroke=jst.undefined, strokeDash=jst.undefined, strokeDashOffset=jst.undefined, strokeOpacity=jst.undefined, strokeWidth=jst.undefined, width=jst.undefined, **kwargs):
        kwds = dict(clip=clip, fill=fill, fillOpacity=fillOpacity, height=height, stroke=stroke, strokeDash=strokeDash, strokeDashOffset=strokeDashOffset, strokeOpacity=strokeOpacity, strokeWidth=strokeWidth, width=width)
        kwargs.update({k:v for k, v in kwds.items() if v is not jst.undefined})
        super(ViewConfig, self).__init__(**kwargs)




























